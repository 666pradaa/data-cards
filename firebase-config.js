// ========================================
// FIREBASE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ========================================

// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ –∏–∑ Firebase Console
// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
// 1. –û—Ç–∫—Ä–æ–π—Ç–µ https://console.firebase.google.com/
// 2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç
// 3. –ó–∞–π–¥–∏—Ç–µ –≤ Project Settings (‚öôÔ∏è)
// 4. –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–æ "Your apps" ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ Web app
// 5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

const firebaseConfig = {
    apiKey: "AIzaSyAtptVv5Gm2Qxd7uCvnKhxZArqzd_94kz0",
    authDomain: "dota-cards.firebaseapp.com",
    databaseURL: "https://dota-cards-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "dota-cards",
    storageBucket: "dota-cards.firebasestorage.app",
    messagingSenderId: "913111804525",
    appId: "1:913111804525:web:807541d80f17e72fc3ad64"
  };
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let app;
let auth;
let database;

try {
    app = firebase.initializeApp(firebaseConfig);
    auth = firebase.auth();
    database = firebase.database();
    console.log('‚úÖ Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Firebase.');
}

// ========================================
// FIREBASE DATABASE ADAPTER
// ========================================

class FirebaseAdapter {
    constructor() {
        this.auth = auth;
        this.database = database;
        this.currentUser = null;
        this.listeners = {};
    }

    // ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

    async register(username, password) {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const email = `${username}@dotacards.local`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Å–µ–≤–¥–æ-email
            const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);
            const userId = userCredential.user.uid;

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const userData = {
                username: username,
                nickname: username,
                userid: this.generateUserId(),
                level: 1,
                experience: 0,
                gold: 0,
                gems: 0,
                cards: {},
                deck: [],
                upgrades: {},
                avatar: null,
                friends: [],
                friendRequests: {
                    incoming: [],
                    outgoing: []
                },
                battlesPlayed: 0,
                casesOpened: 0,
                createdAt: Date.now()
            };

            await this.database.ref(`users/${userId}`).set(userData);

            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', username);
            return { success: true, userId, userData };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
            
            if (error.code === 'auth/email-already-in-use') {
                errorMessage = '–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!';
            } else if (error.code === 'auth/weak-password') {
                errorMessage = '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)';
            } else if (error.code === 'auth/invalid-email') {
                errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            } else {
                errorMessage = error.message;
            }
            
            console.log('üìõ –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', errorMessage);
            return { success: false, error: errorMessage };
        }
    }

    async login(username, password) {
        try {
            const email = `${username}@dotacards.local`;
            const userCredential = await this.auth.signInWithEmailAndPassword(email, password);
            const userId = userCredential.user.uid;

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const snapshot = await this.database.ref(`users/${userId}`).once('value');
            const userData = snapshot.val();

            if (!userData) {
                throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            this.currentUser = userId;
            console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', username);
            
            return { success: true, userId, userData };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            
            if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
                return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!' };
            }
            
            return { success: false, error: error.message };
        }
    }

    async logout() {
        try {
            await this.auth.signOut();
            this.currentUser = null;
            console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            return { success: true };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            return { success: false, error: error.message };
        }
    }

    // ===== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò =====

    async getUserData(userId = null) {
        try {
            const uid = userId || this.currentUser;
            if (!uid) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

            const snapshot = await this.database.ref(`users/${uid}`).once('value');
            return snapshot.val();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    async updateUserData(userId, data) {
        try {
            const uid = userId || this.currentUser;
            if (!uid) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

            await this.database.ref(`users/${uid}`).update(data);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            return { success: true };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return { success: false, error: error.message };
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π)
    async getAllUsers() {
        try {
            const snapshot = await this.database.ref('users').once('value');
            const users = {};
            
            snapshot.forEach((childSnapshot) => {
                users[childSnapshot.key] = childSnapshot.val();
            });
            
            return users;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return {};
        }
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async searchUsers(query) {
        try {
            const allUsers = await this.getAllUsers();
            const queryLower = query.toLowerCase();
            
            const results = Object.entries(allUsers)
                .filter(([userId, userData]) => {
                    if (userId === this.currentUser) return false;
                    
                    const username = (userData.username || '').toLowerCase();
                    const nickname = (userData.nickname || '').toLowerCase();
                    const userid = (userData.userid || '').toLowerCase();
                    
                    return username.includes(queryLower) ||
                           nickname.includes(queryLower) ||
                           userid.includes(queryLower);
                })
                .map(([userId, userData]) => ({ userId, ...userData }));
            
            return results;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            return [];
        }
    }

    // ===== REAL-TIME LISTENERS =====

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    listenToUserData(userId, callback) {
        const uid = userId || this.currentUser;
        if (!uid) return;

        const ref = this.database.ref(`users/${uid}`);
        
        const listener = ref.on('value', (snapshot) => {
            callback(snapshot.val());
        });

        this.listeners[uid] = { ref, listener };
    }

    // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    unlistenToUserData(userId) {
        const uid = userId || this.currentUser;
        if (this.listeners[uid]) {
            this.listeners[uid].ref.off('value', this.listeners[uid].listener);
            delete this.listeners[uid];
        }
    }

    // ===== –£–¢–ò–õ–ò–¢–´ =====

    generateUserId() {
        return 'ID' + Math.random().toString(36).substr(2, 9).toUpperCase();
    }

    getCurrentUserId() {
        return this.currentUser;
    }

    isAuthenticated() {
        return this.auth.currentUser !== null;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const firebaseAdapter = new FirebaseAdapter();

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth.onAuthStateChanged(async (user) => {
    if (user) {
        firebaseAdapter.currentUser = user.uid;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.uid);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (window.gameData && !window.gameData.currentUser) {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é...');
            try {
                const userData = await firebaseAdapter.getUserData(user.uid);
                if (userData) {
                    window.gameData.currentUser = user.uid;
                    window.gameData.currentUserData = userData;
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    firebaseAdapter.listenToUserData(user.uid, (data) => {
                        window.gameData.currentUserData = data;
                        window.gameData.updateUserInfo();
                    });
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    window.gameData.allUsersCache = await firebaseAdapter.getAllUsers();
                    
                    console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                    window.gameData.showMainMenu();
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            }
        }
    } else {
        firebaseAdapter.currentUser = null;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
});

