/**
 * ‚öîÔ∏è –°–ò–°–¢–ï–ú–ê –ö–õ–ê–ù–û–í
 * –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤
 */

class ClansSystem {
    constructor(gameData) {
        this.gameData = gameData;
        this.currentClan = null;
        this.clanAvatarParts = {
            backgrounds: ['‚¨õ', 'üü•', 'üü¶', 'üü©', 'üü®', 'üü™', 'üüß'],
            symbols: ['‚öîÔ∏è', 'üõ°Ô∏è', 'üëë', 'üî•', '‚ö°', 'üíÄ', 'üêâ', 'ü¶Ö', 'üåü', 'üíé'],
            colors: ['#fff', '#000', '#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff']
        };
        this.selectedParts = {
            background: 0,
            symbol: 0,
            color: 0
        };
    }

    async init() {
        console.log('üè∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞–Ω–æ–≤...');
        
        try {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupEventListeners();
            
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–æ–≤:', error);
        }
    }

    setupEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–Ω–æ–≤...');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
        const createBtn = document.getElementById('create-clan-btn');
        if (createBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞');
            createBtn.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞');
                this.openCreateClanModal();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ create-clan-btn –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        document.getElementById('confirm-create-clan-btn')?.addEventListener('click', () => this.createClan());
        document.getElementById('close-create-clan')?.addEventListener('click', () => this.closeCreateClanModal());
        
        // –ü–æ–∏—Å–∫ –∫–ª–∞–Ω–æ–≤
        const findBtn = document.getElementById('find-clan-btn');
        if (findBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞');
            findBtn.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –ø–æ–∏—Å–∫ –∫–ª–∞–Ω–∞');
                this.openFindClans();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ find-clan-btn –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        document.getElementById('back-from-search-btn')?.addEventListener('click', () => this.closeFindClans());
        document.getElementById('clan-search-btn')?.addEventListener('click', () => this.searchClans());
        
        // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        document.getElementById('clan-search')?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.searchClans();
        });
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–º
        const addMemberBtn = document.getElementById('add-member-btn');
        if (addMemberBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
            addMemberBtn.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                this.openAddMemberModal();
            });
        } else {
            console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ add-member-btn –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–Ω–∞)');
        }
        
        document.getElementById('leave-clan-btn')?.addEventListener('click', () => this.leaveClan());
        document.getElementById('search-member-btn')?.addEventListener('click', () => this.searchMember());
        document.getElementById('close-add-member')?.addEventListener('click', () => this.closeAddMemberModal());
        
        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏
        this.setupAvatarConstructor();
    }

    setupAvatarConstructor() {
        // –§–æ–Ω—ã
        const bgOptions = document.getElementById('bg-options');
        if (bgOptions) {
            bgOptions.innerHTML = this.clanAvatarParts.backgrounds.map((bg, i) => 
                `<div class="avatar-option" data-part="background" data-index="${i}">${bg}</div>`
            ).join('');
        }
        
        // –°–∏–º–≤–æ–ª—ã
        const symbolOptions = document.getElementById('symbol-options');
        if (symbolOptions) {
            symbolOptions.innerHTML = this.clanAvatarParts.symbols.map((symbol, i) => 
                `<div class="avatar-option" data-part="symbol" data-index="${i}">${symbol}</div>`
            ).join('');
        }
        
        // –¶–í–ï–¢–ê –£–ë–†–ê–ù–´ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é—Ç
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞
        document.querySelectorAll('.avatar-option').forEach(option => {
            option.addEventListener('click', (e) => {
                const part = e.target.dataset.part;
                const index = parseInt(e.target.dataset.index);
                this.selectedParts[part] = index;
                this.updateAvatarPreview();
                
                // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                e.target.parentElement.querySelectorAll('.avatar-option').forEach(o => o.classList.remove('selected'));
                e.target.classList.add('selected');
            });
        });
        
        this.updateAvatarPreview();
    }

    updateAvatarPreview() {
        const preview = document.getElementById('clan-avatar-preview');
        if (!preview) return;
        
        const bg = this.clanAvatarParts.backgrounds[this.selectedParts.background];
        const symbol = this.clanAvatarParts.symbols[this.selectedParts.symbol];
        const color = this.clanAvatarParts.colors[this.selectedParts.color];
        
        preview.innerHTML = `
            <div class="clan-avatar-display">
                <div class="avatar-bg">${bg}</div>
                <div class="avatar-symbol" style="color: ${color}">${symbol}</div>
            </div>
        `;
    }

    async loadUserClan() {
        const user = this.gameData.getUser();
        
        // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await this.loadClanInvites();
        
        if (!user || !user.clanId) {
            this.showNoClanView();
            return;
        }
        
        try {
            const clan = await this.getClanById(user.clanId);
            if (clan) {
                this.currentClan = clan;
                this.showClanView(clan);
            } else {
                this.showNoClanView();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞–Ω–∞:', error);
            this.showNoClanView();
        }
    }

    showNoClanView() {
        document.getElementById('no-clan-view').style.display = 'block';
        document.getElementById('clan-view').style.display = 'none';
        document.getElementById('find-clan-view').style.display = 'none';
    }

    showClanView(clan) {
        document.getElementById('no-clan-view').style.display = 'none';
        document.getElementById('clan-view').style.display = 'block';
        document.getElementById('find-clan-view').style.display = 'none';
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
        document.getElementById('clan-tag-display').textContent = `[${clan.tag}]`;
        document.getElementById('clan-name-display').textContent = clan.name;
        document.getElementById('clan-description-display').textContent = clan.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        document.getElementById('clan-level').textContent = clan.level || 1;
        document.getElementById('clan-exp').textContent = `${clan.exp || 0} / ${(clan.level || 1) * 100}`;
        document.getElementById('clan-members-count').textContent = clan.members ? clan.members.length : 0;
        
        // –ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–ª–∞–Ω–∞
        this.displayClanAvatar('clan-avatar-display', clan.avatar);
        
        // –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        this.loadClanMembers(clan);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –ª–∏–¥–µ—Ä)
        this.loadJoinRequests();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        setTimeout(() => {
            const addBtn = document.getElementById('add-member-btn');
            if (addBtn && !addBtn.dataset.listenerAdded) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                addBtn.addEventListener('click', () => {
                    console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                    this.openAddMemberModal();
                });
                addBtn.dataset.listenerAdded = 'true';
            }
        }, 100);
    }

    displayClanAvatar(elementId, avatar) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        element.innerHTML = `
            <div class="clan-avatar-display">
                <div class="avatar-bg">${this.clanAvatarParts.backgrounds[avatar.background || 0]}</div>
                <div class="avatar-symbol" style="color: ${this.clanAvatarParts.colors[avatar.color || 0]}">${this.clanAvatarParts.symbols[avatar.symbol || 0]}</div>
            </div>
        `;
    }

    async loadClanMembers(clan) {
        const container = document.getElementById('clan-members-container');
        if (!container) return;
        
        container.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>';
        
        try {
            const allUsers = await this.gameData.getAllUsers();
            const members = (clan.members || []).map(userId => {
                const user = allUsers[userId];
                if (!user) return null;
                
                const isLeader = userId === clan.leader;
                return {
                    userId,
                    nickname: user.nickname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                    level: user.level || 1,
                    isLeader
                };
            }).filter(m => m);
            
            if (members.length === 0) {
                container.innerHTML = '<p>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>';
                return;
            }
            
            container.innerHTML = members.map(member => `
                <div class="clan-member-item">
                    <div class="member-info">
                        <span class="member-name">${member.nickname} ${member.isLeader ? 'üëë' : ''}</span>
                        <span class="member-level">–£—Ä. ${member.level}</span>
                    </div>
                    ${!member.isLeader && clan.leader === this.gameData.currentUser ? 
                        `<button class="btn small remove-member-btn" onclick="window.clansSystem.removeMember('${member.userId}')">‚ùå</button>` : 
                        ''}
                </div>
            `).join('');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
            container.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>';
        }
    }

    openCreateClanModal() {
        console.log('üé® –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞');
        
        const user = this.gameData.getUser();
        console.log('–ì–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.gems);
        
        if (user.gems < 25) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤! –ù—É–∂–Ω–æ 25 üíé');
            return;
        }
        
        const modal = document.getElementById('create-clan-modal');
        if (modal) {
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º');
            modal.style.display = 'flex';
            setTimeout(() => modal.classList.add('active'), 10);
            this.setupAvatarConstructor();
            this.updateAvatarPreview();
        } else {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ create-clan-modal –ù–ï –Ω–∞–π–¥–µ–Ω–æ!');
        }
    }

    closeCreateClanModal() {
        document.getElementById('create-clan-modal').style.display = 'none';
    }

    async createClan() {
        const tag = document.getElementById('clan-tag-input').value.trim().toUpperCase();
        const name = document.getElementById('clan-name-input').value.trim();
        const description = document.getElementById('clan-description-input').value.trim();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!tag || tag.length < 2 || tag.length > 5) {
            await this.gameData.showAlert('–¢–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        if (!name || name.length < 3) {
            await this.gameData.showAlert('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        const user = this.gameData.getUser();
        if (user.gems < 25) {
            await this.gameData.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤! –ù—É–∂–Ω–æ: 25 üíé', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        // –ö—Ä–∞—Å–∏–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmed = await this.gameData.showConfirm(
            `–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω "${name}" [${tag}] –∑–∞ 25 –≥–µ–º–æ–≤?`, 
            'üè∞', 
            '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞'
        );
        
        if (!confirmed) {
            return;
        }
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫–ª–∞–Ω–∞
            const clanId = 'clan_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            const clanData = {
                id: clanId,
                tag,
                name,
                description,
                leader: this.gameData.currentUser,
                members: [this.gameData.currentUser],
                level: 1,
                exp: 0,
                avatar: {
                    background: this.selectedParts.background,
                    symbol: this.selectedParts.symbol,
                    color: this.selectedParts.color
                },
                createdAt: Date.now()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–Ω
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${clanId}`).set(clanData);
            } else {
                // localStorage
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                clans[clanId] = clanData;
                localStorage.setItem('clans', JSON.stringify(clans));
            }
            
            // –°–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–º—ã –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await this.gameData.saveUser({
                gems: user.gems - 25,
                clanId: clanId
            });
            
            alert(`‚úÖ –ö–ª–∞–Ω [${tag}] "${name}" —Å–æ–∑–¥–∞–Ω!`);
            this.closeCreateClanModal();
            await this.loadUserClan();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: ' + error.message);
        }
    }

    async getClanById(clanId) {
        if (this.gameData.useFirebase) {
            const snapshot = await firebase.database().ref(`clans/${clanId}`).once('value');
            return snapshot.val();
        } else {
            const clans = JSON.parse(localStorage.getItem('clans') || '{}');
            return clans[clanId];
        }
    }

    async leaveClan() {
        if (!this.currentClan) return;
        
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω?')) return;
        
        try {
            const user = this.gameData.getUser();
            
            // –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –µ—Å–ª–∏ –ª–∏–¥–µ—Ä
            if (this.currentClan.leader === this.gameData.currentUser) {
                alert('–õ–∏–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω! –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏–ª–∏ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∞–Ω.');
                return;
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const updatedMembers = (this.currentClan.members || []).filter(id => id !== this.gameData.currentUser);
            
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${this.currentClan.id}/members`).set(updatedMembers);
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[this.currentClan.id]) {
                    clans[this.currentClan.id].members = updatedMembers;
                    localStorage.setItem('clans', JSON.stringify(clans));
                }
            }
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.gameData.saveUser({ clanId: null });
            
            alert('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω');
            this.currentClan = null;
            this.showNoClanView();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–ª–∞–Ω–∞:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }

    openAddMemberModal() {
        console.log('üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        const modal = document.getElementById('add-member-modal');
        if (modal) {
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ');
            modal.style.display = 'flex';
            setTimeout(() => modal.classList.add('active'), 10);
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
            const searchBtn = document.getElementById('search-member-btn');
            if (searchBtn && !searchBtn.dataset.listenerAdded) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                searchBtn.addEventListener('click', () => {
                    console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                    this.searchMember();
                });
                searchBtn.dataset.listenerAdded = 'true';
            }
            
            // –ü–æ–∏—Å–∫ –ø–æ Enter
            const searchInput = document.getElementById('member-search-input');
            if (searchInput && !searchInput.dataset.listenerAdded) {
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        console.log('üîµ Enter –≤ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                        this.searchMember();
                    }
                });
                searchInput.dataset.listenerAdded = 'true';
            }
        } else {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ add-member-modal –ù–ï –Ω–∞–π–¥–µ–Ω–æ!');
        }
    }

    closeAddMemberModal() {
        const modal = document.getElementById('add-member-modal');
        if (modal) {
            modal.style.display = 'none';
            modal.classList.remove('active');
        }
        // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        document.getElementById('member-search-results').innerHTML = '';
        document.getElementById('member-search-input').value = '';
    }

    async searchMember() {
        const query = document.getElementById('member-search-input').value.trim();
        if (!query) {
            alert('–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º');
            return;
        }
        
        const resultsContainer = document.getElementById('member-search-results');
        resultsContainer.innerHTML = '<p>–ü–æ–∏—Å–∫...</p>';
        
        try {
            const allUsers = await this.gameData.getAllUsers();
            const results = Object.entries(allUsers).filter(([userId, user]) => {
                const matchId = (user.userid || '').includes(query);
                const matchNick = (user.nickname || '').toLowerCase().includes(query.toLowerCase());
                return matchId || matchNick;
            });
            
            if (results.length === 0) {
                resultsContainer.innerHTML = '<p>–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>';
                return;
            }
            
            resultsContainer.innerHTML = results.slice(0, 10).map(([userId, user]) => `
                <div class="search-result-item">
                    <div>
                        <strong>${user.nickname || '–ë–µ–∑ –Ω–∏–∫–∞'}</strong>
                        <br>
                        <small>ID: ${user.userid}</small>
                    </div>
                    <button class="btn small" onclick="window.clansSystem.inviteMember('${userId}')">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å</button>
                </div>
            `).join('');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            resultsContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</p>';
        }
    }

    async inviteMember(userId) {
        if (!this.currentClan) return;
        
        if (this.currentClan.members.includes(userId)) {
            alert('–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–ª–∞–Ω–µ!');
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞–Ω–∞
            const targetUser = await this.gameData.getUserById(userId);
            if (targetUser.clanId) {
                alert('–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ!');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const existingInvites = targetUser.clanInvites || [];
            if (existingInvites.some(inv => inv.clanId === this.currentClan.id)) {
                alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            const invite = {
                clanId: this.currentClan.id,
                clanTag: this.currentClan.tag,
                clanName: this.currentClan.name,
                invitedBy: this.gameData.currentUser,
                inviterNick: this.gameData.getUser().nickname || this.gameData.getUser().username,
                timestamp: Date.now()
            };
            
            const updatedInvites = [...existingInvites, invite];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`users/${userId}/clanInvites`).set(updatedInvites);
            } else {
                const users = JSON.parse(localStorage.getItem('dotaCardsUsers') || '{}');
                if (users[userId]) {
                    users[userId].clanInvites = updatedInvites;
                    localStorage.setItem('dotaCardsUsers', JSON.stringify(users));
                }
            }
            
            alert(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É!`);
            this.closeAddMemberModal();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
    
    async loadClanInvites() {
        const user = this.gameData.getUser();
        if (!user) return;
        
        const invites = user.clanInvites || [];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitesContainer = document.getElementById('clan-invites-container');
        if (invitesContainer) {
            if (invites.length === 0) {
                invitesContainer.style.display = 'none';
                return;
            }
            
            invitesContainer.style.display = 'block';
            invitesContainer.innerHTML = `
                <div class="clan-invites-header">
                    <h3>üì¨ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω—ã (${invites.length})</h3>
                </div>
                ${invites.map((invite, index) => `
                    <div class="clan-invite-item">
                        <div class="invite-info">
                            <strong>[${invite.clanTag}] ${invite.clanName}</strong>
                            <br>
                            <small>–û—Ç: ${invite.inviterNick}</small>
                        </div>
                        <div class="invite-actions">
                            <button class="btn small primary" onclick="window.clansSystem.acceptClanInvite(${index})">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>
                            <button class="btn small secondary" onclick="window.clansSystem.rejectClanInvite(${index})">‚ùå –û—Ç–∫–∞–∑–∞—Ç—å</button>
                        </div>
                    </div>
                `).join('')}
            `;
        }
    }
    
    async acceptClanInvite(inviteIndex) {
        const user = this.gameData.getUser();
        const invites = user.clanInvites || [];
        
        if (!invites[inviteIndex]) {
            alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        const invite = invites[inviteIndex];
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞–Ω –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const clan = await this.getClanById(invite.clanId);
            if (!clan) {
                alert('–ö–ª–∞–Ω –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                await this.rejectClanInvite(inviteIndex);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–ª–∞–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 5 —á–µ–ª–æ–≤–µ–∫)
            const currentMembers = clan.members || [];
            if (currentMembers.length >= 5) {
                await this.gameData.showAlert('–ö–ª–∞–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –ú–∞–∫—Å–∏–º—É–º 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.', '‚ö†Ô∏è', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ');
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞–Ω
            const updatedMembers = [...currentMembers, this.gameData.currentUser];
            
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${invite.clanId}/members`).set(updatedMembers);
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[invite.clanId]) {
                    clans[invite.clanId].members = updatedMembers;
                    localStorage.setItem('clans', JSON.stringify(clans));
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º clanId
            const remainingInvites = invites.filter((_, i) => i !== inviteIndex);
            await this.gameData.saveUser({
                clanId: invite.clanId,
                clanInvites: remainingInvites
            });
            
            alert(`‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω [${invite.clanTag}] ${invite.clanName}!`);
            await this.loadUserClan();
            await this.gameData.updateNicknameWithClanTag(user);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
    
    async rejectClanInvite(inviteIndex) {
        const user = this.gameData.getUser();
        const invites = user.clanInvites || [];
        
        if (!invites[inviteIndex]) {
            alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const remainingInvites = invites.filter((_, i) => i !== inviteIndex);
        await this.gameData.saveUser({ clanInvites: remainingInvites });
        
        alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        await this.loadClanInvites();
    }

    async removeMember(userId) {
        if (!this.currentClan) return;
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞?')) return;
        
        try {
            const updatedMembers = this.currentClan.members.filter(id => id !== userId);
            
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${this.currentClan.id}/members`).set(updatedMembers);
                await firebase.database().ref(`users/${userId}/clanId`).set(null);
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[this.currentClan.id]) {
                    clans[this.currentClan.id].members = updatedMembers;
                    localStorage.setItem('clans', JSON.stringify(clans));
                }
            }
            
            alert('–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–ª–∞–Ω–∞');
            await this.loadUserClan();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }

    openFindClans() {
        document.getElementById('no-clan-view').style.display = 'none';
        document.getElementById('find-clan-view').style.display = 'block';
    }

    closeFindClans() {
        document.getElementById('find-clan-view').style.display = 'none';
        document.getElementById('no-clan-view').style.display = 'block';
    }

    async searchClans() {
        const query = document.getElementById('clan-search').value.trim().toLowerCase();
        const resultsContainer = document.getElementById('clans-search-results');
        
        if (!query) {
            resultsContainer.innerHTML = '<p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</p>';
            return;
        }
        
        resultsContainer.innerHTML = '<p>–ü–æ–∏—Å–∫...</p>';
        
        try {
            let allClans = {};
            
            if (this.gameData.useFirebase) {
                const snapshot = await firebase.database().ref('clans').once('value');
                allClans = snapshot.val() || {};
            } else {
                allClans = JSON.parse(localStorage.getItem('clans') || '{}');
            }
            
            const results = Object.entries(allClans).filter(([clanId, clan]) => {
                const matchTag = (clan.tag || '').toLowerCase().includes(query);
                const matchName = (clan.name || '').toLowerCase().includes(query);
                return matchTag || matchName;
            });
            
            if (results.length === 0) {
                resultsContainer.innerHTML = '<div class="no-results">–ö–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }
            
            resultsContainer.innerHTML = results.map(([clanId, clan]) => `
                <div class="search-result-item">
                    <div class="clan-search-avatar">
                        ${this.renderClanAvatarString(clan.avatar)}
                    </div>
                    <div class="clan-search-info">
                        <strong>[${clan.tag}] ${clan.name}</strong>
                        <br>
                        <small>–£—Ä–æ–≤–µ–Ω—å: ${clan.level || 1} ‚Ä¢ –ß–ª–µ–Ω–æ–≤: ${(clan.members || []).length}</small>
                        <br>
                        <small class="clan-desc">${clan.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</small>
                    </div>
                    <button class="btn small" onclick="window.clansSystem.requestJoinClan('${clanId}')">–í—Å—Ç—É–ø–∏—Ç—å</button>
                </div>
            `).join('');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤:', error);
            resultsContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</p>';
        }
    }

    renderClanAvatarString(avatar) {
        if (!avatar) return '';
        const bg = this.clanAvatarParts.backgrounds[avatar.background || 0];
        const symbol = this.clanAvatarParts.symbols[avatar.symbol || 0];
        const color = this.clanAvatarParts.colors[avatar.color || 0];
        
        return `
            <div class="clan-avatar-mini">
                <div class="avatar-bg-mini">${bg}</div>
                <div class="avatar-symbol-mini" style="color: ${color}">${symbol}</div>
            </div>
        `;
    }

    async requestJoinClan(clanId) {
        try {
            const clan = await this.getClanById(clanId);
            if (!clan) {
                alert('–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            const user = this.gameData.getUser();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞–Ω–∞
            if (user.clanId) {
                alert('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å–∞
            const existingRequests = clan.joinRequests || [];
            if (existingRequests.some(req => req.userId === this.gameData.currentUser)) {
                alert('–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            const request = {
                userId: this.gameData.currentUser,
                userNick: user.nickname || user.username,
                userLevel: user.level || 1,
                userId_display: user.userid,
                timestamp: Date.now()
            };
            
            const updatedRequests = [...existingRequests, request];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫–ª–∞–Ω–µ
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${clanId}/joinRequests`).set(updatedRequests);
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[clanId]) {
                    clans[clanId].joinRequests = updatedRequests;
                    localStorage.setItem('clans', JSON.stringify(clans));
                }
            }
            
            alert(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ [${clan.tag}] ${clan.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`);
            this.closeFindClans();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
    
    async loadJoinRequests() {
        if (!this.currentClan) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –ª–∏–¥–µ—Ä
        const user = this.gameData.getUser();
        if (this.currentClan.leader !== this.gameData.currentUser) {
            return; // –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –≤–∏–¥–∏—Ç –∑–∞–ø—Ä–æ—Å—ã
        }
        
        const requests = this.currentClan.joinRequests || [];
        const requestsContainer = document.getElementById('clan-join-requests');
        
        if (!requestsContainer) return;
        
        if (requests.length === 0) {
            requestsContainer.style.display = 'none';
            return;
        }
        
        requestsContainer.style.display = 'block';
        requestsContainer.innerHTML = `
            <div class="join-requests-header">
                <h3>üìù –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (${requests.length})</h3>
            </div>
            ${requests.map((request, index) => `
                <div class="join-request-item">
                    <div class="request-info">
                        <strong>${request.userNick}</strong>
                        <br>
                        <small>ID: ${request.userId_display} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${request.userLevel}</small>
                    </div>
                    <div class="request-actions">
                        <button class="btn small primary" onclick="window.clansSystem.acceptJoinRequest(${index})">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>
                        <button class="btn small secondary" onclick="window.clansSystem.rejectJoinRequest(${index})">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                    </div>
                </div>
            `).join('')}
        `;
    }
    
    async acceptJoinRequest(requestIndex) {
        if (!this.currentClan) return;
        
        const requests = this.currentClan.joinRequests || [];
        if (!requests[requestIndex]) {
            alert('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const request = requests[requestIndex];
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –∫–ª–∞–Ω–µ
            const targetUser = await this.gameData.getUserById(request.userId);
            if (targetUser.clanId) {
                alert('–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤—Å—Ç—É–ø–∏–ª –≤ –¥—Ä—É–≥–æ–π –∫–ª–∞–Ω');
                await this.rejectJoinRequest(requestIndex);
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞–Ω
            const updatedMembers = [...(this.currentClan.members || []), request.userId];
            const remainingRequests = requests.filter((_, i) => i !== requestIndex);
            
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${this.currentClan.id}/members`).set(updatedMembers);
                await firebase.database().ref(`clans/${this.currentClan.id}/joinRequests`).set(remainingRequests);
                await firebase.database().ref(`users/${request.userId}/clanId`).set(this.currentClan.id);
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[this.currentClan.id]) {
                    clans[this.currentClan.id].members = updatedMembers;
                    clans[this.currentClan.id].joinRequests = remainingRequests;
                    localStorage.setItem('clans', JSON.stringify(clans));
                }
                
                const users = JSON.parse(localStorage.getItem('dotaCardsUsers') || '{}');
                if (users[request.userId]) {
                    users[request.userId].clanId = this.currentClan.id;
                    localStorage.setItem('dotaCardsUsers', JSON.stringify(users));
                }
            }
            
            alert(`‚úÖ –ò–≥—Ä–æ–∫ ${request.userNick} –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω!`);
            await this.loadUserClan();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
    
    async rejectJoinRequest(requestIndex) {
        if (!this.currentClan) return;
        
        const requests = this.currentClan.joinRequests || [];
        if (!requests[requestIndex]) return;
        
        const remainingRequests = requests.filter((_, i) => i !== requestIndex);
        
        try {
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`clans/${this.currentClan.id}/joinRequests`).set(remainingRequests);
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[this.currentClan.id]) {
                    clans[this.currentClan.id].joinRequests = remainingRequests;
                    localStorage.setItem('clans', JSON.stringify(clans));
                }
            }
            
            alert('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            await this.loadUserClan();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
        }
    }

    async updateClanUI() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–ª–∞–Ω–æ–≤...');
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await this.loadUserClan();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∫–ª–∞–Ω–æ–≤:', error);
            this.showNoClanView();
        }
    }

    async addClanExp(amount) {
        console.log('üè∞ addClanExp –≤—ã–∑–≤–∞–Ω, amount:', amount);
        console.log('   - currentClan:', this.currentClan);
        
        if (!this.currentClan) {
            console.log('‚ö†Ô∏è currentClan –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return;
        }
        
        try {
            const oldExp = this.currentClan.exp || 0;
            const newExp = oldExp + amount;
            const expNeeded = (this.currentClan.level || 1) * 100;
            
            console.log('üìä –û–ø—ã—Ç –∫–ª–∞–Ω–∞:');
            console.log('   - –ë—ã–ª–æ:', oldExp);
            console.log('   - –î–æ–±–∞–≤–ª—è–µ–º:', amount);
            console.log('   - –°—Ç–∞–Ω–µ—Ç:', newExp);
            console.log('   - –ù—É–∂–Ω–æ –¥–ª—è lvl up:', expNeeded);
            
            let newLevel = this.currentClan.level || 1;
            let finalExp = newExp;
            
            if (newExp >= expNeeded) {
                newLevel++;
                finalExp = 0;
                console.log(`üéâ –ö–ª–∞–Ω –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${newLevel}!`);
            }
            
            if (this.gameData.useFirebase) {
                console.log('‚òÅÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –∫–ª–∞–Ω–∞ –≤ Firebase...');
                await firebase.database().ref(`clans/${this.currentClan.id}`).update({
                    level: newLevel,
                    exp: finalExp
                });
                console.log('‚úÖ –û–ø—ã—Ç –∫–ª–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Firebase');
            } else {
                console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –∫–ª–∞–Ω–∞ –≤ localStorage...');
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                if (clans[this.currentClan.id]) {
                    clans[this.currentClan.id].level = newLevel;
                    clans[this.currentClan.id].exp = finalExp;
                    localStorage.setItem('clans', JSON.stringify(clans));
                    console.log('‚úÖ –û–ø—ã—Ç –∫–ª–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ localStorage');
                } else {
                    console.error('‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage!');
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            this.currentClan.level = newLevel;
            this.currentClan.exp = finalExp;
            
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ...');
            await this.loadUserClan();
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –∫–ª–∞–Ω—É:', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.clansSystem = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initClansSystem);
} else {
    initClansSystem();
}

function initClansSystem() {
    console.log('üè∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞–Ω–æ–≤...');
    // –ñ–¥—ë–º –ø–æ–∫–∞ gameData –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
    const interval = setInterval(() => {
        if (window.gameData) {
            console.log('‚úÖ gameData –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º ClansSystem');
            window.clansSystem = new ClansSystem(window.gameData);
            window.clansSystem.init();
            clearInterval(interval);
        }
    }, 100);
}

