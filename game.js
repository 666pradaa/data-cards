// –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
class SoundSystem {
    constructor() {
        this.masterVolume = 0.5; // –£–≤–µ–ª–∏—á–∏–ª —Å 0.3 –¥–æ 0.5
        
        // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º soundEnabled
        const storedSound = localStorage.getItem('soundEnabled');
        if (storedSound === null) {
            // –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ–Æ–ß–ï–ù–û
            this.soundEnabled = true;
            localStorage.setItem('soundEnabled', 'true');
            console.log('üîä –ó–≤—É–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        } else {
            this.soundEnabled = storedSound === 'true';
            console.log('üîä –ó–≤—É–∫–∏ –∏–∑ localStorage:', this.soundEnabled);
        }
        
        const storedMusic = localStorage.getItem('musicEnabled');
        if (storedMusic === null) {
            this.musicEnabled = true;
            localStorage.setItem('musicEnabled', 'true');
            console.log('üéµ –ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        } else {
            this.musicEnabled = storedMusic === 'true';
            console.log('üéµ –ú—É–∑—ã–∫–∞ –∏–∑ localStorage:', this.musicEnabled);
        }
        
        this.currentBgMusic = null;
        
        // –ü—É—Ç–∏ –∫ –∑–≤—É–∫–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
        this.soundPaths = {
            'whoosh': 'sounds/whoosh.mp3',
            'attack': 'sounds/attack.mp3',
            'critAttack': 'sounds/crit_attack.mp3',
            'death': 'sounds/death.mp3',
            'openCase': 'sounds/open_case.mp3',
            'victory': 'sounds/victory.mp3',
            'defeat': 'sounds/defeat.mp3',
            'upgrade': 'sounds/upgrade.mp3',
            'backgroundMusic': 'sounds/background_music.mp3',
            // –ó–≤—É–∫–∏ —Å–∫–∏–ª–ª–æ–≤
            'shadow_fiend_requiem': 'sounds/skills/shadow_fiend_requiem.mp3',
            'pudge_dismember': 'sounds/skills/pudge_dismember.mp3',
            'invoker_sunstrike': 'sounds/skills/invoker_sunstrike.mp3',
            'crystal_maiden_frostbite': 'sounds/skills/crystal_maiden_frostbite.mp3',
            'terrorblade_sunder': 'sounds/skills/terrorblade_sunder.mp3',
            'spirit_breaker_charge': 'sounds/skills/spirit_breaker_charge.mp3'
        };
        
        console.log('üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SoundSystem:');
        console.log('   - soundEnabled:', this.soundEnabled);
        console.log('   - musicEnabled:', this.musicEnabled);
        console.log('   - masterVolume:', this.masterVolume);
        console.log('   - –ü—É—Ç–µ–π –∫ –∑–≤—É–∫–∞–º:', Object.keys(this.soundPaths).length);
    }

    playSound(type, volume = 1) {
        console.log('üîä playSound –≤—ã–∑–≤–∞–Ω:', type, 'soundEnabled:', this.soundEnabled);
        
        if (!this.soundEnabled) {
            console.log('‚ùå –ó–≤—É–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
            return;
        }
        
        const soundPath = this.soundPaths[type];
        if (soundPath) {
            console.log('‚úÖ –ü—É—Ç—å –∫ –∑–≤—É–∫—É:', soundPath);
            try {
                const audio = new Audio(soundPath);
                audio.volume = this.masterVolume * volume;
                console.log('üéµ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –≥—Ä–æ–º–∫–æ—Å—Ç—å:', audio.volume);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
                audio.addEventListener('error', (e) => {
                    console.error('‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù:', soundPath);
                    console.error('   –û—à–∏–±–∫–∞:', e.target.error);
                    console.error('–ó–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', soundPath);
                });
                
                audio.play()
                    .then(() => console.log('‚úÖ –ó–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω:', type))
                    .catch((err) => {
                        console.error('‚ùå –ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω:', type, err.message);
                        console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', err.name);
                    });
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ:', type, e.message);
            }
        } else {
            console.error('‚ùå –ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ soundPaths:', type);
        }
    }

    startBackgroundMusic() {
        if (!this.musicEnabled) {
            console.log('‚ùå –ú—É–∑—ã–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (musicEnabled = false)');
            return;
        }
        
        // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç - –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        if (this.currentBgMusic && !this.currentBgMusic.paused) {
            console.log('‚úÖ –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, volume:', this.currentBgMusic.volume);
            return;
        }
        
        try {
            console.log('üéµ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É:', this.soundPaths['backgroundMusic']);
            this.currentBgMusic = new Audio(this.soundPaths['backgroundMusic']);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏!
            this.currentBgMusic.volume = 0.4; // 40%
            console.log('üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', this.currentBgMusic.volume, '(40%)');
            
            this.currentBgMusic.loop = true;
            console.log('üîÅ Loop –≤–∫–ª—é—á–µ–Ω');
            
            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏
            this.currentBgMusic.addEventListener('error', (e) => {
                console.warn('‚ö†Ô∏è –ú—É–∑—ã–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)');
            });
            
            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
            this.currentBgMusic.addEventListener('canplaythrough', () => {
                console.log('‚úÖ –ú—É–∑—ã–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, duration:', this.currentBgMusic.duration);
            }, { once: true });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            this.currentBgMusic.addEventListener('ended', () => {
                console.log('üîÅ –ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
                if (this.musicEnabled && this.currentBgMusic) {
                    this.currentBgMusic.currentTime = 0;
                    this.currentBgMusic.play().catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', err));
                }
            });
            
            this.currentBgMusic.play()
                .then(() => {
                    console.log('‚úÖ –ú—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
                    console.log('   - paused:', this.currentBgMusic.paused);
                    console.log('   - volume:', this.currentBgMusic.volume);
                    console.log('   - duration:', this.currentBgMusic.duration);
                    console.log('   - currentTime:', this.currentBgMusic.currentTime);
                    console.log('   - loop:', this.currentBgMusic.loop);
                })
                .catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏:', err.message);
                    console.error('   –ü—Ä–∏—á–∏–Ω–∞:', err.name);
                    if (err.name === 'NotAllowedError') {
                        console.log('‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç autoplay! –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏.');
                    }
                });
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ:', e.message);
        }
    }

    startBattleMusic() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º—É–∑—ã–∫—É —á—Ç–æ –∏ –≤ –º–µ–Ω—é - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä–∞—Ç—å
    }

    stopBackgroundMusic() {
        if (this.currentBgMusic) {
            this.currentBgMusic.pause();
            this.currentBgMusic = null;
        }
    }

    stopBattleMusic() {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –º—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å
    }

    toggleSound() {
        this.soundEnabled = !this.soundEnabled;
        localStorage.setItem('soundEnabled', this.soundEnabled);
        return this.soundEnabled;
    }

    toggleMusic() {
        this.musicEnabled = !this.musicEnabled;
        localStorage.setItem('musicEnabled', this.musicEnabled);
        
        if (this.musicEnabled) {
            this.startBackgroundMusic();
        } else {
            this.stopBackgroundMusic();
        }
        
        return this.musicEnabled;
    }
}

// –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
class GameData {
    constructor() {
        this.currentUser = null;
        this.currentUserData = null;
        this.allUsersCache = {}; // –ö–µ—à –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        this.useFirebase = typeof firebase !== 'undefined' && typeof firebaseAdapter !== 'undefined';
        
        // –°–æ–∑–¥–∞—ë–º —É–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.users = this.createUsersProxy();
        
        this.currentTheme = localStorage.getItem('dotaCardsTheme') || 'dark';
        this.soundSystem = new SoundSystem();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–æ–ª–æ–¥—ã
        this.deckRarityFilter = 'all';
        this.deckStarsFilter = 'all';
        
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É)
        this.avatars = [
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/pudge.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/invoker.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png'
        ];
        
        // üîÆ –°–∏—Å—Ç–µ–º–∞ —Ä—É–Ω
        this.runes = {
            invisibility: {
                name: '–†—É–Ω–∞ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏',
                description: '–í—Ä–∞–∂–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É',
                icon: 'images/runes/invisibility.webp',
                type: 'invisibility'
            },
            shield: {
                name: '–†—É–Ω–∞ —â–∏—Ç–∞',
                description: '–í—Ä–∞–∂–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç -40% –∫ –∞—Ç–∞–∫–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É',
                icon: 'images/runes/shield.webp',
                type: 'shield'
            },
            water: {
                name: '–†—É–Ω–∞ –≤–æ–¥—ã',
                description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 20% –∑–¥–æ—Ä–æ–≤—å—è —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ',
                icon: 'images/runes/water.webp',
                type: 'water'
            }
        };
        
        console.log('üéÆ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', this.useFirebase ? '‚òÅÔ∏è Firebase' : 'üíæ localStorage');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π battleState –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
        this.checkAndCleanOldBattle();
        
        this.initData();
        this.initUI();
    }

    createUsersProxy() {
        if (!this.useFirebase) {
            // –û–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è localStorage
            return JSON.parse(localStorage.getItem('dotaCardsUsers') || '{}');
        }
        
        // –ü—Ä–æ–∫—Å–∏ –¥–ª—è Firebase - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ this.users[this.currentUser]
        return new Proxy({}, {
            get: (target, prop) => {
                if (prop === this.currentUser) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return this.currentUserData;
                }
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞
                return this.allUsersCache[prop];
            },
            set: (target, prop, value) => {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                if (prop === this.currentUser && this.useFirebase) {
                    this.currentUserData = value;
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ saveUser()
                }
                return true;
            }
        });
    }

    initData() {
        // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–æ–±—â–∞—è —Å–∏–ª–∞ ~100-120 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, +20-30 –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—å)
        this.cards = {
            // –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~110-130)
            'Shadow Shaman': {
                name: 'Shadow Shaman',
                rarity: 'common',
                damage: 32,
                health: 85,
                defense: 18,
                speed: 18,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_shaman.png'
            },
            'Chen': {
                name: 'Chen',
                rarity: 'common',
                damage: 28,
                health: 95,
                defense: 22,
                speed: 16,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/chen.png'
            },
            'Lycan': {
                name: 'Lycan',
                rarity: 'common',
                damage: 38,
                health: 75,
                defense: 12,
                speed: 26,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/lycan.png'
            },
            // –†–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~140-160)
            'Lion': {
                name: 'Lion',
                rarity: 'rare',
                damage: 42,
                health: 90,
                defense: 20,
                speed: 23,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png'
            },
            'Sven': {
                name: 'Sven',
                rarity: 'rare',
                damage: 48,
                health: 105,
                defense: 18,
                speed: 19,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/sven.png'
            },
            'Queen Of Pain': {
                name: 'Queen Of Pain',
                rarity: 'rare',
                damage: 45,
                health: 82,
                defense: 14,
                speed: 31,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png'
            },
            // –≠–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~170-190) —Å–æ —Å–∫–∏–ª–ª–∞–º–∏
            'Terrorblade': {
                name: 'Terrorblade',
                rarity: 'epic',
                damage: 58,
                health: 115,
                defense: 22,
                speed: 21,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/terrorblade.png',
                skill: {
                    name: 'Sunder',
                    icon: 'images/skills/terrorblade_sunder.webp',
                    description: '–ú–µ–Ω—è–µ—Ç—Å—è HP —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π',
                    cooldown: 2
                }
            },
            'Crystal Maiden': {
                name: 'Crystal Maiden',
                rarity: 'epic',
                damage: 52,
                health: 105,
                defense: 26,
                speed: 19,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png',
                skill: {
                    name: 'Frostbite',
                    icon: 'images/skills/crystal_maiden_frostbite.webp',
                    description: '–ó–∞–º–æ—Ä–æ–∑–∫–∞: –∫–∞—Ä—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥',
                    cooldown: 2
                }
            },
            'Spirit Breaker': {
                name: 'Spirit Breaker',
                rarity: 'epic',
                damage: 62,
                health: 125,
                defense: 17,
                speed: 17,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/spirit_breaker.png',
                skill: {
                    name: 'Charge of Darkness',
                    icon: 'images/skills/spirit_breaker_charge.webp',
                    description: '+20 —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ —Ä–∞—É–Ω–¥, –º–æ–∂–Ω–æ —É–¥–∞—Ä–∏—Ç—å –ª—é–±—É—é –∫–∞—Ä—Ç—É',
                    cooldown: 2
                }
            },
            // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~200-230) —Å –º–æ—â–Ω—ã–º–∏ —Å–∫–∏–ª–ª–∞–º–∏
            'Shadow Fiend': {
                name: 'Shadow Fiend',
                rarity: 'legendary',
                damage: 78,
                health: 135,
                defense: 24,
                speed: 27,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png',
                skill: {
                    name: '–†–µ–∫–≤–∏–µ–º –¥—É—à',
                    icon: 'images/skills/shadow_fiend_requiem.webp',
                    description: '50 —É—Ä–æ–Ω–∞ –∫–∞—Ä—Ç–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤, 20 –æ—Å—Ç–∞–ª—å–Ω—ã–º. –í—Å–µ –≤ —Å—Ç—Ä–∞—Ö–µ (–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞)',
                    cooldown: 2
                }
            },
            'Pudge': {
                name: 'Pudge',
                rarity: 'legendary',
                damage: 68,
                health: 165,
                defense: 32,
                speed: 13,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/pudge.png',
                skill: {
                    name: 'Dismember',
                    icon: 'images/skills/pudge_dismember.png',
                    description: '–°–Ω–∏–º–∞–µ—Ç 50 HP –≤—Ä–∞–≥–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 25 HP',
                    cooldown: 2
                }
            },
            'Invoker': {
                name: 'Invoker',
                rarity: 'legendary',
                damage: 72,
                health: 125,
                defense: 20,
                speed: 33,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/invoker.png',
                skill: {
                    name: 'Sun Strike',
                    icon: 'images/skills/invoker_sun_strike.png',
                    description: '100 —É—Ä–æ–Ω–∞ + Cold Snap (–ø—Ä–æ–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞)',
                    cooldown: 2
                }
            }
        };

        // –£–ª—É—á—à–µ–Ω–∏—è
        this.upgrades = {
            'Moon Shard': { name: 'Moon Shard', effect: 'speed', value: 20, description: '+20 —Å–∫–æ—Ä–æ—Å—Ç–∏' },
            'Divine Rapier': { name: 'Divine Rapier', effect: 'damage', value: 50, description: '+50 —É—Ä–æ–Ω–∞' },
            'Heart of Tarrasque': { name: 'Heart of Tarrasque', effect: 'health', value: 100, description: '+100 –∑–¥–æ—Ä–æ–≤—å—è' },
            'Black King Bar': { name: 'Black King Bar', effect: 'defense', value: 20, description: '+20% –∑–∞—â–∏—Ç—ã' }
        };

        // –ö–µ–π—Å—ã
        this.cases = {
            normal: { name: '–û–±—ã—á–Ω—ã–π –∫–µ–π—Å', cost: 100, currency: 'gold', rewards: {} },
            mega: { name: '–ú–µ–≥–∞ –±–æ–∫—Å', cost: 10, currency: 'gems', rewards: {} },
            upgrades: { name: '–£–ª—É—á—à–µ–Ω–∏—è', cost: 250, currency: 'gold', rewards: { upgrades: 1 } }
        };
    }

    async initUI() {
        console.log('üîß initUI() –≤—ã–∑–≤–∞–Ω - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
        this.applyTheme();
        this.checkEmojiSupport();
        await this.setupEventListeners();
        await this.checkAuth();
    }
    
    checkEmojiSupport() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–º–æ–¥–∑–∏
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) return;
        
        ctx.fillText('ü™ô', 0, 0);
        const emojiData = ctx.getImageData(0, 0, 1, 1).data;
        const emojiSupported = emojiData[0] !== 0 || emojiData[1] !== 0 || emojiData[2] !== 0;
        
        if (!emojiSupported) {
            console.log('‚ö†Ô∏è –≠–º–æ–¥–∑–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏
            document.querySelectorAll('.currency-fallback').forEach(fallback => {
                fallback.style.display = 'inline';
            });
            document.querySelectorAll('.currency-icon [aria-hidden="true"]').forEach(emoji => {
                emoji.style.display = 'none';
            });
        }
    }

    applyTheme() {
        document.body.classList.toggle('light-theme', this.currentTheme === 'light');
    }

    toggleTheme() {
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
        const transition = document.createElement('div');
        transition.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: ${this.currentTheme === 'dark' ? '#ffffff' : '#000000'};
            z-index: 999999;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s ease;
        `;
        document.body.appendChild(transition);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => transition.style.opacity = '1', 10);
        
        setTimeout(() => {
            // –ú–µ–Ω—è–µ–º —Ç–µ–º—É
            this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
            localStorage.setItem('dotaCardsTheme', this.currentTheme);
            this.applyTheme();
            this.updateThemeButton();
            this.soundSystem.playSound('whoosh');
            
            // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            setTimeout(() => transition.style.opacity = '0', 50);
            setTimeout(() => {
                if (document.body.contains(transition)) {
                    document.body.removeChild(transition);
                }
            }, 600);
        }, 300);
    }

    updateThemeButton() {
        const button = document.getElementById('theme-toggle');
        button.textContent = this.currentTheme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
    }

    toggleSound() {
        console.log('üîä toggleSound –≤—ã–∑–≤–∞–Ω');
        const enabled = this.soundSystem.toggleSound();
        console.log('üîä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ soundEnabled:', enabled);
        const button = document.getElementById('sound-toggle');
        button.textContent = enabled ? 'üîä' : 'üîá';
        if (enabled) {
            console.log('üîä –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫');
            this.soundSystem.playSound('whoosh');
        }
    }

    updateSoundButton() {
        const button = document.getElementById('sound-toggle');
        button.textContent = this.soundSystem.soundEnabled ? 'üîä' : 'üîá';
    }

    toggleMusic() {
        const enabled = this.soundSystem.toggleMusic();
        const button = document.getElementById('music-toggle');
        button.textContent = enabled ? 'üéµ' : 'üîá';
    }

    updateMusicButton() {
        const button = document.getElementById('music-toggle');
        if (button) {
            button.textContent = this.soundSystem.musicEnabled ? 'üéµ' : 'üîá';
        }
    }

    async setupEventListeners() {
        console.log('üîß setupEventListeners() –≤—ã–∑–≤–∞–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let musicStarted = false;
        document.addEventListener('click', () => {
            if (!musicStarted) {
                musicStarted = true;
                this.soundSystem.startBackgroundMusic();
                console.log('Background music started after user interaction');
            }
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º whoosh —Ç–æ–ª—å–∫–æ –∫ –∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-btn')) {
                this.soundSystem.playSound('whoosh', 0.5);
            }
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥—Ä—É–∑–µ–π
        document.querySelectorAll('.friends-nav-btn').forEach(btn => {
            btn.addEventListener('click', () => this.switchFriendsTab(btn.dataset.friendsTab));
        });

        // –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π
        document.getElementById('friend-search-btn').addEventListener('click', () => this.searchPlayers());
        document.getElementById('friend-search-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.searchPlayers();
        });

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');
        const logoutBtn = document.getElementById('logout-btn');
        
        if (loginBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newLoginBtn = loginBtn.cloneNode(true);
            loginBtn.parentNode.replaceChild(newLoginBtn, loginBtn);
            
            newLoginBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞!');
                
                // –í—ã–∑—ã–≤–∞–µ–º login
                try {
                    await this.login();
                } catch (error) {
                    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
                    await this.showAlert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ login-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (registerBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            registerBtn.addEventListener('click', async () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
                try {
                    await this.register();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
                    await this.showAlert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ register-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (logoutBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞');
            logoutBtn.addEventListener('click', async () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—Ö–æ–¥–∞');
                try {
                    await this.logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
                    await this.showAlert('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ logout-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const themeToggle = document.getElementById('theme-toggle');
        const soundToggle = document.getElementById('sound-toggle');
        const musicToggle = document.getElementById('music-toggle');
        const supportBtn = document.getElementById('support-btn');
        
        if (themeToggle) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ç–µ–º—ã –Ω–∞–π–¥–µ–Ω–∞');
            themeToggle.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ç–µ–º—ã');
                this.toggleTheme();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ theme-toggle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (soundToggle) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–∞');
            soundToggle.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–≤—É–∫–æ–≤');
                const enabled = this.soundSystem.toggleSound();
                soundToggle.textContent = enabled ? 'üîä' : 'üîá';
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ sound-toggle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (musicToggle) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –º—É–∑—ã–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');
            musicToggle.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –º—É–∑—ã–∫–∏');
                const enabled = this.soundSystem.toggleMusic();
                musicToggle.textContent = enabled ? 'üéµ' : 'üîá';
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ music-toggle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –°—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ support-btn —É–¥–∞–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è support-btn-floating (–ø–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞)
        console.log('‚ÑπÔ∏è –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ showMainMenu()');

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });

        // –ö–µ–π—Å—ã
        document.querySelectorAll('.buy-case').forEach(btn => {
            btn.addEventListener('click', (e) => this.buyCase(e.target.dataset.case));
        });
        
        document.querySelectorAll('.case-info-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.showCaseInfo(e.target.dataset.case));
        });
        
        document.getElementById('close-case-info-modal').addEventListener('click', () => this.closeCaseInfoModal());

        // –ë–æ–∏ (–ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–µ—Å—å, –±—É–¥–µ—Ç –≤ showMainMenu)
        console.log('‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –±–æ—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ showMainMenu()');
        
        const onlineBtn = document.getElementById('online-battle-btn');
        if (onlineBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è –Ω–∞–π–¥–µ–Ω–∞');
            onlineBtn.addEventListener('click', async () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–±–æ–π');
                console.log('window.onlineBattlesSystem:', window.onlineBattlesSystem);
                if (window.onlineBattlesSystem) {
                    window.onlineBattlesSystem.openOnlineBattleModal();
                } else {
                    await this.showAlert('–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', '‚ÑπÔ∏è', '–û–∂–∏–¥–∞–Ω–∏–µ');
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–∞—Ö
        setTimeout(() => {
            document.querySelectorAll('.mode-info-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    this.showBattleInfo(btn.dataset.info);
                });
            });
        }, 500);

        // –ü—Ä–æ–º–æ-–∫–æ–¥—ã
        const useCodeBtn = document.getElementById('use-code-btn');
        if (useCodeBtn) {
            useCodeBtn.addEventListener('click', () => this.usePromoCode());
        }
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        const closeSupportBtn = document.getElementById('close-support');
        if (closeSupportBtn) {
            console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
            closeSupportBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
                this.closeSupportPanel();
            });
        }
        
        const sendSupportBtn = document.getElementById('send-support-message');
        if (sendSupportBtn) {
            sendSupportBtn.addEventListener('click', () => this.sendSupportMessage());
        }
        
        // –ê–¥–º–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        const closeSupportAdminBtn = document.getElementById('close-support-admin');
        if (closeSupportAdminBtn) {
            closeSupportAdminBtn.addEventListener('click', () => this.closeSupportAdminPanel());
        }
        
        const sendSupportAdminBtn = document.getElementById('send-support-admin-message');
        if (sendSupportAdminBtn) {
            sendSupportAdminBtn.addEventListener('click', () => this.sendSupportAdminMessage());
        }

        // –î—É–±–ª–∏–∫–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω—ã - –æ–Ω–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ

        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        const closeAdminBtn = document.getElementById('close-admin');
        if (closeAdminBtn) {
            closeAdminBtn.addEventListener('click', () => this.closeAdminPanel());
        }
        const adminSearchBtn = document.getElementById('admin-search');
        if (adminSearchBtn) {
            adminSearchBtn.addEventListener('input', (e) => this.searchUsers(e.target.value));
        }

        // –ü—Ä–æ—Ñ–∏–ª—å
        document.getElementById('change-avatar-btn').addEventListener('click', () => this.openAvatarModal());
        document.getElementById('close-avatar-modal').addEventListener('click', () => this.closeAvatarModal());
        document.getElementById('close-edit-modal').addEventListener('click', () => this.closeEditModal());
        document.getElementById('save-edit-btn').addEventListener('click', () => this.saveEdit());
        document.getElementById('upload-avatar-btn').addEventListener('click', () => document.getElementById('avatar-file-input').click());
        document.getElementById('avatar-file-input').addEventListener('change', (e) => this.handleAvatarUpload(e));
        
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.openEditModal(e.target.dataset.field));
        });
    }

    async handleAvatarUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (!file.type.startsWith('image/')) {
            await this.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!', 'üñºÔ∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Data URL
        const reader = new FileReader();
        reader.onload = (e) => {
            const avatarUrl = e.target.result;
            this.selectAvatar(avatarUrl);
        };
        reader.readAsDataURL(file);
    }

    async generateUserId() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä (6 —Ü–∏—Ñ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        let id;
        const allUsers = await this.getAllUsers();
        do {
            id = Math.floor(100000 + Math.random() * 900000).toString();
        } while (Object.values(allUsers).some(u => u.userid === id || u.userId === id));
        return id;
    }

    generateRandomNickname() {
        const adjectives = [
            '–ú–æ–≥—É—á–∏–π', '–¢—ë–º–Ω—ã–π', '–°–≤–µ—Ç–ª—ã–π', '–ë—ã—Å—Ç—Ä—ã–π', '–ú—É–¥—Ä—ã–π', 
            '–•—Ä–∞–±—Ä—ã–π', '–î–∏–∫–∏–π', '–•–∏—Ç—Ä—ã–π', '–î—Ä–µ–≤–Ω–∏–π', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
            '–í–µ–ª–∏–∫–∏–π', '–ì—Ä–æ–∑–Ω—ã–π', '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π', '–í–µ—á–Ω—ã–π'
        ];
        const nouns = [
            '–í–æ–∏–Ω', '–ú–∞–≥', '–û—Ö–æ—Ç–Ω–∏–∫', '–°—Ç—Ä–∞–Ω–Ω–∏–∫', '–•—Ä–∞–Ω–∏—Ç–µ–ª—å',
            '–ì–µ—Ä–æ–π', '–õ—É—á–Ω–∏–∫', '–†—ã—Ü–∞—Ä—å', '–ê—Å—Å–∞—Å–∏–Ω', '–ß–µ–º–ø–∏–æ–Ω',
            '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å', '–ó–∞—â–∏—Ç–Ω–∏–∫', '–ó–∞–≤–æ–µ–≤–∞—Ç–µ–ª—å', '–ú—Å—Ç–∏—Ç–µ–ª—å', '–°—Ç—Ä–∞–∂'
        ];
        
        const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
        const noun = nouns[Math.floor(Math.random() * nouns.length)];
        const num = Math.floor(Math.random() * 999) + 1;
        
        return `${adj}${noun}${num}`;
    }

    async checkAuth() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (this.useFirebase && typeof firebaseAdapter !== 'undefined') {
            const currentFirebaseUser = firebaseAdapter.auth.currentUser;
            
            if (currentFirebaseUser) {
                console.log('‚úÖ Firebase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', currentFirebaseUser.uid);
                
                try {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
                    const userData = await firebaseAdapter.getUserData(currentFirebaseUser.uid);
                    
                    if (userData) {
                        this.currentUser = currentFirebaseUser.uid;
                        this.currentUserData = userData;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                        localStorage.setItem('dotaCardsCurrentUser', currentFirebaseUser.uid);
                        
                        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        firebaseAdapter.listenToUserData(currentFirebaseUser.uid, (data) => {
                            this.currentUserData = data;
                            this.updateUserInfo();
                        });
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        this.allUsersCache = await firebaseAdapter.getAllUsers();
                        
                        console.log('‚úÖ –ê–≤—Ç–æ–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Firebase —É—Å–ø–µ—à–µ–Ω');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–æ–π
                        const hasSavedBattle = this.loadBattleState();
                        
                        if (hasSavedBattle) {
                            console.log('‚öîÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –±–æ–π!');
                            // –ë–æ–π —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ loadBattleState()
                        } else {
                            console.log('üè† –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –±–æ—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é');
                            this.showMainMenu();
                        }
                        return;
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞ Firebase:', error);
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
        const currentUser = localStorage.getItem('dotaCardsCurrentUser');
        if (currentUser && this.users[currentUser]) {
            console.log('‚úÖ –ê–≤—Ç–æ–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ localStorage:', currentUser);
            this.currentUser = currentUser;
            this.currentUserData = this.users[currentUser];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–æ–π
            const hasSavedBattle = this.loadBattleState();
            
            if (hasSavedBattle) {
                console.log('‚öîÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –±–æ–π!');
                // –ë–æ–π —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ loadBattleState()
            } else {
                console.log('üè† –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –±–æ—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é');
                this.showMainMenu();
            }
        } else {
            console.log('‚ùå –ê–≤—Ç–æ–≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞');
            this.showAuthScreen();
        }
    }

    showCompetitionHint() {
        const user = this.getUser();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ "–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ"
        if (!user || user.hideCompetitionHint) {
            console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–Ω–∫—É—Ä—Å–µ');
            return;
        }
        
        console.log('üéÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–Ω–∫—É—Ä—Å–µ');
        
        const overlay = document.createElement('div');
        overlay.className = 'custom-modal-overlay';
        overlay.style.display = 'flex';
        
        const modal = document.createElement('div');
        modal.className = 'custom-modal competition-hint-modal';
        modal.innerHTML = `
            <div class="modal-icon" style="font-size: 4rem; margin-bottom: 1rem;">üèÜ</div>
            <h2 style="margin: 0 0 1rem 0; font-size: 1.8rem;">–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∫–æ–Ω–∫—É—Ä—Å!</h2>
            <p style="margin: 0 0 1.5rem 0; font-size: 1.1rem; line-height: 1.6; opacity: 0.9;">
                –°–∫–æ—Ä–µ–µ –∑–∞–≥–ª—è–Ω–∏ –≤ <strong style="color: #FFD700;">—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤</strong>! 
                –í–µ–¥—å —Ç–∞–º –ø—Ä–æ—Ö–æ–¥–∏—Ç <strong style="color: #FFD700;">–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å</strong>!
            </p>
            <p style="margin: 0 0 1.5rem 0; opacity: 0.8;">
                –ò–≥—Ä–æ–∫ –Ω–∞ 1-–º –º–µ—Å—Ç–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 13:00 –ú–°–ö –ø–æ–ª—É—á–∏—Ç 
                <strong style="color: #FFD700;">DOTA PLUS –Ω–∞ –º–µ—Å—è—Ü</strong>! üéÅ
            </p>
            <div class="modal-buttons" style="display: flex; gap: 1rem; justify-content: center;">
                <button id="competition-hint-close" class="btn secondary">–ó–∞–∫—Ä—ã—Ç—å</button>
                <button id="competition-hint-hide" class="btn primary">–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å</button>
            </div>
        `;
        
        overlay.appendChild(modal);
        document.body.appendChild(overlay);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            overlay.style.opacity = '1';
            modal.style.transform = 'scale(1)';
        }, 10);
        
        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        document.getElementById('competition-hint-close').onclick = () => {
            console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–æ–Ω–∫—É—Ä—Å–µ –∑–∞–∫—Ä—ã—Ç–∞');
            overlay.style.opacity = '0';
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            }, 300);
        };
        
        // –ö–Ω–æ–ø–∫–∞ "–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å"
        document.getElementById('competition-hint-hide').onclick = async () => {
            console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–æ–Ω–∫—É—Ä—Å–µ —Å–∫—Ä—ã—Ç–∞ –Ω–∞–≤—Å–µ–≥–¥–∞');
            await this.saveUser({ hideCompetitionHint: true });
            overlay.style.opacity = '0';
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            }, 300);
        };
    }
    
    showAuthScreen() {
        console.log('üîê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        const authScreen = document.getElementById('auth-screen');
        const mainMenu = document.getElementById('main-menu');
        const battleScreen = document.getElementById('battle-screen');
        const adminPanel = document.getElementById('admin-panel');
        
        authScreen.classList.add('active');
        mainMenu.classList.remove('active');
        battleScreen.classList.remove('active');
        adminPanel.classList.remove('active');
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ auth-screen –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        authScreen.style.zIndex = '10000';
        mainMenu.style.zIndex = '1';
        battleScreen.style.zIndex = '1';
        adminPanel.style.zIndex = '1';
        
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–µ–Ω');
    }

    showMainMenu() {
        
        // –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–æ–π –ø—Ä–∏ –≤—Ö–æ–¥–µ/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–æ–π —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª
        const battleState = localStorage.getItem('currentBattle');
        if (battleState) {
            console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π battleState –ø—Ä–∏ –≤—Ö–æ–¥–µ');
            localStorage.removeItem('currentBattle');
            localStorage.removeItem('battleStateTimestamp');
        }
        
        const authScreen = document.getElementById('auth-screen');
        const mainMenu = document.getElementById('main-menu');
        const battleScreen = document.getElementById('battle-screen');
        const adminPanel = document.getElementById('admin-panel');
        
        console.log('üì± –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
            authScreen: !!authScreen,
            mainMenu: !!mainMenu,
            battleScreen: !!battleScreen,
            adminPanel: !!adminPanel
        });
        
        if (!mainMenu) {
            console.error('‚ùå main-menu –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        authScreen?.classList.remove('active');
        battleScreen?.classList.remove('active');
        adminPanel?.classList.remove('active');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        mainMenu.classList.add('active');
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ main-menu –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        if (authScreen) {
            authScreen.style.display = 'none';
            authScreen.style.zIndex = '1';
        }
        mainMenu.style.display = 'block';
        mainMenu.style.zIndex = '10';
        if (battleScreen) battleScreen.style.zIndex = '1';
        if (adminPanel) adminPanel.style.zIndex = '1';
        
        console.log('‚úÖ‚úÖ‚úÖ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–ö–¢–ò–í–ù–û –ò –í–ò–î–ò–ú–û ‚úÖ‚úÖ‚úÖ');
        console.log('   authScreen display:', authScreen?.style.display);
        console.log('   mainMenu display:', mainMenu.style.display);
        console.log('   mainMenu z-index:', mainMenu.style.zIndex);
        
        this.updateUserInfo();
        this.updateThemeButton();
        this.updateSoundButton();
        this.updateMusicButton();
        this.loadCards();
        this.loadUpgrades();
        this.loadDeck();
        this.loadProfile();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞
        const user = this.getUser();
        
        if (user && user.isAdmin) {
            this.createAdminButton();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if (user && user.isSupportAdmin) {
            this.createSupportAdminButton();
        }
        
        // –ü–ï–†–ï–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –ö–ù–û–ü–ö–ò (–ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞)
        
        // ===== –í–°–ï –ö–ù–û–ü–ö–ò –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–¢–°–Ø –ù–ï–ó–ê–í–ò–°–ò–ú–û =====
        
        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞');
            logoutBtn.onclick = async () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—Ö–æ–¥–∞');
                try {
                    await this.logout();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
                    await this.showAlert('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
                }
            };
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const supportBtnFloating = document.getElementById('support-btn-floating');
        if (supportBtnFloating) {
            console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
            supportBtnFloating.onclick = () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
                this.openSupportPanel();
            };
        } else {
            console.error('‚ùå –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ö–Ω–æ–ø–∫–∞ –±–æ—è —Å –±–æ—Ç–æ–º
        const botBattleBtn = document.getElementById('bot-battle-btn');
        if (botBattleBtn) {
            console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ—è —Å –±–æ—Ç–æ–º');
            botBattleBtn.onclick = async () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –±–æ—è —Å –±–æ—Ç–æ–º');
                try {
                    await this.startBotBattle();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—è:', error);
                    await this.showAlert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—è: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
                }
            };
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –±–æ—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
        if (user && !user.tutorialCompleted) {
            console.log('üéì –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
            setTimeout(() => this.startTutorial(), 500);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–Ω–∫—É—Ä—Å–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ)
            // –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
            setTimeout(() => {
                this.showCompetitionHint();
            }, 1000);
        }
    }
    

    async loadProfile() {
        const user = this.getUser();
        if (!user) return;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!user.nickname) {
            user.nickname = this.generateRandomNickname();
            await this.saveUser({ nickname: user.nickname });
        }
        if (!user.userId && !user.userid) {
            user.userid = await this.generateUserId();
            await this.saveUser({ userid: user.userid });
        }
        if (!user.avatar) {
            user.avatar = this.avatars[0];
            await this.saveUser({ avatar: user.avatar });
        }
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
        const profileTitle = document.querySelector('.profile-header h2');
        if (profileTitle) {
            profileTitle.style.display = 'none';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        document.getElementById('user-avatar').src = user.avatar;
        document.getElementById('display-nickname').textContent = user.nickname || '–ò–≥—Ä–æ–∫';
        document.getElementById('display-userid').textContent = user.userid || user.userId || 'ID';
        document.getElementById('profile-level').textContent = user.level;
        document.getElementById('profile-gold').textContent = user.gold;
        document.getElementById('profile-gems').textContent = user.gems;
        
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        const cardCount = Object.keys(user.cards || {}).length;
        document.getElementById('profile-cards').textContent = cardCount;
    }

    openAvatarModal() {
        const modal = document.getElementById('avatar-modal');
        const grid = document.getElementById('avatar-grid');
        grid.innerHTML = '';
        
        this.avatars.forEach(avatarUrl => {
            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'avatar-option';
            avatarDiv.innerHTML = `<img src="${avatarUrl}" alt="Avatar">`;
            avatarDiv.addEventListener('click', () => this.selectAvatar(avatarUrl));
            grid.appendChild(avatarDiv);
        });
        
        modal.classList.add('active');
    }

    closeAvatarModal() {
        document.getElementById('avatar-modal').classList.remove('active');
    }

    async selectAvatar(avatarUrl) {
        await this.saveUser({ avatar: avatarUrl });
        this.loadProfile();
        this.closeAvatarModal();
    }

    openEditModal(field) {
        this.editingField = field;
        const modal = document.getElementById('edit-modal');
        const title = document.getElementById('edit-modal-title');
        const input = document.getElementById('edit-field-input');
        const user = this.getUser();
        
        if (field === 'nickname') {
            title.textContent = '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º';
            input.value = user.nickname || '';
            input.placeholder = user.nickname || '–ù–∏–∫–Ω–µ–π–º';
        } else if (field === 'userid') {
            title.textContent = '–ò–∑–º–µ–Ω–∏—Ç—å ID';
            const currentId = user.userid || user.userId || '';
            input.value = currentId;
            input.placeholder = currentId || 'ID';
            console.log('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID:', currentId);
        }
        
        modal.classList.add('active');
    }

    closeEditModal() {
        document.getElementById('edit-modal').classList.remove('active');
    }

    async saveEdit() {
        const user = this.getUser();
        const input = document.getElementById('edit-field-input');
        const value = input.value.trim();
        
        if (!value) {
            await this.showAlert('–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        const updates = {};
        
        if (this.editingField === 'nickname') {
            updates.nickname = value;
        } else if (this.editingField === 'userid') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if (!/^\d+$/.test(value)) {
                await this.showAlert('ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
                return;
            }
            
            if (value.length < 3 || value.length > 9) {
                await this.showAlert('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 9 —Ü–∏—Ñ—Ä!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            const allUsers = await this.getAllUsers();
            const idExists = Object.values(allUsers).some(u => {
                if (this.useFirebase) {
                    return u.userid === value && Object.keys(allUsers).find(k => allUsers[k] === u) !== this.currentUser;
                } else {
                    return u !== user && u.userid === value;
                }
            });
            
            if (idExists) {
                await this.showAlert('–≠—Ç–æ—Ç ID —É–∂–µ –∑–∞–Ω—è—Ç!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
                return;
            }
            
            updates.userid = value;
        }
        
        await this.saveUser(updates);
        this.loadProfile();
        this.closeEditModal();
    }

    showCaseInfo(caseType) {
        const modal = document.getElementById('case-info-modal');
        const content = document.getElementById('case-info-content');
        const title = document.getElementById('case-info-title');
        
        let infoHtml = '';
        
        if (caseType === 'normal') {
            title.textContent = '–û–±—ã—á–Ω—ã–π –∫–µ–π—Å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å: 100 ü™ô</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç:</h4>
                    <div class="chance-item">
                        <span class="rarity-label rarity-common">–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">50%</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-rare">–†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">50%</span>
                    </div>
                    <div class="info-note">
                        ‚ÑπÔ∏è –ü–µ—Ä–≤—ã–µ 3 –∫–µ–π—Å–∞ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤<br>
                        üí∞ –î—É–±–ª–∏–∫–∞—Ç = –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    </div>
                </div>
            `;
        } else if (caseType === 'mega') {
            title.textContent = '–ú–µ–≥–∞ –±–æ–∫—Å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å: 10 üíé</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç:</h4>
                    <div class="chance-item">
                        <span class="rarity-label rarity-legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">15%</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-epic">–≠–ø–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">30%</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-rare">–†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">55%</span>
                    </div>
                    <div class="info-note">
                        ‚≠ê –¢–æ–ª—å–∫–æ —Ä–µ–¥–∫–∏–µ –∏ –≤—ã—à–µ<br>
                        üí∞ –î—É–±–ª–∏–∫–∞—Ç = –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (5 –≥–µ–º–æ–≤)
                    </div>
                </div>
            `;
        } else if (caseType === 'upgrades') {
            title.textContent = '–ö–µ–π—Å —É–ª—É—á—à–µ–Ω–∏–π - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å: 250 ü™ô</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:</h4>
                    <div class="chance-item">
                        <span class="rarity-label">–°–ª—É—á–∞–π–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ</span>
                        <span class="chance-value">60%</span>
                    </div>
                    <div class="chance-item chance-bad">
                        <span class="rarity-label">–ù–∏—á–µ–≥–æ</span>
                        <span class="chance-value">40%</span>
                    </div>
                    <div class="info-divider"></div>
                    <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:</h4>
                    <div class="upgrade-list-info">
                        <div>üåô Moon Shard (+20 —Å–∫–æ—Ä–æ—Å—Ç–∏)</div>
                        <div>‚öîÔ∏è Divine Rapier (+50 —É—Ä–æ–Ω–∞)</div>
                        <div>‚ù§Ô∏è Heart of Tarrasque (+100 –∑–¥–æ—Ä–æ–≤—å—è)</div>
                        <div>üõ°Ô∏è Black King Bar (+20% –∑–∞—â–∏—Ç—ã)</div>
                    </div>
                </div>
            `;
        }
        
        content.innerHTML = infoHtml;
        modal.classList.add('active');
    }

    closeCaseInfoModal() {
        document.getElementById('case-info-modal').classList.remove('active');
    }

    async login() {
        console.log('üîë login() —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞');
        
        const loginBtn = document.getElementById('login-btn');
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;


        if (!username || !password) {
            await this.showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            console.log('‚ö†Ô∏è –ü–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        if (loginBtn) {
            loginBtn.disabled = true;
            loginBtn.textContent = '–í—Ö–æ–¥...';
        }

        if (this.useFirebase) {
            // Firebase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            const result = await firebaseAdapter.login(username, password);
            
            if (result.success) {
                this.currentUser = result.userId;
                this.currentUserData = result.userData;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ localStorage –¥–ª—è –∞–≤—Ç–æ–≤—Ö–æ–¥–∞
                localStorage.setItem('dotaCardsCurrentUser', result.userId);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                firebaseAdapter.listenToUserData(result.userId, (data) => {
                    this.currentUserData = data;
                    this.updateUserInfo();
                });
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
                this.allUsersCache = await firebaseAdapter.getAllUsers();
                
                this.showMainMenu();
            } else {
                await this.showAlert(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '‚ùå', '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
            }
        } else {
            // localStorage –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
            if (this.users[username] && this.users[username].password === password) {
                this.currentUser = username;
                this.currentUserData = this.users[username];
                localStorage.setItem('dotaCardsCurrentUser', username);
                this.showMainMenu();
            } else {
                await this.showAlert('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '‚ùå', '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
            }
        }
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
        if (loginBtn && !this.currentUser) {
            loginBtn.disabled = false;
            loginBtn.textContent = '–í–æ–π—Ç–∏';
            console.log('üîì –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }

    async register() {
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        const registerBtn = document.getElementById('register-btn');

        if (!username || !password) {
            await this.showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }

        if (password.length < 6) {
            await this.showAlert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        registerBtn.disabled = true;
        registerBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...';
        
        try {
            if (this.useFirebase) {
                // Firebase —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                const result = await firebaseAdapter.register(username, password);
            
            if (result.success) {
                this.currentUser = result.userId;
                this.currentUserData = result.userData;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const randomNickname = this.generateRandomNickname();
                const userid = await this.generateUserId();
                await firebaseAdapter.updateUserData(result.userId, {
                    username: username,
                    gold: 300,
                    gems: 5,
                    nickname: randomNickname,
                    userid: userid,
                    avatar: this.avatars[0],
                    clanInvites: [],
                    tutorialCompleted: false
                });
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                this.currentUserData = await firebaseAdapter.getUserData(result.userId);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                firebaseAdapter.listenToUserData(result.userId, (data) => {
                    this.currentUserData = data;
                    this.updateUserInfo();
                });
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                this.allUsersCache = await firebaseAdapter.getAllUsers();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ localStorage –¥–ª—è –∞–≤—Ç–æ–≤—Ö–æ–¥–∞
                localStorage.setItem('dotaCardsCurrentUser', result.userId);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                this.showMainMenu();
            } else {
                await this.showAlert(result.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '‚ùå', '–û—à–∏–±–∫–∞');
                return;
            }
        } else {
            // localStorage —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
        if (this.users[username]) {
            await this.showAlert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }

        const userid = await this.generateUserId();
        const randomNickname = this.generateRandomNickname();

        this.users[username] = {
            username: username,
            password: password,
            gold: 300,
            gems: 5,
            level: 1,
            experience: 0,
            cards: {},
            upgrades: {},
            usedCodes: [],
            casesOpened: 0,
            normalCasesOpened: 0,
            deck: [],
            isAdmin: false,
            nickname: randomNickname,
            userid: userid,
            avatar: this.avatars[0],
            friends: [],
            friendRequests: { incoming: [], outgoing: [] },
            clanInvites: [],
            tutorialCompleted: false
        };

        localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        this.currentUser = username;
        this.currentUserData = this.users[username];
        localStorage.setItem('dotaCardsCurrentUser', username);
        
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ localStorage:', username);
        console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        this.showMainMenu();
        }
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            registerBtn.disabled = false;
            registerBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
        }
    }

    async logout() {
        if (this.useFirebase) {
            // Firebase –≤—ã—Ö–æ–¥
            if (this.currentUser) {
                firebaseAdapter.unlistenToUserData(this.currentUser);
            }
            await firebaseAdapter.logout();
        }
        
        // –û—á–∏—â–∞–µ–º localStorage –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        localStorage.removeItem('dotaCardsCurrentUser');
        
        this.currentUser = null;
        this.currentUserData = null;
        this.allUsersCache = {};
        
        console.log('üîê –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const mainMenu = document.getElementById('main-menu');
        if (mainMenu) {
            mainMenu.classList.remove('active');
            mainMenu.style.display = 'none';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authScreen = document.getElementById('auth-screen');
        if (authScreen) {
            authScreen.classList.add('active');
            authScreen.style.display = 'flex';
            authScreen.style.zIndex = '10000';
        }
        
        console.log('‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    // ========== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ==========

    getUser() {
        // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = null;
        
        if (this.useFirebase) {
            user = this.currentUserData;
        } else {
            user = this.users[this.currentUser];
        }
        
        return user;
    }

    async saveUser(updates) {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.useFirebase) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
            this.applyUpdatesToCurrentUser(updates);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            await firebaseAdapter.updateUserData(this.currentUser, updates);
            // currentUserData –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ listener —Å —Å–µ—Ä–≤–µ—Ä–∞
        } else {
            // localStorage
            Object.assign(this.users[this.currentUser], updates);
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
            this.currentUserData = this.users[this.currentUser];
        }
    }
    
    applyUpdatesToCurrentUser(updates) {
        // –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ currentUserData —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        for (const [key, value] of Object.entries(updates)) {
            if (key.includes('/')) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π —Ç–∏–ø–∞ "cards/Pudge/count"
                const parts = key.split('/');
                let obj = this.currentUserData;
                for (let i = 0; i < parts.length - 1; i++) {
                    if (!obj[parts[i]]) obj[parts[i]] = {};
                    obj = obj[parts[i]];
                }
                obj[parts[parts.length - 1]] = value;
            } else {
                this.currentUserData[key] = value;
            }
        }
    }
    
    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
    saveUserSync(updates) {
        if (this.useFirebase) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É
            this.applyUpdatesToCurrentUser(updates);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ
            firebaseAdapter.updateUserData(this.currentUser, updates).catch(err => {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
            });
        } else {
            Object.assign(this.users[this.currentUser], updates);
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
    }

    async getUserById(userId) {
        // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        // –ó–∞—â–∏—Ç–∞: –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        const currentUser = this.getUser();
        if (!currentUser || (!currentUser.isAdmin && !currentUser.isSupportAdmin)) {
            // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
            if (this.currentUser !== userId) {
                return null;
            }
        }
        
        if (this.useFirebase) {
            return this.allUsersCache[userId] || await firebaseAdapter.getUserData(userId);
        } else {
            return this.users[userId];
        }
    }

    async getAllUsers() {
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // –ó–∞—â–∏—Ç–∞: –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        const currentUser = this.getUser();
        if (!currentUser || (!currentUser.isAdmin && !currentUser.isSupportAdmin)) {
            return {};
        }
        
        if (this.useFirebase) {
            if (Object.keys(this.allUsersCache).length === 0) {
                this.allUsersCache = await firebaseAdapter.getAllUsers();
            }
            return this.allUsersCache;
        } else {
            return this.users;
        }
    }

    async usePromoCode() {
        const code = document.getElementById('promo-code').value.trim().toUpperCase();
        if (!code) return;

        const user = this.getUser();
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ usedCodes)
        if (code === 'POD777') {
            const updates = {
                isSupportAdmin: true
            };
            await this.saveUser(updates);
            this.createSupportAdminButton();
            await this.showAlert('–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø–æ–ª—É—á–µ–Ω!', '‚úÖ', '–£—Å–ø–µ—Ö');
            document.getElementById('promo-code').value = '';
            return;
        }
        
        if (user.usedCodes && user.usedCodes.includes(code)) {
            await this.showAlert('–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω', '‚ö†Ô∏è', '–í–Ω–∏–º–∞–Ω–∏–µ');
            return;
        }

        const updates = {
            usedCodes: [...(user.usedCodes || []), code]
        };

        if (code === 'FREE50') {
            updates.gold = (user.gold || 0) + 50;
            updates.gems = (user.gems || 0) + 5;
            await this.showAlert('–ü–æ–ª—É—á–µ–Ω–æ:\n50 –∑–æ–ª–æ—Ç–∞ ü™ô\n5 –≥–µ–º–æ–≤ üíé', 'üéÅ', '–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } else if (code === 'AHMED228') {
            updates.isAdmin = true;
            this.createAdminButton();
            await this.showAlert('–ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω!', '‚öôÔ∏è', '–£—Å–ø–µ—Ö');
        } else {
            await this.showAlert('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }

        await this.saveUser(updates);
        this.updateUserInfo();
        document.getElementById('promo-code').value = '';
    }

    createAdminButton() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isAdmin) {
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldBtn = document.getElementById('admin-btn');
        if (oldBtn) oldBtn.remove();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const adminBtn = document.createElement('button');
        adminBtn.id = 'admin-btn';
        adminBtn.className = 'btn small admin-btn';
        adminBtn.textContent = '‚öôÔ∏è –ê–¥–º–∏–Ω';
        adminBtn.addEventListener('click', () => this.showAdminPanel());
        
        const userInfo = document.querySelector('.user-info');
        userInfo.insertBefore(adminBtn, document.getElementById('logout-btn'));
    }
    
    createSupportAdminButton() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isSupportAdmin) {
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldBtn = document.getElementById('support-admin-btn');
        if (oldBtn) oldBtn.remove();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const supportAdminBtn = document.createElement('button');
        supportAdminBtn.id = 'support-admin-btn';
        supportAdminBtn.className = 'btn small support-admin-btn';
        supportAdminBtn.textContent = 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞';
        supportAdminBtn.title = '–ê–¥–º–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞';
        supportAdminBtn.addEventListener('click', () => this.showSupportAdminPanel());
        
        const userInfo = document.querySelector('.user-info');
        userInfo.insertBefore(supportAdminBtn, document.getElementById('logout-btn'));
    }

    async showAdminPanel() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
        const user = this.getUser();
        
        if (!user) {
            await this.showAlert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        if (!user.isAdmin) {
            await this.showAlert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', 'üîí', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
            return;
        }
        
        const panel = document.getElementById('admin-panel');
        
        if (!panel) {
            return;
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –°–†–ê–ó–£ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        const mainMenu = document.getElementById('main-menu');
        if (mainMenu) {
            mainMenu.classList.remove('active');
            mainMenu.style.display = 'none';
        }
        
        panel.classList.add('active');
        panel.style.display = 'flex';
        panel.style.visibility = 'visible';
        panel.style.opacity = '1';
        
        console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞');
        
        this.loadUsersList();
    }

    closeAdminPanel() {
        console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
        
        const panel = document.getElementById('admin-panel');
        const mainMenu = document.getElementById('main-menu');
        
        if (panel) {
            panel.classList.remove('active');
            panel.style.display = 'none';
        }
        
        if (mainMenu) {
            mainMenu.classList.add('active');
            mainMenu.style.display = 'block';
        }
        
        console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é');
    }
    
    // ===== –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò =====
    
    openSupportPanel() {
        console.log('üí¨üí¨üí¨ –û–¢–ö–†–´–í–ê–ï–ú –ü–ê–ù–ï–õ–¨ –ü–û–î–î–ï–†–ñ–ö–ò üí¨üí¨üí¨');
        
        const supportPanel = document.getElementById('support-panel');
        const mainMenu = document.getElementById('main-menu');
        
        console.log('   supportPanel –Ω–∞–π–¥–µ–Ω:', !!supportPanel);
        console.log('   mainMenu –Ω–∞–π–¥–µ–Ω:', !!mainMenu);
        
        if (supportPanel && mainMenu) {
            mainMenu.classList.remove('active');
            mainMenu.style.display = 'none';
            
            supportPanel.classList.add('active');
            supportPanel.style.display = 'flex';
            supportPanel.style.visibility = 'visible';
            supportPanel.style.opacity = '1';
            
            console.log('‚úÖ‚úÖ‚úÖ –ü–ê–ù–ï–õ–¨ –ü–û–î–î–ï–†–ñ–ö–ò –û–¢–ö–†–´–¢–ê –ò –í–ò–î–ò–ú–ê ‚úÖ‚úÖ‚úÖ');
            console.log('   supportPanel display:', supportPanel.style.display);
            console.log('   mainMenu display:', mainMenu.style.display);
            
            this.loadSupportMessages();
            
            // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeBtn = document.getElementById('close-support');
            if (closeBtn) {
                console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
                closeBtn.onclick = (e) => {
                    e.preventDefault();
                    console.log('üîµüîµüîµ –ó–ê–ö–†–´–¢–ò–ï –ü–ê–ù–ï–õ–ò –ü–û–î–î–ï–†–ñ–ö–ò üîµüîµüîµ');
                    this.closeSupportPanel();
                };
            }
        } else {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏!');
            console.error('   supportPanel:', !!supportPanel);
            console.error('   mainMenu:', !!mainMenu);
        }
    }
    
    closeSupportPanel() {
        console.log('‚ùå –ó–ê–ö–†–´–í–ê–ï–ú –ü–ê–ù–ï–õ–¨ –ü–û–î–î–ï–†–ñ–ö–ò');
        
        const supportPanel = document.getElementById('support-panel');
        const mainMenu = document.getElementById('main-menu');
        
        if (supportPanel && mainMenu) {
            supportPanel.classList.remove('active');
            supportPanel.style.display = 'none';
            
            mainMenu.classList.add('active');
            mainMenu.style.display = 'block';
            
            console.log('‚úÖ –ü–∞–Ω–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é');
        }
    }
    
    async loadSupportMessages() {
        const messagesContainer = document.getElementById('support-messages');
        if (!messagesContainer) return;
        
        const user = this.getUser();
        const supportTickets = user.supportTickets || [];
        
        if (supportTickets.length === 0) {
            messagesContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem; color: rgba(255,255,255,0.5);">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üì¨</div>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                    <p style="font-size: 0.9rem; margin-top: 0.5rem;">–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂–µ</p>
                </div>
            `;
            return;
        }
        
        messagesContainer.innerHTML = '';
        supportTickets.reverse().forEach((ticket, index) => {
            const ticketDiv = document.createElement('div');
            ticketDiv.className = 'support-ticket-item';
            ticketDiv.innerHTML = `
                <div class="ticket-header">
                    <span class="ticket-date">${new Date(ticket.timestamp).toLocaleString('ru')}</span>
                    <span class="ticket-status ${ticket.answered ? 'answered' : 'pending'}">
                        ${ticket.answered ? '‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'}
                    </span>
                </div>
                <div class="ticket-message">${ticket.message}</div>
                ${ticket.response ? `
                    <div class="ticket-response">
                        <strong>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</strong>
                        <p>${ticket.response}</p>
                        <span class="response-date">${new Date(ticket.responseTime).toLocaleString('ru')}</span>
                    </div>
                ` : ''}
            `;
            messagesContainer.appendChild(ticketDiv);
        });
    }
    
    async sendSupportMessage() {
        const input = document.getElementById('support-message-input');
        const message = input.value.trim();
        
        if (!message) {
            await this.showAlert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        const user = this.getUser();
        const ticket = {
            timestamp: Date.now(),
            message: message,
            userId: this.currentUser,
            username: user.username || user.nickname,
            answered: false
        };
        
        const updates = {
            supportTickets: [...(user.supportTickets || []), ticket]
        };
        
        await this.saveUser(updates);
        
        input.value = '';
        await this.showAlert('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', '‚úÖ', '–£—Å–ø–µ—Ö');
        
        this.loadSupportMessages();
        
        console.log('üìß –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
    
    async showSupportAdminPanel() {
        const user = this.getUser();
        
        if (!user.isSupportAdmin) {
            await this.showAlert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n–ê–¥–º–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', 'üîí', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
            return;
        }
        
        const supportAdminPanel = document.getElementById('support-admin-panel');
        const mainMenu = document.getElementById('main-menu');
        
        if (supportAdminPanel && mainMenu) {
            mainMenu.classList.remove('active');
            mainMenu.style.display = 'none';
            
            supportAdminPanel.style.display = 'flex';
            supportAdminPanel.style.visibility = 'visible';
            supportAdminPanel.style.opacity = '1';
            supportAdminPanel.classList.add('active');
            
            this.loadSupportTickets();
        }
    }
    
    closeSupportAdminPanel() {
        const supportAdminPanel = document.getElementById('support-admin-panel');
        const mainMenu = document.getElementById('main-menu');
        
        if (supportAdminPanel) {
            supportAdminPanel.classList.remove('active');
            supportAdminPanel.style.display = 'none';
            supportAdminPanel.style.visibility = 'hidden';
            supportAdminPanel.style.opacity = '0';
        }
        
        if (mainMenu) {
            mainMenu.classList.add('active');
            mainMenu.style.display = 'block';
        }
    }
    
    async loadSupportTickets() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isSupportAdmin) {
            return;
        }
        
        const container = document.getElementById('support-tickets-container');
        if (!container) return;
        
        container.innerHTML = '<div style="text-align: center; padding: 2rem;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        
        const allUsers = await this.getAllUsers();
        const allTickets = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        Object.entries(allUsers).forEach(([userId, userData]) => {
            if (userData.supportTickets && userData.supportTickets.length > 0) {
                userData.supportTickets.forEach((ticket, ticketIndex) => {
                    allTickets.push({
                        ...ticket,
                        userId: userId,
                        ticketIndex: ticketIndex,
                        username: userData.username || userData.nickname || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    });
                });
            }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        allTickets.sort((a, b) => b.timestamp - a.timestamp);
        
        container.innerHTML = '';
        
        if (allTickets.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 3rem; color: rgba(255,255,255,0.5);">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üì≠</div>
                    <p>–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                </div>
            `;
            return;
        }
        
        allTickets.forEach(ticket => {
            const ticketDiv = document.createElement('div');
            ticketDiv.className = `support-admin-ticket ${ticket.answered ? 'answered' : 'unanswered'}`;
            ticketDiv.innerHTML = `
                <div class="ticket-admin-header">
                    <span class="ticket-user">üë§ ${ticket.username}</span>
                    <span class="ticket-date">${new Date(ticket.timestamp).toLocaleString('ru')}</span>
                    <span class="ticket-status ${ticket.answered ? 'answered' : 'pending'}">
                        ${ticket.answered ? '‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'}
                    </span>
                </div>
                <div class="ticket-message">${ticket.message}</div>
                ${ticket.response ? `
                    <div class="ticket-admin-response">
                        <strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong>
                        <p>${ticket.response}</p>
                    </div>
                ` : `
                    <button class="btn small primary respond-btn" 
                            data-user-id="${ticket.userId}" 
                            data-ticket-index="${ticket.ticketIndex}">
                        –û—Ç–≤–µ—Ç–∏—Ç—å
                    </button>
                `}
            `;
            
            const respondBtn = ticketDiv.querySelector('.respond-btn');
            if (respondBtn) {
                respondBtn.addEventListener('click', () => {
                    this.openSupportResponse(ticket.userId, ticket.ticketIndex, ticket.message, ticket.username);
                });
            }
            
            container.appendChild(ticketDiv);
        });
    }
    
    openSupportResponse(userId, ticketIndex, message, username) {
        const chatArea = document.getElementById('support-chat-area');
        const chatUser = document.getElementById('support-chat-user');
        const chatMessages = document.getElementById('support-chat-messages');
        
        if (!chatArea || !chatUser || !chatMessages) return;
        
        chatUser.textContent = `–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${username}`;
        chatMessages.innerHTML = `
            <div class="original-message">
                <strong>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong>
                <p>${message}</p>
            </div>
        `;
        
        chatArea.style.display = 'flex';
        chatArea.dataset.userId = userId;
        chatArea.dataset.ticketIndex = ticketIndex;
    }
    
    async sendSupportAdminMessage() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isSupportAdmin) {
            return;
        }
        
        const chatArea = document.getElementById('support-chat-area');
        const input = document.getElementById('support-admin-message-input');
        const response = input.value.trim();
        
        if (!response) {
            await this.showAlert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        const userId = chatArea.dataset.userId;
        const ticketIndex = parseInt(chatArea.dataset.ticketIndex);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = await this.getUserById(userId);
        
        if (!userData || !userData.supportTickets || !userData.supportTickets[ticketIndex]) {
            await this.showAlert('–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç
        userData.supportTickets[ticketIndex].answered = true;
        userData.supportTickets[ticketIndex].response = response;
        userData.supportTickets[ticketIndex].responseTime = Date.now();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(userId, {
                supportTickets: userData.supportTickets
            });
        } else {
            this.users[userId] = userData;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        input.value = '';
        chatArea.style.display = 'none';
        
        await this.showAlert('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '‚úÖ', '–£—Å–ø–µ—Ö');
        this.loadSupportTickets();
    }

    async loadUsersList(searchQuery = '') {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isAdmin) {
            return;
        }
        
        const container = document.getElementById('users-container');
        container.innerHTML = '<div style="text-align: center; padding: 2rem;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –Ω–∏–∫ –∞–¥–º–∏–Ω–∞
        if (currentUser) {
            document.getElementById('admin-avatar').src = currentUser.avatar || this.avatars[0];
            const displayText = `${currentUser.nickname || currentUser.username} ‚Ä¢ ${currentUser.userid || 'ID –Ω–µ –∑–∞–¥–∞–Ω'}`;
            document.getElementById('admin-user-name').textContent = displayText;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const allUsers = await this.getAllUsers();
        container.innerHTML = '';

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        const filteredUsers = Object.entries(allUsers).filter(([userId, user]) => {
            if (!searchQuery) return true;
            
            const query = searchQuery.toLowerCase();
            const usernameMatch = (user.username || '').toLowerCase().includes(query);
            const idMatch = (user.userid || '').toLowerCase().includes(query);
            const nickMatch = (user.nickname || '').toLowerCase().includes(query);
            
            return usernameMatch || idMatch || nickMatch;
        });

        if (filteredUsers.length === 0) {
            container.innerHTML = '<div class="no-users-found">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        filteredUsers.forEach(([userId, user]) => {
            const userDiv = document.createElement('div');
            userDiv.className = 'user-item';
            userDiv.innerHTML = `
                <div class="user-info-admin">
                    <strong>${user.username || userId.substr(0,8)}</strong>
                    <div class="user-meta">
                        <span class="user-nick">üë§ ${user.nickname || '–ù–µ –∑–∞–¥–∞–Ω'}</span>
                        <span class="user-id">üÜî ${user.userid || '–ù–µ –∑–∞–¥–∞–Ω'}</span>
                    </div>
                    <div>–£—Ä–æ–≤–µ–Ω—å: ${user.level || 1} | –ó–æ–ª–æ—Ç–æ: ${user.gold || 0} | –ì–µ–º—ã: ${user.gems || 0}</div>
                </div>
                <div class="user-controls">
                    <input type="number" placeholder="–ó–æ–ª–æ—Ç–æ" value="${user.gold || 0}" class="admin-input">
                    <input type="number" placeholder="–ì–µ–º—ã" value="${user.gems || 0}" class="admin-input">
                    <button class="btn small admin-btn-update" onclick="gameData.updateUserBalance('${userId}', this)">üí∞ –û–±–Ω–æ–≤–∏—Ç—å</button>
                    <button class="btn small admin-btn-reset" onclick="gameData.resetUserProgress('${userId}')">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</button>
                </div>
            `;
            container.appendChild(userDiv);
        });
    }

    async searchUsers(query) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isAdmin) {
            return;
        }
        
        await this.loadUsersList(query);
    }

    async updateUserBalance(userId, button) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isAdmin) {
            return;
        }
        
        const inputs = button.parentElement.querySelectorAll('.admin-input');
        const gold = parseInt(inputs[0].value) || 0;
        const gems = parseInt(inputs[1].value) || 0;
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(userId, { gold, gems });
        } else {
            this.users[userId].gold = gold;
            this.users[userId].gems = gems;
        localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        await this.loadUsersList();
        await this.showAlert('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!', '‚úÖ', '–£—Å–ø–µ—Ö');
    }


    async resetUserProgress(userId) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
        const currentUser = this.getUser();
        if (!currentUser || !currentUser.isAdmin) {
            return;
        }
        
        const user = await this.getUserById(userId);
        const username = user.username || user.nickname || userId.substr(0, 8);
        
        if (await this.showConfirm(`–°–ë–†–û–° –ü–†–û–ì–†–ï–°–°–ê ${username}!\n\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å, –∫–∞—Ä—Ç—ã, —É–ª—É—á—à–µ–Ω–∏—è ‚Üí 0\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã ‚Üí –æ—á–∏—Å—Ç—è—Ç—Å—è\n\n–°–û–•–†–ê–ù–Ø–¢–°–Ø:\n‚úÖ ID –∏ –∞–≤–∞—Ç–∞—Ä\n‚úÖ –î—Ä—É–∑—å—è –∏ –∑–∞–ø—Ä–æ—Å—ã\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, '‚ö†Ô∏è', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')) {
            const resetData = {
                gold: 300,
                gems: 5,
                level: 1,
                experience: 0,
                cards: {},
                upgrades: {},
                usedCodes: [],  // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                casesOpened: 0,
                normalCasesOpened: 0,
                battlesPlayed: 0,
                battlesWon: 0,
                deck: []
                // –ù–ï —Ç—Ä–æ–≥–∞–µ–º: userid, avatar, friends, friendRequests, nickname, clan
            };
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–±—Ä–æ—Å –∫ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (this.useFirebase) {
                await firebaseAdapter.updateUserData(userId, resetData);
            } else {
                Object.assign(this.users[userId], resetData);
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
            }
            
            await this.loadUsersList();
            await this.showAlert(`–ü—Ä–æ–≥—Ä–µ—Å—Å ${username} —Å–±—Ä–æ—à–µ–Ω!

‚Ä¢ –ë–∞–ª–∞–Ω—Å: 300 ü™ô + 5 üíé
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–Ω–æ–≤–∞
‚Ä¢ ID, –∞–≤–∞—Ç–∞—Ä –∏ –¥—Ä—É–∑—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`, '‚úÖ', '–£—Å–ø–µ—Ö');
        }
    }

    async updateUserInfo() {
        const user = this.getUser();
        if (!user) return;
        document.getElementById('gold-amount').textContent = user.gold || 0;
        document.getElementById('gems-amount').textContent = user.gems || 0;
        this.updateExperienceBar(user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–∞ —Å —Ç–µ–≥–æ–º –∫–ª–∞–Ω–∞
        await this.updateNicknameWithClanTag(user);
    }
    
    async updateNicknameWithClanTag(user) {
        const nicknameElement = document.getElementById('display-nickname');
        if (!nicknameElement) return;
        
        let displayText = user.nickname || user.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (user.clanId) {
            try {
                let clan;
                if (this.useFirebase) {
                    const snapshot = await firebase.database().ref(`clans/${user.clanId}`).once('value');
                    clan = snapshot.val();
                } else {
                    const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                    clan = clans[user.clanId];
                }
                
                if (clan && clan.tag) {
                    displayText = `[${clan.tag}] ${displayText}`;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–∞ –∫–ª–∞–Ω–∞:', error);
            }
        }
        
        nicknameElement.textContent = displayText;
    }

    updateExperienceBar(user) {
        const expNeeded = user.level <= 5 ? 30 : 30 + (Math.floor((user.level - 1) / 5) * 50);
        const currentExp = user.experience;
        const percentage = Math.min(100, (currentExp / expNeeded) * 100);
        
        document.getElementById('exp-fill').style.width = `${percentage}%`;
        document.getElementById('exp-text').textContent = `${currentExp}/${expNeeded}`;
        document.getElementById('exp-level-badge').textContent = user.level;
    }

    switchTab(tabName) {
        // –ó–≤—É–∫ –∫–ª–∏–∫–∞
        this.soundSystem.playSound('click');
        
        // –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        this.animateTabTransition();
        
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–ª–∞–Ω–æ–≤ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if (tabName === 'clans' && window.clansSystem) {
            setTimeout(() => {
                window.clansSystem.loadClanInvites();
            }, 100);
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(`${tabName}-tab`).classList.add('active');
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å –∫–∞—Ä—Ç–∞–º–∏
        if (tabName === 'cards') {
            this.setupCardFilters('cards-tab');
        } else if (tabName === 'deck') {
            this.setupCardFilters('deck-tab', true);
        } else if (tabName === 'friends') {
            this.loadFriendsList();
        } else if (tabName === 'clans') {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–Ω–æ–≤
            if (window.clansSystem) {
                window.clansSystem.updateClanUI();
            }
        } else if (tabName === 'leaderboard') {
            this.loadLeaderboard('all');
        }
    }
    
    // üèÜ ===== –°–ò–°–¢–ï–ú–ê –¢–û–ü–ê =====
    
    getWeeklyTopMessage(topPlayer = null) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞: 20.10.2025 –≤ 13:00 –ú–°–ö
        const now = new Date();
        const moscowOffset = 3 * 60; // –ú–°–ö = UTC+3
        const nowMoscow = new Date(now.getTime() + (moscowOffset - now.getTimezoneOffset()) * 60000);
        
        // –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: 20 –æ–∫—Ç—è–±—Ä—è 2025, 13:00 –ú–°–ö
        const targetDate = new Date(2025, 9, 20, 13, 0, 0); // –ú–µ—Å—è—Ü 9 = –æ–∫—Ç—è–±—Ä—å (0-based)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        const targetDateMoscow = new Date(targetDate.getTime() - (moscowOffset - targetDate.getTimezoneOffset()) * 60000);
        
        const timeLeft = targetDateMoscow - nowMoscow;
        const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hoursLeft = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –º–æ–º–µ–Ω—Ç –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (20.10.2025 13:00-14:00)
        const isRewardTime = nowMoscow.getFullYear() === 2025 && 
                             nowMoscow.getMonth() === 9 && 
                             nowMoscow.getDate() === 20 && 
                             nowMoscow.getHours() === 13;
        
        if (isRewardTime && topPlayer) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            return `
                <div class="weekly-winner-banner" style="background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%); padding: 2rem; border-radius: 15px; margin-bottom: 1.5rem; border: 3px solid rgba(255, 215, 0, 0.5); box-shadow: 0 0 30px rgba(255, 215, 0, 0.4); text-align: center;">
                    <h3 style="margin: 0 0 1rem 0; font-size: 2rem; color: #000;">üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –ù–ï–î–ï–õ–ò! üèÜ</h3>
                    <div style="display: flex; align-items: center; justify-content: center; gap: 1.5rem; margin: 1.5rem 0;">
                        <img src="${topPlayer.avatar || this.avatars[0]}" alt="Avatar" style="width: 80px; height: 80px; border-radius: 50%; border: 4px solid #000; box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);">
                        <div style="text-align: left;">
                            <div style="font-size: 1.5rem; font-weight: 900; color: #000;">${topPlayer.nickname || topPlayer.username}</div>
                            <div style="font-size: 1rem; color: #000; opacity: 0.8;">ID: ${topPlayer.userid || topPlayer.id}</div>
                            <div style="font-size: 1.1rem; color: #000; margin-top: 0.3rem;">–£—Ä–æ–≤–µ–Ω—å: ${topPlayer.level || 1}</div>
                        </div>
                    </div>
                    <p style="margin: 0; color: #000; font-weight: 700; font-size: 1.2rem;">
                        üéÅ –ü–æ–ª—É—á–∞–µ—Ç DOTA PLUS –Ω–∞ –º–µ—Å—è—Ü! üéÅ
                    </p>
                    <p style="margin: 0.8rem 0 0 0; color: #000; opacity: 0.7; font-size: 0.9rem;">–°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à: 20 –æ–∫—Ç—è–±—Ä—è 2025, 13:00 –ú–°–ö</p>
                </div>
            `;
        } else {
            return `
                <div class="weekly-competition-banner" style="background: linear-gradient(135deg, rgba(255, 215, 0, 0.2) 0%, rgba(255, 165, 0, 0.1) 100%); padding: 1.5rem; border-radius: 15px; margin-bottom: 1.5rem; border: 2px solid rgba(255, 215, 0, 0.3);">
                    <h3 style="margin: 0 0 0.5rem 0; font-size: 1.3rem; color: #FFD700; text-align: center;">üéÅ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –ö–û–ù–ö–£–†–° üéÅ</h3>
                    <p style="margin: 0; opacity: 0.9; line-height: 1.6; text-align: center;">
                        –ò–≥—Ä–æ–∫ –Ω–∞ <strong>1-–º –º–µ—Å—Ç–µ</strong> –≤ <strong>20 –æ–∫—Ç—è–±—Ä—è 2025 –≤ 13:00 –ú–°–ö</strong> –ø–æ–ª—É—á–∏—Ç 
                        <strong style="color: #FFD700;">DOTA PLUS –Ω–∞ –º–µ—Å—è—Ü!</strong>
                    </p>
                    <p style="margin: 0.5rem 0 0 0; opacity: 0.7; font-size: 0.9rem; text-align: center;">
                        ‚è∞ –î–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${daysLeft} –¥–Ω–µ–π ${hoursLeft} —á–∞—Å–æ–≤
                    </p>
                </div>
            `;
        }
    }
    
    async loadLeaderboard(filter = 'all') {
        console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤, —Ñ–∏–ª—å—Ç—Ä:', filter);
        
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –°–ù–ê–ß–ê–õ–ê
            let allUsers = null;
            
            if (this.useFirebase) {
                const snapshot = await firebase.database().ref('users').once('value');
                allUsers = snapshot.val() || {};
            } else {
                allUsers = JSON.parse(localStorage.getItem('dotaCardsUsers') || '{}');
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
            let usersArray = Object.entries(allUsers).map(([id, userData]) => ({
                id,
                ...userData,
                totalExp: this.calculateTotalExp(userData.level || 1, userData.experience || 0)
            }));
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            const currentUser = this.getUser();
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ø –∫–ª–∞–Ω–æ–≤
            if (filter === 'clans') {
                await this.loadClansLeaderboard();
                return;
            }
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ø –∫–ª–∞–Ω–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–ª–∞–Ω–µ
            if (filter === 'my-clan' && !currentUser.clanId) {
                leaderboardList.innerHTML = `
                    <div class="no-data" style="text-align: center; padding: 3rem;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üè∞</div>
                        <h3 style="margin-bottom: 0.5rem;">–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ</h3>
                        <p style="opacity: 0.7;">–í—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–ª–∞–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞</p>
                    </div>
                `;
                return;
            }
            
            if (filter === 'my-clan' && currentUser.clanId) {
                usersArray = usersArray.filter(u => u.clanId === currentUser.clanId);
            } else if (filter === 'friends') {
                if (currentUser.friends && currentUser.friends.length > 0) {
                    usersArray = usersArray.filter(u => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤–µ friends
                        const isFriend = currentUser.friends.includes(u.userid || u.id);
                        return isFriend;
                    });
                } else {
                    usersArray = [];
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–ø—ã—Ç—É
            usersArray.sort((a, b) => b.totalExp - a.totalExp);
            
            // –ë–µ—Ä–µ–º —Ç–æ–ø-100
            usersArray = usersArray.slice(0, 100);
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫
            if (usersArray.length === 0) {
                leaderboardList.innerHTML = '<div class="no-results">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</div>';
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –Ω–∞—á–∞–ª–æ
            const weeklyBanner = this.getWeeklyTopMessage(usersArray[0]);
            
            leaderboardList.innerHTML = weeklyBanner + usersArray.map((userData, index) => {
                const isCurrentUser = userData.userid === currentUser.userid;
                const rank = index + 1;
                const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : `#${rank}`;
                
                return `
                    <div class="leaderboard-item ${isCurrentUser ? 'current-user' : ''}">
                        <div class="leader-rank">${medal}</div>
                        <img src="${userData.avatar || this.avatars[0]}" alt="Avatar" class="leader-avatar">
                        <div class="leader-info">
                            <div class="leader-name">${userData.nickname || userData.username}</div>
                            <div class="leader-stats">
                                <span class="leader-level">–£—Ä. ${userData.level || 1}</span>
                                <span class="leader-exp">${userData.totalExp} –æ–ø—ã—Ç–∞</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            document.querySelectorAll('.leaderboard-filters .filter-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelectorAll('.leaderboard-filters .filter-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    this.loadLeaderboard(btn.dataset.filter);
                });
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞:', error);
            leaderboardList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞</div>';
        }
    }
    
    async loadClansLeaderboard() {
        console.log('üè∞ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –∫–ª–∞–Ω–æ–≤');
        
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) return;
        
        try {
            let allClans = [];
            
            if (this.useFirebase) {
                const snapshot = await firebase.database().ref('clans').once('value');
                const clansData = snapshot.val();
                
                if (clansData) {
                    allClans = Object.entries(clansData).map(([id, data]) => ({
                        id,
                        ...data
                    }));
                }
            } else {
                const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                allClans = Object.entries(clans).map(([id, data]) => ({
                    id,
                    ...data
                }));
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é
            allClans.sort((a, b) => (b.level || 1) - (a.level || 1));
            
            // –ë–µ—Ä–µ–º —Ç–æ–ø-50
            const topClans = allClans.slice(0, 50);
            
            if (topClans.length === 0) {
                leaderboardList.innerHTML = '<div class="no-data">–ö–ª–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
                return;
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
            leaderboardList.innerHTML = topClans.map((clan, index) => {
                const rank = index + 1;
                const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : '';
                const membersCount = (clan.members || []).length;
                
                return `
                    <div class="leaderboard-item ${rank <= 3 ? 'top-three' : ''}">
                        <div class="leaderboard-rank">${medal || rank}</div>
                        <div class="leaderboard-avatar" style="background-image: url('${clan.avatar || 'images/default-clan.jpg'}')"></div>
                        <div class="leaderboard-info">
                            <div class="leaderboard-name">
                                <span style="color: #ffd700; font-weight: bold; margin-right: 0.5rem;">[${clan.tag}]</span>
                                ${clan.name}
                            </div>
                            <div class="leaderboard-level">
                                <span>–£—Ä–æ–≤–µ–Ω—å: ${clan.level || 1}</span>
                                <span>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersCount}/5</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –∫–ª–∞–Ω–æ–≤:', error);
            leaderboardList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –∫–ª–∞–Ω–æ–≤</div>';
        }
    }
    
    calculateTotalExp(level, currentExp) {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –æ–ø—ã—Ç —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
        let totalExp = currentExp;
        
        for (let lvl = 1; lvl < level; lvl++) {
            const expNeeded = lvl <= 5 ? 30 : 30 + (Math.floor((lvl - 1) / 5) * 50);
            totalExp += expNeeded;
        }
        
        return totalExp;
    }
    
    // ===== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –¢–û–ü–ê =====

    setupCardFilters(tabId, isDeck = false) {
        const tab = document.getElementById(tabId);
        const rarityBtns = tab.querySelectorAll('[data-rarity]');
        const starsBtns = tab.querySelectorAll('[data-stars]');
        
        let currentRarity = isDeck ? this.deckRarityFilter : 'all';
        let currentStars = isDeck ? this.deckStarsFilter : 'all';
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        rarityBtns.forEach(btn => btn.replaceWith(btn.cloneNode(true)));
        starsBtns.forEach(btn => btn.replaceWith(btn.cloneNode(true)));
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        tab.querySelectorAll('[data-rarity]').forEach(btn => {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            btn.classList.remove('active');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            if (isDeck && btn.dataset.rarity === this.deckRarityFilter) {
                btn.classList.add('active');
            } else if (!isDeck && btn.dataset.rarity === 'all') {
                btn.classList.add('active');
            }
            
            btn.addEventListener('click', () => {
                tab.querySelectorAll('[data-rarity]').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentRarity = btn.dataset.rarity;
                
                if (isDeck) {
                    this.deckRarityFilter = currentRarity;
                    this.renderDeckAvailableCards(currentRarity, currentStars);
                } else {
                    this.loadCards(currentRarity, currentStars);
                }
            });
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∑–≤–µ–∑–¥–∞–º
        tab.querySelectorAll('[data-stars]').forEach(btn => {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            btn.classList.remove('active');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            if (isDeck && btn.dataset.stars === this.deckStarsFilter) {
                btn.classList.add('active');
            } else if (!isDeck && btn.dataset.stars === 'all') {
                btn.classList.add('active');
            }
            
            btn.addEventListener('click', () => {
                tab.querySelectorAll('[data-stars]').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentStars = btn.dataset.stars;
                
                if (isDeck) {
                    this.deckStarsFilter = currentStars;
                    this.renderDeckAvailableCards(currentRarity, currentStars);
                } else {
                    this.loadCards(currentRarity, currentStars);
                }
            });
        });
    }

    animateTabTransition() {
        // –£–±—Ä–∞–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    createFloatingParticles() {
        const colors = this.currentTheme === 'dark' ? 
            ['#fff', '#ccc', '#999'] : 
            ['#000', '#333', '#666'];
        
        for (let i = 0; i < 15; i++) {
            const particle = document.createElement('div');
            const color = colors[Math.floor(Math.random() * colors.length)];
            const size = Math.random() * 6 + 3;
            const startX = Math.random() * window.innerWidth;
            const startY = window.innerHeight + 50;
            const endX = startX + (Math.random() - 0.5) * 200;
            const endY = -50;
            
            particle.style.cssText = `
                position: fixed;
                width: ${size}px;
                height: ${size}px;
                background: ${color};
                border-radius: 50%;
                left: ${startX}px;
                top: ${startY}px;
                z-index: 1000;
                opacity: 0.8;
                box-shadow: 0 0 15px ${color}40;
                pointer-events: none;
                transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            `;
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            setTimeout(() => {
                particle.style.left = `${endX}px`;
                particle.style.top = `${endY}px`;
                particle.style.opacity = '0';
                particle.style.transform = 'scale(0.5) rotate(180deg)';
            }, 50);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ
            setTimeout(() => {
                if (document.body.contains(particle)) {
                    document.body.removeChild(particle);
                }
            }, 1300);
        }
    }

    animateThemeTransition() {
        const transition = document.createElement('div');
        transition.className = 'theme-transition';
        document.body.appendChild(transition);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            transition.classList.add('active');
        }, 10);

        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            transition.classList.remove('active');
        }, 300);

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        setTimeout(() => {
            if (document.body.contains(transition)) {
                document.body.removeChild(transition);
            }
        }, 900);
    }

    loadCards(rarityFilter = 'all', starsFilter = 'all') {
        console.log('üì¶ loadCards –≤—ã–∑–≤–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—ã:', { rarityFilter, starsFilter });
        const container = document.getElementById('cards-grid');
        container.innerHTML = '';

        const user = this.getUser();
        const userCards = user.cards || {};

        Object.keys(this.cards).forEach(cardName => {
            const card = this.cards[cardName];
            const userCard = userCards[cardName] || { count: 0, upgrades: [] };
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
            if (rarityFilter !== 'all' && card.rarity !== rarityFilter) {
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
            const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
            if (starsFilter !== 'all' && upgradeCount !== parseInt(starsFilter)) {
                return;
            }
            
            if (userCard.count > 0) {
                const cardDiv = document.createElement('div');
                cardDiv.className = `card rarity-border-${card.rarity}`;
                const starsHtml = Array(3).fill(0).map((_, i) => 
                    `<span class="star ${i < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–ª–ª–µ (–∫–∞–∫ –≤ –∫–æ–ª–æ–¥–µ)
                const skillHtml = card.skill ? `
                    <div class="card-skill-info" style="margin-top: 8px; padding: 8px; background: rgba(255, 215, 0, 0.15); border-radius: 8px; border: 1px solid rgba(255, 215, 0, 0.3);">
                        <div style="font-weight: 600; color: #ffd700; font-size: 0.85rem; margin-bottom: 4px;">‚ö° ${card.skill.name}</div>
                        <div style="font-size: 0.75rem; color: #d4d4d8; line-height: 1.3;">${card.skill.description}</div>
                        <div style="font-size: 0.7rem; color: #a1a1aa; margin-top: 4px;">–ö—É–ª–¥–∞—É–Ω: ${card.skill.cooldown} —Ö–æ–¥–∞</div>
                    </div>
                ` : '';
                
                cardDiv.innerHTML = `
                    <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 10px;"></div>
                    <div class="card-rarity rarity-${card.rarity}">${this.getRarityName(card.rarity)}</div>
                    <div class="card-stars">${starsHtml}</div>
                    <div class="card-name">${card.name}</div>
                    <div class="card-stats">
                        <div>‚öîÔ∏è ${card.damage + this.getUpgradeBonus(userCard.upgrades, 'damage')}</div>
                        <div>‚ù§Ô∏è ${card.health + this.getUpgradeBonus(userCard.upgrades, 'health')}</div>
                        <div>üõ°Ô∏è ${card.defense + this.getUpgradeBonus(userCard.upgrades, 'defense')}%</div>
                        <div>‚ö° ${card.speed + this.getUpgradeBonus(userCard.upgrades, 'speed')}</div>
                    </div>
                    ${skillHtml}
                    <div class="card-count">x${userCard.count}</div>
                `;
                container.appendChild(cardDiv);
            }
        });
    }

    loadDeck() {
        const user = this.getUser();
        if (!user.deck) user.deck = [];
        
        this.renderDeckSlots();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.renderDeckAvailableCards(this.deckRarityFilter, this.deckStarsFilter);
    }

    renderDeckSlots() {
        const container = document.getElementById('deck-slots');
        container.innerHTML = '';
        const user = this.getUser();
        const deck = user.deck || [];
        
        // –°–æ–∑–¥–∞–µ–º 3 —Å–ª–æ—Ç–∞
        for (let i = 0; i < 3; i++) {
            const slot = document.createElement('div');
            slot.className = 'deck-slot';
            
            if (deck[i]) {
                const card = this.cards[deck[i]];
                const userCard = user.cards[deck[i]];
                const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
                const starsHtml = Array(3).fill(0).map((_, idx) => 
                    `<span class="star ${idx < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                slot.classList.add('filled');
                slot.innerHTML = `
                    <div class="deck-card rarity-border-${card.rarity}">
                        <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 5px;"></div>
                        <div class="card-stars">${starsHtml}</div>
                        <div class="card-name">${card.name}</div>
                        <div class="card-stats-mini">
                            <span>‚öîÔ∏è${card.damage}</span>
                            <span>‚ù§Ô∏è${card.health}</span>
                            <span>üõ°Ô∏è${card.defense}%</span>
                            <span>‚ö°${card.speed}</span>
                        </div>
                        <button class="remove-from-deck-btn" data-index="${i}">‚úï</button>
                    </div>
                `;
            } else {
                slot.innerHTML = '<div class="deck-slot-empty">–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç</div>';
            }
            
            container.appendChild(slot);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        container.querySelectorAll('.remove-from-deck-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.removeFromDeck(index);
            });
        });
    }

    renderDeckAvailableCards(rarityFilter = 'all', starsFilter = 'all') {
        const container = document.getElementById('deck-available-cards');
        container.innerHTML = '';
        const user = this.getUser();
        const userCards = user.cards || {};
        const deck = user.deck || [];
        
        Object.keys(this.cards).forEach(cardName => {
            const card = this.cards[cardName];
            const userCard = userCards[cardName] || { count: 0, upgrades: [] };
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
            if (rarityFilter !== 'all' && card.rarity !== rarityFilter) {
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
            const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
            if (starsFilter !== 'all' && upgradeCount !== parseInt(starsFilter)) {
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –∏–≥—Ä–æ–∫–∞
            if (userCard.count > 0) {
                const cardDiv = document.createElement('div');
                cardDiv.className = `card rarity-border-${card.rarity} deck-card-item`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ
                const inDeck = deck.includes(cardName);
                if (inDeck) {
                    cardDiv.classList.add('in-deck');
                }
                
                const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
                const starsHtml = Array(3).fill(0).map((_, idx) => 
                    `<span class="star ${idx < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                const skillHtml = card.skill ? `
                    <div class="card-skill-info" style="margin-top: 8px; padding: 8px; background: rgba(255, 215, 0, 0.15); border-radius: 8px; border: 1px solid rgba(255, 215, 0, 0.3);">
                        <div style="font-weight: 600; color: #ffd700; font-size: 0.85rem; margin-bottom: 4px;">‚ö° ${card.skill.name}</div>
                        <div style="font-size: 0.75rem; color: #d4d4d8; line-height: 1.3;">${card.skill.description}</div>
                        <div style="font-size: 0.7rem; color: #a1a1aa; margin-top: 4px;">–ö—É–ª–¥–∞—É–Ω: ${card.skill.cooldown} —Ö–æ–¥–∞</div>
                    </div>
                ` : '';
                
                cardDiv.innerHTML = `
                    <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 10px;"></div>
                    <div class="card-rarity rarity-${card.rarity}">${this.getRarityName(card.rarity)}</div>
                    <div class="card-stars">${starsHtml}</div>
                    <div class="card-name">${card.name}</div>
                    <div class="card-stats">
                        <div>‚öîÔ∏è ${card.damage}</div>
                        <div>‚ù§Ô∏è ${card.health}</div>
                        <div>üõ°Ô∏è ${card.defense}%</div>
                        <div>‚ö° ${card.speed}</div>
                    </div>
                    ${skillHtml}
                    ${inDeck ? '<div class="in-deck-badge">–í –∫–æ–ª–æ–¥–µ</div>' : `<button class="add-to-deck-btn" data-card="${cardName}">–î–æ–±–∞–≤–∏—Ç—å</button>`}
                `;
                
                container.appendChild(cardDiv);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        container.querySelectorAll('.add-to-deck-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const cardName = e.target.dataset.card;
                this.addToDeck(cardName);
            });
        });
    }

    async addToDeck(cardName) {
        const user = this.getUser();
        const deck = user.deck || [];
        
        if (deck.length >= 3) {
            await this.showAlert('–ö–æ–ª–æ–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n–†–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã –¥–ª—è –±–æ—è.', '‚ÑπÔ∏è', '–ö–æ–ª–æ–¥–∞ –ø–æ–ª–Ω–∞—è');
            return;
        }
        
        if (deck.includes(cardName)) {
            await this.showAlert('–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤ –∫–æ–ª–æ–¥–µ!', '‚ÑπÔ∏è', '–í–Ω–∏–º–∞–Ω–∏–µ');
            return;
        }
        
        await this.saveUser({ deck: [...deck, cardName] });
        this.loadDeck();
    }

    async removeFromDeck(index) {
        const user = this.getUser();
        const deck = [...(user.deck || [])];
        deck.splice(index, 1);
        
        await this.saveUser({ deck });
        this.loadDeck();
    }

    getRarityName(rarity) {
        const names = {
            common: '–û–±—ã—á–Ω–∞—è',
            rare: '–†–µ–¥–∫–∞—è',
            epic: '–≠–ø–∏—á–µ—Å–∫–∞—è',
            legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'
        };
        return names[rarity] || rarity;
    }

    getUpgradeBonus(upgrades, stat) {
        let bonus = 0;
        if (upgrades && Array.isArray(upgrades)) {
        upgrades.forEach(upgradeName => {
            const upgrade = this.upgrades[upgradeName];
            if (upgrade && upgrade.effect === stat) {
                bonus += upgrade.value;
            }
        });
        }
        return bonus;
    }

    loadUpgrades() {
        const user = this.getUser();
        if (!user) return;
        
        const userUpgrades = user.upgrades || {};

        this.selectedUpgrade = null;
        this.renderUpgrades();
        this.renderCardsForUpgrade();
    }

    renderUpgrades() {
        const container = document.getElementById('upgrades-container');
        container.innerHTML = '';
        const user = this.getUser();
        if (!user) return;
        
        const userUpgrades = user.upgrades || {};
        
        Object.keys(this.upgrades).forEach(upgradeName => {
            const upgrade = this.upgrades[upgradeName];
            const count = userUpgrades[upgradeName] || 0;
            
            const upgradeDiv = document.createElement('div');
            upgradeDiv.className = `upgrade-item ${this.selectedUpgrade === upgradeName ? 'selected' : ''}`;
            upgradeDiv.innerHTML = `
                <h3>${upgrade.name}</h3>
                <p>${upgrade.description}</p>
                <div class="upgrade-count-badge">${count}</div>
                ${count > 0 ? `<button class="select-upgrade-btn" data-upgrade="${upgradeName}">–í—ã–±—Ä–∞—Ç—å</button>` : '<div class="no-upgrades">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</div>'}
            `;
            container.appendChild(upgradeDiv);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è
        container.querySelectorAll('.select-upgrade-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const upgradeName = e.target.dataset.upgrade;
                this.selectUpgrade(upgradeName);
            });
        });
    }

    selectUpgrade(upgradeName) {
        this.selectedUpgrade = upgradeName;
        this.renderUpgrades();
        this.renderCardsForUpgrade();
    }

    renderCardsForUpgrade() {
        const container = document.getElementById('upgrade-cards-grid');
        container.innerHTML = '';
        
        if (!this.selectedUpgrade) {
            container.innerHTML = '<div class="no-selection">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–ª–µ–≤–∞</div>';
            return;
        }
        
        const user = this.getUser();
        const userCards = user.cards || {};
        
        Object.keys(this.cards).forEach(cardName => {
            const card = this.cards[cardName];
            const userCard = userCards[cardName] || { count: 0, upgrades: [] };
            
            if (userCard.count > 0) {
                const cardDiv = document.createElement('div');
                cardDiv.className = `card rarity-border-${card.rarity}`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–∏–π —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ (–º–∞–∫—Å–∏–º—É–º 3)
                const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
                const canUpgrade = upgradeCount < 3;
                const starsHtml = Array(3).fill(0).map((_, idx) => 
                    `<span class="star ${idx < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                cardDiv.innerHTML = `
                    <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 10px;"></div>
                    <div class="card-rarity rarity-${card.rarity}">${this.getRarityName(card.rarity)}</div>
                    <div class="card-stars">${starsHtml}</div>
                    <div class="card-name">${card.name}</div>
                    <div class="card-stats">
                        <div>‚öîÔ∏è ${card.damage + this.getUpgradeBonus(userCard.upgrades, 'damage')}</div>
                        <div>‚ù§Ô∏è ${card.health + this.getUpgradeBonus(userCard.upgrades, 'health')}</div>
                        <div>üõ°Ô∏è ${card.defense + this.getUpgradeBonus(userCard.upgrades, 'defense')}%</div>
                        <div>‚ö° ${card.speed + this.getUpgradeBonus(userCard.upgrades, 'speed')}</div>
                    </div>
                    ${canUpgrade ? `<button class="apply-upgrade-btn" data-card="${cardName}">–ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ</button>` : '<div class="max-upgrades">–ú–∞–∫—Å. —É–ª—É—á—à–µ–Ω–∏–π</div>'}
                `;
                container.appendChild(cardDiv);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
        container.querySelectorAll('.apply-upgrade-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const cardName = e.target.dataset.card;
                this.applyUpgrade(cardName);
            });
        });
    }

    async applyUpgrade(cardName) {
        const user = this.getUser();
        if (!user) {
            await this.showAlert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        if (!user.cards || !user.cards[cardName]) {
            await this.showAlert('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        if (!this.selectedUpgrade) {
            await this.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ!', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        const userUpgrades = user.upgrades || {};
        const upgradeCount = userUpgrades[this.selectedUpgrade] || 0;
        
        if (upgradeCount <= 0) {
            await this.showAlert('–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è!', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        const userCard = user.cards[cardName];
        if (!userCard.upgrades) userCard.upgrades = [];
        
        if (userCard.upgrades.length >= 3) {
            await this.showAlert('–ù–∞ –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —É–ª—É—á—à–µ–Ω–∏—è!', '‚ö†Ô∏è', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ');
            return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        const newCardUpgrades = [...userCard.upgrades, this.selectedUpgrade];
        const newUpgradeCount = upgradeCount - 1;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
        const allUpgrades = { ...userUpgrades };
        allUpgrades[this.selectedUpgrade] = newUpgradeCount;
        
        const updates = {
            [`cards/${cardName}/upgrades`]: newCardUpgrades,
            upgrades: allUpgrades
        };
        
        await this.saveUser(updates);
        
        // –ó–≤—É–∫ —É–ª—É—á—à–µ–Ω–∏—è
        this.soundSystem.playSound('upgrade');
        
        await this.showAlert(`–£–ª—É—á—à–µ–Ω–∏–µ ${this.selectedUpgrade} –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ ${cardName}!`, '‚úÖ', '–£—Å–ø–µ—Ö');
        
        this.loadUpgrades();
        this.loadCards();
    }

    async buyCase(caseType) {
        try {
            const user = this.getUser();
            if (!user) {
                await this.showAlert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', '‚ùå', '–û—à–∏–±–∫–∞');
                return;
            }
            
        const caseData = this.cases[caseType];
            if (!caseData) {
                await this.showAlert('–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!', '‚ùå', '–û—à–∏–±–∫–∞');
                return;
            }
        
        if (caseData.currency === 'gold' && user.gold < caseData.cost) {
            await this.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞', 'üí∞', '–û—à–∏–±–∫–∞');
            return;
        }
        
        if (caseData.currency === 'gems' && user.gems < caseData.cost) {
            await this.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤', 'üíé', '–û—à–∏–±–∫–∞');
            return;
        }

        // –ó–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
        this.soundSystem.playSound('openCase');

            const updates = {};

        // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
        if (caseData.currency === 'gold') {
                updates.gold = user.gold - caseData.cost;
        } else {
                updates.gems = user.gems - caseData.cost;
            }

            // –î–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (–∫–µ–π—Å "upgrades")
            if (caseType === 'upgrades') {
            // 40% —à–∞–Ω—Å —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–¥–µ—Ç
            const dropChance = Math.random();
            
            if (dropChance < 0.4) {
                    // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                    await this.saveUser(updates);
                this.showNothingDropAnimation();
                    this.updateUserInfo();
                    return;
                }
                
                // –í—ã–ø–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏–µ (60% —à–∞–Ω—Å)
                console.log('üéÅ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–∞—á—É —É–ª—É—á—à–µ–Ω–∏—è');
                console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:', this.upgrades);
                
            const upgradeNames = Object.keys(this.upgrades);
                console.log('üìã –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É–ª—É—á—à–µ–Ω–∏–π:', upgradeNames);
                
                if (upgradeNames.length === 0) {
                    console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π!');
                    await this.saveUser(updates);
                    this.updateUserInfo();
                    return;
                }
                
            const randomUpgrade = upgradeNames[Math.floor(Math.random() * upgradeNames.length)];
                console.log('üé≤ –í—ã–±—Ä–∞–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ:', randomUpgrade);
                
                const upgradeData = this.upgrades[randomUpgrade];
                console.log('üìä –î–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:', upgradeData);
                
                if (!upgradeData) {
                    console.error('‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', randomUpgrade);
                    await this.saveUser(updates);
                    this.updateUserInfo();
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —É–ª—É—á—à–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                const currentUpgrades = user.upgrades ? { ...user.upgrades } : {};
                currentUpgrades[randomUpgrade] = (currentUpgrades[randomUpgrade] || 0) + 1;
                updates.upgrades = currentUpgrades;
                
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è:', updates.upgrades);
                
                await this.saveUser(updates);
                this.updateUserInfo();
                
                console.log('üé¨ –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:', { upgradeName: randomUpgrade, upgradeData });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
                this.showUpgradeDropAnimation(randomUpgrade, upgradeData);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–Ω–µ —Å—Ä–∞–∑—É)
                setTimeout(() => {
                    this.loadUpgrades();
                }, 500);
                
                return;
            }

            // –î–∞–µ–º –∫–∞—Ä—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (–∫–µ–π—Å—ã normal –∏ mega)
        if (caseType === 'normal' || caseType === 'mega') {
                const cardResult = await this.giveRandomCard(user, caseType);
                updates.casesOpened = (user.casesOpened || 0) + 1;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await this.saveUser(updates);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            this.showCardDropAnimation(cardResult, caseData);

        this.updateUserInfo();
        this.loadCards();
        this.loadUpgrades();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ buyCase:', error);
            await this.showAlert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞: ${error.message}`, '‚ùå', '–û—à–∏–±–∫–∞');
        }
    }

    showNothingDropAnimation() {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'card-drop-overlay';
        
        overlay.innerHTML = `
            <div class="card-drop-container">
                <div class="nothing-drop-animation">
                    <div class="nothing-icon">üí®</div>
                    <div class="nothing-message">
                        <div class="nothing-title">–ù–ï –ü–û–í–ï–ó–õ–û!</div>
                        <div class="nothing-desc">–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ</div>
                        <div class="nothing-hint">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</div>
                    </div>
                    <button class="btn primary close-drop-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-drop-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                this.updateUserInfo();
            }, 300);
        });
    }

    async showUpgradeDropAnimation(upgradeName, upgradeData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (!upgradeData) {
            console.error('‚ùå upgradeData –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!', upgradeName);
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ this.upgrades
            upgradeData = this.upgrades[upgradeName];
            
            if (!upgradeData) {
                console.error('‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.upgrades:', upgradeName);
                await this.showAlert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', '‚ùå', '–û—à–∏–±–∫–∞');
                return;
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'card-drop-overlay';
        
        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
        const upgradeIcons = {
            'Moon Shard': 'üåô',
            'Divine Rapier': '‚öîÔ∏è',
            'Heart of Tarrasque': '‚ù§Ô∏è',
            'Black King Bar': 'üõ°Ô∏è'
        };
        
        const icon = upgradeIcons[upgradeName] || '‚ú®';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const description = upgradeData.description || '–£–ª—É—á—à–µ–Ω–∏–µ';
        const effect = upgradeData.effect || '';
        const value = upgradeData.value || 0;
        
        overlay.innerHTML = `
            <div class="card-drop-container">
                <div class="upgrade-drop-animation">
                    <div class="upgrade-icon-large">${icon}</div>
                    <div class="dropped-upgrade">
                        <div class="upgrade-glow"></div>
                        <div class="upgrade-name-big">${upgradeName}</div>
                        <div class="upgrade-desc">${description}</div>
                        <div class="upgrade-effect-badge">
                            ${effect === 'damage' ? '‚öîÔ∏è –£—Ä–æ–Ω' : ''}
                            ${effect === 'health' ? '‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ' : ''}
                            ${effect === 'defense' ? 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞' : ''}
                            ${effect === 'speed' ? '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å' : ''}
                            +${value}
                        </div>
                    </div>
                    <button class="btn primary close-drop-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-drop-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                this.updateUserInfo();
                this.loadUpgrades();
            }, 300);
        });
    }

    showCardDropAnimation(cardResult, caseData) {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'card-drop-overlay';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ –∏—Å–∫—Ä—ã (–¥–ª—è epic –∏ legendary)
        const needsSparks = cardResult.card.rarity === 'epic' || cardResult.card.rarity === 'legendary';
        const sparksColor = cardResult.card.rarity === 'epic' ? '#a335ee' : '#ff8000';
        
        overlay.innerHTML = `
            <div class="card-drop-container">
                <div class="card-drop-animation">
                    ${cardResult.isDuplicate ? 
                        `<div class="duplicate-badge">–î–£–ë–õ–ò–ö–ê–¢!</div>
                         <div class="duplicate-reward">+${Math.floor(caseData.cost / 2)} ${caseData.currency === 'gold' ? 'ü™ô' : 'üíé'}</div>` 
                        : ''}
                    <div class="dropped-card rarity-border-${cardResult.card.rarity}">
                        <div class="card-glow"></div>
                        ${needsSparks ? this.generateSparks(sparksColor) : ''}
                        <div class="card-image" style="background-image: url('${cardResult.card.image}'); background-size: cover; background-position: center; width: 100%; height: 150px; border-radius: 10px; margin-bottom: 10px;"></div>
                        <div class="card-rarity rarity-${cardResult.card.rarity}">${this.getRarityName(cardResult.card.rarity)}</div>
                        <div class="card-name">${cardResult.card.name}</div>
                        <div class="card-stats">
                            <div>‚öîÔ∏è ${cardResult.card.damage}</div>
                            <div>‚ù§Ô∏è ${cardResult.card.health}</div>
                            <div>üõ°Ô∏è ${cardResult.card.defense}%</div>
                            <div>‚ö° ${cardResult.card.speed}</div>
                        </div>
                    </div>
                    <button class="btn primary close-drop-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-drop-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                this.updateUserInfo();
                this.loadCards();
                this.loadDeck();
            }, 300);
        });
    }

    generateSparks(color) {
        let sparksHTML = '<div class="sparks-container">';
        for (let i = 0; i < 30; i++) {
            const angle = (i / 30) * 360;
            const delay = Math.random() * 0.5;
            sparksHTML += `<div class="spark" style="--angle: ${angle}deg; --delay: ${delay}s; background: ${color};"></div>`;
        }
        sparksHTML += '</div>';
        return sparksHTML;
    }

    async giveRandomCard(user, caseType) {
        const userCards = user.cards || {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è casesOpened –µ—Å–ª–∏ –Ω–µ—Ç
        if (!user.casesOpened) user.casesOpened = 0;
        if (!user.normalCasesOpened) user.normalCasesOpened = 0;
        
        let selectedCardName;
        let isDuplicate = false;
        let availableCardPool = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–ª –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–µ–π—Å–∞
        if (caseType === 'normal') {
            // –û–±—ã—á–Ω—ã–π –∫–µ–π—Å - —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ
            availableCardPool = Object.keys(this.cards).filter(name => {
                const card = this.cards[name];
                return card.rarity === 'common' || card.rarity === 'rare';
            });
            
            // –ü–µ—Ä–≤—ã–µ 3 –û–ë–´–ß–ù–´–• –∫–µ–π—Å–∞ - –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if (user.normalCasesOpened < 3) {
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—É–ª–∞
                const newCards = availableCardPool.filter(name => !userCards[name] || userCards[name].count === 0);
                
                if (newCards.length > 0) {
                    selectedCardName = newCards[Math.floor(Math.random() * newCards.length)];
                } else {
                    // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –ø—É–ª–∞ —É–∂–µ –µ—Å—Ç—å
                    selectedCardName = availableCardPool[Math.floor(Math.random() * availableCardPool.length)];
                    isDuplicate = true;
                }
                user.normalCasesOpened++;
            } else {
                // –ü–æ—Å–ª–µ 3 –∫–µ–π—Å–æ–≤ - –æ–±—ã—á–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
                selectedCardName = availableCardPool[Math.floor(Math.random() * availableCardPool.length)];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
                if (userCards[selectedCardName] && userCards[selectedCardName].count > 0) {
                    isDuplicate = true;
                    
                    // –î–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–µ–π—Å–∞ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
                    const caseData = this.cases[caseType];
                    const refund = Math.floor(caseData.cost / 2);
                    await this.saveUser({ gold: user.gold + refund });
                }
                
                await this.saveUser({ normalCasesOpened: user.normalCasesOpened + 1 });
            }
        } else if (caseType === 'mega') {
            // –ú–µ–≥–∞ –±–æ–∫—Å - —Ä–µ–¥–∫–∏–µ, —ç–ø–∏—á–µ—Å–∫–∏–µ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å —à–∞–Ω—Å–∞–º–∏
            // –ë–ï–ó –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const rand = Math.random();
            
            if (rand < 0.15) {
                // 15% —à–∞–Ω—Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π
                availableCardPool = Object.keys(this.cards).filter(name => 
                    this.cards[name].rarity === 'legendary'
                );
            } else if (rand < 0.45) {
                // 30% —à–∞–Ω—Å —ç–ø–∏—á–µ—Å–∫–æ–π
                availableCardPool = Object.keys(this.cards).filter(name => 
                    this.cards[name].rarity === 'epic'
                );
            } else {
                // 55% —à–∞–Ω—Å —Ä–µ–¥–∫–æ–π
                availableCardPool = Object.keys(this.cards).filter(name => 
                    this.cards[name].rarity === 'rare'
                );
            }
            
            selectedCardName = availableCardPool[Math.floor(Math.random() * availableCardPool.length)];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
            if (userCards[selectedCardName] && userCards[selectedCardName].count > 0) {
                isDuplicate = true;
                
                // –î–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–µ–π—Å–∞ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
                const caseData = this.cases[caseType];
                const refund = Math.floor(caseData.cost / 2);
                await this.saveUser({ gems: user.gems + refund });
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        if (!isDuplicate) {
            const currentCard = userCards[selectedCardName] || { count: 0, upgrades: [] };
            await this.saveUser({
                [`cards/${selectedCardName}/count`]: currentCard.count + 1,
                [`cards/${selectedCardName}/upgrades`]: currentCard.upgrades || []
            });
        }
        
        return {
            card: this.cards[selectedCardName],
            cardName: selectedCardName,
            isDuplicate: isDuplicate
        };
    }

    async startBotBattle() {
        try {
        const user = this.getUser();
        
        if (!user) {
            await this.showAlert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        const userCards = user.cards || {};
            const deck = user.deck || [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–ª–æ–¥—ã (—Ä–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã)
            if (deck.length === 0) {
                await this.showAlert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ö–æ–ª–æ–¥–∞"!', 'üìã', '–ù–µ—Ç –∫–æ–ª–æ–¥—ã');
                return;
            }
            
            if (deck.length < 3) {
                await this.showAlert(`–í –∫–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ ${deck.length} –∫–∞—Ä—Ç—ã!\n–î–ª—è –±–æ—è –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã.`, '‚ö†Ô∏è', '–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
        const playerDeck = [];
            for (const cardName of deck) {
                
                if (userCards[cardName] && userCards[cardName].count > 0) {
                    try {
                        const battleCard = this.createBattleCard(cardName, userCards[cardName]);
                        playerDeck.push(battleCard);
                    } catch (error) {
                        console.error('Error creating battle card:', cardName, error);
                        await this.showAlert(`–û—à–∏–±–∫–∞ —Å –∫–∞—Ä—Ç–æ–π "${cardName}": ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–¥—É –∏ —Å–æ–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.`, '‚ùå', '–û—à–∏–±–∫–∞');
                    }
                }
            }

            console.log('Player deck created:', playerDeck.length, 'cards');

            if (playerDeck.length === 0) {
                await this.showAlert('–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–æ–¥—ã!', '‚ùå', '–û—à–∏–±–∫–∞');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ—ë–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!user.battlesPlayed) user.battlesPlayed = 0;
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –±–æ—Ç–∞ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            const botDeck = this.createBotDeck(playerDeck);
            
            console.log('Bot deck created:', botDeck.length, 'cards');
            console.log('Starting battle...');

            this.startBattle(playerDeck, botDeck);
        } catch (error) {
            console.error('Error starting battle:', error);
            await this.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—è: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
        }
    }

    createBattleCard(cardName, userCard) {
        const card = this.cards[cardName];
        
        if (!card) {
            console.error('Card not found:', cardName);
            console.log('Available cards:', Object.keys(this.cards));
            throw new Error(`–ö–∞—Ä—Ç–∞ "${cardName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
        const upgrades = userCard.upgrades || [];
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–∫–∏–ª–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º icon
        const skill = card.skill ? {
            name: card.skill.name,
            icon: card.skill.icon, // ‚úÖ –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            description: card.skill.description,
            cooldown: card.skill.cooldown
        } : null;
        
        console.log('‚úÖ –°–æ–∑–¥–∞–µ–º battleCard:', cardName, 'skill.icon:', skill?.icon);
        
        return {
            name: card.name,
            damage: card.damage + this.getUpgradeBonus(upgrades, 'damage'),
            health: card.health + this.getUpgradeBonus(upgrades, 'health'),
            maxHealth: card.health + this.getUpgradeBonus(upgrades, 'health'),
            defense: card.defense + this.getUpgradeBonus(upgrades, 'defense'),
            speed: card.speed + this.getUpgradeBonus(upgrades, 'speed'),
            image: card.image,
            rarity: card.rarity,
            upgrades: upgrades,
            isDead: false,
            skill: skill, // ‚ö° –°–∫–∏–ª–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º icon
            skillCooldown: 0 // –¢–µ–∫—É—â–∏–π –∫—É–ª–¥–∞—É–Ω —Å–∫–∏–ª–ª–∞
        };
    }

    generateBotName() {
        const botNames = [
            'Destroyer', 'Slayer', 'Hunter', 'Killer', 'Warrior',
            'Shadow', 'Phantom', 'Demon', 'Beast', 'Dragon',
            'Thunder', 'Storm', 'Chaos', 'Blade', 'Reaper',
            'Viper', 'Raven', 'Wolf', 'Tiger', 'Falcon',
            'Scorpion', 'Cobra', 'Hawk', 'Eagle', 'Panther',
            'Samurai', 'Ninja', 'Ronin', 'Shogun', 'Daimyo',
            'Knight', 'Paladin', 'Crusader', 'Champion', 'Gladiator',
            'Titan', 'Colossus', 'Behemoth', 'Leviathan', 'Kraken'
        ];
        
        const randomName = botNames[Math.floor(Math.random() * botNames.length)];
        const randomNumber = Math.floor(Math.random() * 9999) + 1;
        
        return `–ë–û–¢ ${randomName}${randomNumber}`;
    }

    createBotDeck(playerDeck = []) {
        console.log('Creating bot deck...');
        console.log('Available upgrades:', Object.keys(this.upgrades));
        
        const user = this.getUser();
        const battlesPlayed = user.battlesPlayed || 0;
        const isFirstBattle = battlesPlayed === 0;
        
        console.log('–ë–æ—ë–≤ —Å—ã–≥—Ä–∞–Ω–æ:', battlesPlayed);
        console.log('–ü–µ—Ä–≤—ã–π –±–æ–π (100% –ø–æ–±–µ–¥–∞):', isFirstBattle);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π —É –∏–≥—Ä–æ–∫–∞
        let totalPlayerUpgrades = 0;
        playerDeck.forEach(card => {
            totalPlayerUpgrades += (card.upgrades && card.upgrades.length) || 0;
        });
        const avgPlayerUpgrades = Math.floor(totalPlayerUpgrades / playerDeck.length);
        console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–π —É –∏–≥—Ä–æ–∫–∞: ${avgPlayerUpgrades} (–≤—Å–µ–≥–æ: ${totalPlayerUpgrades})`);
        
        const botDeck = [];
        
        // ‚öñÔ∏è –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—è –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¢–û–ß–ù–û –¢–ï –ñ–ï –∫–∞—Ä—Ç—ã, —á—Ç–æ –∏ –∏–≥—Ä–æ–∫
        if (!isFirstBattle) {
            console.log('‚öîÔ∏è –û–ë–´–ß–ù–´–ô –ë–û–ô - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ 50/50');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É –±–æ—Ç–∞ (50/50 —à–∞–Ω—Å)
            const rand = Math.random();
            const isBotStronger = rand < 0.5;
            
            // –î–ª—è 50/50 –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –±–ª–∏–∑–∫–æ –∫ 1.0
            let strengthMultiplier;
            if (isBotStronger) {
                // –ë–æ—Ç —á—É—Ç—å —Å–∏–ª—å–Ω–µ–µ: 1.05-1.15x
                strengthMultiplier = 1.05 + Math.random() * 0.1;
                console.log('üî¥ –ë–æ—Ç –ß–£–¢–¨ –°–ò–õ–¨–ù–ï–ï (x' + strengthMultiplier.toFixed(2) + ')');
            } else {
                // –ë–æ—Ç —á—É—Ç—å —Å–ª–∞–±–µ–µ: 0.90-1.00x
                strengthMultiplier = 0.90 + Math.random() * 0.1;
                console.log('üü¢ –ë–æ—Ç –ß–£–¢–¨ –°–õ–ê–ë–ï–ï (x' + strengthMultiplier.toFixed(2) + ')');
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–æ–¥—ã –∏–≥—Ä–æ–∫–∞
            playerDeck.forEach(playerCard => {
                const card = this.cards[playerCard.name];
                
                if (!card) {
                    console.error('Bot card not found:', playerCard.name);
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
                const botCard = {
                    name: card.name,
                    damage: Math.floor(playerCard.damage * strengthMultiplier),
                    health: Math.floor(playerCard.health * strengthMultiplier),
                    maxHealth: Math.floor(playerCard.maxHealth * strengthMultiplier),
                    defense: Math.min(80, Math.floor(playerCard.defense * strengthMultiplier)),
                    speed: playerCard.speed,
                    image: card.image,
                    rarity: card.rarity,
                    upgrades: playerCard.upgrades ? [...playerCard.upgrades] : [],
                    isDead: false,
                    skill: card.skill || null,
                    skillCooldown: 0
                };
                
                console.log(`Bot card ${botCard.name}: DMG ${botCard.damage}, HP ${botCard.health}, DEF ${botCard.defense}%, SPD ${botCard.speed}`);
                botDeck.push(botCard);
            });
        } else {
            // –ü–µ—Ä–≤—ã–π –±–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (—Å–ª–∞–±—ã–π –±–æ—Ç)
            console.log('üéì –ü–ï–†–í–´–ô –ë–û–ô - –±–æ—Ç –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π (100% –ø–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞)');
            
            const allCards = Object.keys(this.cards);
            const usedCards = new Set();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö –Ω–µ –≤–∑—è–ª
            playerDeck.forEach(card => usedCards.add(card.name));
            
            // –í—ã–±–∏—Ä–∞–µ–º 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –±–æ—Ç–∞
            while (botDeck.length < 3 && usedCards.size < allCards.length) {
                const randomCard = allCards[Math.floor(Math.random() * allCards.length)];
                
                if (!usedCards.has(randomCard)) {
                    usedCards.add(randomCard);
                    const card = this.cards[randomCard];
                
                    if (!card) {
                        console.error('Bot card not found:', randomCard);
                        continue;
                    }
                
                    // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–±—É—é –∫–∞—Ä—Ç—É –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—è
                    const botCard = {
                        name: card.name,
                        damage: Math.floor(card.damage * 0.2),
                        health: Math.floor(card.health * 0.2),
                        maxHealth: Math.floor(card.health * 0.2),
                        defense: Math.floor(card.defense * 0.3),
                        speed: Math.floor(card.speed * 0.5),
                        image: card.image,
                        rarity: card.rarity,
                        upgrades: [],
                        isDead: false,
                        skill: card.skill || null,
                        skillCooldown: 0
                    };
                    
                    botDeck.push(botCard);
                }
            }
        }
        
        return botDeck;
    }

    async startBattle(playerDeck, botDeck) {
        console.log('=== startBattle called ===');
        console.log('Player deck:', playerDeck);
        console.log('Bot deck:', botDeck);
        
        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ—ë–≤
            const user = this.getUser();
            if (!user.battlesPlayed) user.battlesPlayed = 0;
            const newBattlesPlayed = user.battlesPlayed + 1;
            this.saveUserSync({ battlesPlayed: newBattlesPlayed });
            
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
        const mainMenu = document.getElementById('main-menu');
        const battleScreen = document.getElementById('battle-screen');
        
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤...');
        console.log('   mainMenu:', !!mainMenu);
        console.log('   battleScreen:', !!battleScreen);
        
        if (mainMenu) {
            mainMenu.classList.remove('active');
            mainMenu.style.display = 'none';
        }
        if (battleScreen) {
            battleScreen.classList.add('active');
            battleScreen.style.display = 'flex';
            console.log('‚úÖ –≠–∫—Ä–∞–Ω –±–æ—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.error('‚ùå battle-screen –ù–ï –ù–ê–ô–î–ï–ù!');
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞
        const botName = this.generateBotName();

        this.battleState = {
            playerDeck,
            botDeck,
            turn: 0,
            round: 1,
            isPlayerTurn: true,
            playerName: user.nickname || user.username,
            botName: botName,
            inProgress: true,
            lastPlayerCard: null,  // –ö–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª –∏–≥—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
            lastBotCard: null,      // –ö–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª –±–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
            // üîÆ –°–∏—Å—Ç–µ–º–∞ —Ä—É–Ω
            playerRune: this.generateRune(),
            botRune: this.generateRune(),
            runeUsedThisTurn: false,
            invisibleCards: [], // –ö–∞—Ä—Ç—ã —Å —Ä—É–Ω–æ–π –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏
            shieldedCards: [],  // –ö–∞—Ä—Ç—ã —Å —Ä—É–Ω–æ–π —â–∏—Ç–∞
            // ‚ö° –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–ª–ª–æ–≤
            skillCooldowns: {}, // –ö—É–ª–¥–∞—É–Ω—ã —Å–∫–∏–ª–ª–æ–≤ {cardName: roundsLeft}
            frozenCards: [],    // –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (Cold Snap / Frostbite)
            fearedCards: []     // –ö–∞—Ä—Ç—ã –≤ —Å—Ç—Ä–∞—Ö–µ (Requiem)
        };

            console.log('Battle state set, rendering battle...');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≤—ã–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            this.saveBattleState();

            // –ú—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è

        this.renderBattle();
            console.log('Battle rendered, starting interactive battle...');
            
        // üîÆ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä—É–Ω—ã —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        console.log('üîÆ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—è');
        if (this.battleState.playerRune) {
            this.renderPlayerRune();
            console.log('‚úÖ –†—É–Ω–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞:', this.battleState.playerRune.name);
        }
        if (this.battleState.botRune) {
            this.renderBotRune();
            console.log('‚úÖ –†—É–Ω–∞ –±–æ—Ç–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞:', this.battleState.botRune.name);
        }
        
        this.startInteractiveBattle();
        } catch (error) {
            console.error('Error in startBattle:', error);
            await this.showAlert('–û—à–∏–±–∫–∞ –≤ –±–æ—é: ' + error.message, '‚ùå', '–û—à–∏–±–∫–∞');
        }
    }

    saveBattleState() {
        if (this.battleState && this.battleState.inProgress) {
            localStorage.setItem('currentBattle', JSON.stringify(this.battleState));
            localStorage.setItem('battleStateTimestamp', Date.now().toString());
            console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (—Ä–∞—É–Ω–¥:', this.battleState.round, ')');
        }
    }

    loadBattleState() {
        const saved = localStorage.getItem('currentBattle');
        const savedTimestamp = localStorage.getItem('battleStateTimestamp');
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–æ–π...');
        console.log('   saved:', !!saved);
        console.log('   savedTimestamp:', savedTimestamp);
        
        if (saved) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
                if (savedTimestamp) {
                    const age = Date.now() - parseInt(savedTimestamp);
                    const hours = age / (1000 * 60 * 60);
                    
                    console.log('‚è∞ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –±–æ—è:', hours.toFixed(1), '—á–∞—Å–æ–≤');
                    
                    if (hours > 24) {
                        console.log('‚è∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–æ–π —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –æ—á–∏—â–∞–µ–º');
                        localStorage.removeItem('currentBattle');
                        localStorage.removeItem('battleStateTimestamp');
                        return false;
                    }
                }
                
                this.battleState = JSON.parse(saved);
                if (this.battleState && this.battleState.inProgress) {
                    console.log('‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ô –ë–û–ô! ‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è');
                    console.log('   –†–∞—É–Ω–¥:', this.battleState.round);
                    console.log('   –•–æ–¥ –∏–≥—Ä–æ–∫–∞:', this.battleState.isPlayerTurn);
                    console.log('   –ò–≥—Ä–æ–∫:', this.battleState.playerName);
                    console.log('   –ë–æ—Ç:', this.battleState.botName);
                    
                    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º skill.icon —É –≤—Å–µ—Ö –∫–∞—Ä—Ç –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    this.updateBattleCardsSkills(this.battleState.playerDeck);
                    this.updateBattleCardsSkills(this.battleState.botDeck);
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–π
                    const mainMenu = document.getElementById('main-menu');
                    const battleScreen = document.getElementById('battle-screen');
                    
                    if (mainMenu) {
                        mainMenu.classList.remove('active');
                        mainMenu.style.display = 'none';
                    }
                    
                    if (battleScreen) {
                        battleScreen.classList.add('active');
                        battleScreen.style.display = 'flex';
                    }
                    
                    console.log('üì∫ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω –±–æ—è');
                    
                    this.renderBattle();
                    
                    console.log('üéÆ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π...');
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π
                    if (this.battleState.isPlayerTurn) {
                        console.log('üë§ –•–æ–¥ –∏–≥—Ä–æ–∫–∞');
                        this.startPlayerTurn();
                    } else {
                        console.log('ü§ñ –•–æ–¥ –±–æ—Ç–∞');
                        this.startBotTurn();
                    }
                    
                    console.log('‚úÖ –ë–æ–π —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
                    return true;
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—è:', e);
                console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π battleState');
                localStorage.removeItem('currentBattle');
                localStorage.removeItem('battleStateTimestamp');
            }
        }
        
        console.log('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –±–æ—è');
        return false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å–∫–∏–ª–ª–æ–≤ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
    updateBattleCardsSkills(deck) {
        if (!deck || !Array.isArray(deck)) return;
        
        deck.forEach(card => {
            if (card && card.name && this.cards[card.name]) {
                const actualCard = this.cards[card.name];
                
                // –û–±–Ω–æ–≤–ª—è–µ–º skill –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if (actualCard.skill) {
                    card.skill = {
                        name: actualCard.skill.name,
                        icon: actualCard.skill.icon, // ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                        description: actualCard.skill.description,
                        cooldown: actualCard.skill.cooldown
                    };
                    console.log(`‚úÖ –û–±–Ω–æ–≤–∏–ª–∏ skill –¥–ª—è ${card.name}:`, card.skill.icon);
                } else if (card.skill) {
                    // –£ –∫–∞—Ä—Ç—ã –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–∫–∏–ª–ª–∞ - —É–±–∏—Ä–∞–µ–º
                    card.skill = null;
                    console.log(`‚ö†Ô∏è –£–±—Ä–∞–ª–∏ skill —É ${card.name}`);
                }
            }
        });
    }

    checkAndCleanOldBattle() {
        const savedTimestamp = localStorage.getItem('battleStateTimestamp');
        if (savedTimestamp) {
            const age = Date.now() - parseInt(savedTimestamp);
            const hours = age / (1000 * 60 * 60);
            
            if (hours > 24) {
                console.log('‚è∞ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π battleState (–≤–æ–∑—Ä–∞—Å—Ç:', hours.toFixed(1), '—á–∞—Å–æ–≤)');
                localStorage.removeItem('currentBattle');
                localStorage.removeItem('battleStateTimestamp');
            }
        }
    }
    
    clearBattleState() {
        localStorage.removeItem('currentBattle');
        localStorage.removeItem('battleStateTimestamp');
        if (this.battleState) {
            this.battleState.inProgress = false;
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä—É–Ω
            this.battleState.invisibleCards = [];
            this.battleState.shieldedCards = [];
            this.battleState.wateredCards = [];
            this.battleState.runeDurations = {};
            this.battleState.frozenCards = [];
            this.battleState.fearedCards = [];
        }
        // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä—É–Ω
        document.querySelectorAll('.invisible-card').forEach(el => el.classList.remove('invisible-card'));
        document.querySelectorAll('.shielded-card').forEach(el => el.classList.remove('shielded-card'));
        document.querySelectorAll('.watered-card').forEach(el => el.classList.remove('watered-card'));
        document.querySelectorAll('.has-rune-effect').forEach(el => el.classList.remove('has-rune-effect'));
        document.querySelectorAll('.rune-indicator').forEach(el => el.remove());
        console.log('üóëÔ∏è BattleState –æ—á–∏—â–µ–Ω');
    }
    
    // ===== –ö–†–ê–°–ò–í–´–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====
    
    showAlert(message, icon = '‚ÑπÔ∏è', title = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ') {
        return new Promise((resolve) => {
            // –°–æ–∑–¥–∞–µ–º overlay
            const overlay = document.createElement('div');
            overlay.className = 'custom-modal-overlay';
            
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.createElement('div');
            modal.className = 'custom-modal alert';
            modal.innerHTML = `
                <div class="custom-modal-icon">${icon}</div>
                <div class="custom-modal-title">${title}</div>
                <div class="custom-modal-message">${message}</div>
                <div class="custom-modal-buttons">
                    <button class="custom-modal-btn custom-modal-btn-primary">OK</button>
                </div>
            `;
            
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeModal = () => {
                overlay.style.opacity = '0';
                modal.style.transform = 'scale(0.8)';
                modal.style.opacity = '0';
                
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve();
                }, 300);
            };
            
            // –ö–Ω–æ–ø–∫–∞ OK
            const okBtn = modal.querySelector('.custom-modal-btn-primary');
            okBtn.addEventListener('click', closeModal);
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) closeModal();
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
            const escHandler = (e) => {
                if (e.key === 'Escape') {
                    document.removeEventListener('keydown', escHandler);
                    closeModal();
                }
            };
            document.addEventListener('keydown', escHandler);
        });
    }
    
    showConfirm(message, icon = '‚ùì', title = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ') {
        return new Promise((resolve) => {
            // –°–æ–∑–¥–∞–µ–º overlay
            const overlay = document.createElement('div');
            overlay.className = 'custom-modal-overlay';
            
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.createElement('div');
            modal.className = 'custom-modal confirm';
            modal.innerHTML = `
                <div class="custom-modal-icon">${icon}</div>
                <div class="custom-modal-title">${title}</div>
                <div class="custom-modal-message">${message}</div>
                <div class="custom-modal-buttons">
                    <button class="custom-modal-btn custom-modal-btn-secondary cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                    <button class="custom-modal-btn custom-modal-btn-primary confirm-btn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                </div>
            `;
            
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
            const closeModal = (result) => {
                overlay.style.opacity = '0';
                modal.style.transform = 'scale(0.8)';
                modal.style.opacity = '0';
                
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    resolve(result);
                }, 300);
            };
            
            // –ö–Ω–æ–ø–∫–∏
            const confirmBtn = modal.querySelector('.confirm-btn');
            const cancelBtn = modal.querySelector('.cancel-btn');
            
            confirmBtn.addEventListener('click', () => closeModal(true));
            cancelBtn.addEventListener('click', () => closeModal(false));
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) closeModal(false);
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
            const escHandler = (e) => {
                if (e.key === 'Escape') {
                    document.removeEventListener('keydown', escHandler);
                    closeModal(false);
                }
            };
            document.addEventListener('keydown', escHandler);
        });
    }

    updateRoundDisplay() {
        const roundEl = document.getElementById('battle-round-num');
        if (roundEl && this.battleState) {
            roundEl.textContent = this.battleState.round;
            console.log('üìä –°—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:', this.battleState.round);
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç battle-round-num –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
    }

    renderBattle() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        this.updateBattleNames();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        this.updateRoundDisplay();
        
        // üîÆ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä—É–Ω—ã
        if (this.battleState.playerRune) {
            this.renderPlayerRune();
        }
        if (this.battleState.botRune) {
            this.renderBotRune();
        }
        
        this.renderDeck('player-cards', this.battleState.playerDeck, true);
        this.renderDeck('enemy-cards', this.battleState.botDeck, false);
    }

    updateBattleNames() {
        // –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ V2 –Ω–µ—Ç .side-label, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ ID
        const playerNameBattle = document.getElementById('player-name-battle');
        const botNameBattle = document.getElementById('bot-name-battle');
        const playerAvatarBattle = document.getElementById('player-avatar-battle');
        const botAvatarBattle = document.getElementById('bot-avatar-battle');
        
        if (playerNameBattle) {
            playerNameBattle.textContent = this.battleState.playerName || '–í–´';
        }
        
        if (botNameBattle) {
            botNameBattle.textContent = this.battleState.botName || '–ü–†–û–¢–ò–í–ù–ò–ö';
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏
        if (playerAvatarBattle) {
            const user = this.getUser();
            playerAvatarBattle.src = user.avatar || this.avatars[0] || 'https://i.imgur.com/EbsmHMK.jpg';
        }
        
        if (botAvatarBattle) {
            // –î–ª—è –æ–Ω–ª–∞–π–Ω-–±–æ—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω - —Å–ª—É—á–∞–π–Ω—ã–π
            if (this.battleState.isOnline && this.battleState.opponentAvatar) {
                botAvatarBattle.src = this.battleState.opponentAvatar;
            } else {
                const botAvatarIndex = Math.floor(Math.random() * this.avatars.length);
                botAvatarBattle.src = this.avatars[botAvatarIndex] || 'https://i.imgur.com/EbsmHMK.jpg';
            }
        }
    }

    renderDeck(containerId, deck, isPlayer) {
        const container = document.getElementById(containerId);
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }
        
        container.innerHTML = '';

        deck.forEach((card, index) => {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
            if (!this.validateCard(card)) return;
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
            const cardElement = this.createBattleCardElement(card, isPlayer);
            if (cardElement) {
                container.appendChild(cardElement);
            }
        });
    }
    
    validateCard(card) {
        if (!card || !card.name || card.damage === undefined) {
            console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ä—Ç–∞:', card);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP
        if (card.health === undefined || card.maxHealth === undefined) {
            console.warn('‚ö†Ô∏è –£ –∫–∞—Ä—Ç—ã –Ω–µ—Ç HP, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:', card.name);
            card.health = card.health || 100;
            card.maxHealth = card.maxHealth || 100;
        }
        
        return true;
    }
    
    createBattleCardElement(card, isPlayer) {
        const cardDiv = document.createElement('div');
        const isDead = card.isDead || card.health <= 0;
        
        // –ö–ª–∞—Å—Å—ã –∫–∞—Ä—Ç—ã
        const cardClasses = this.getBattleCardClasses(card, isDead);
        cardDiv.className = cardClasses;
        cardDiv.dataset.cardName = card.name;
        
        // HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç—ã
        cardDiv.innerHTML = this.getBattleCardHTML(card, isPlayer, isDead);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.attachBattleCardHandlers(cardDiv, card, isPlayer, isDead);
        
        return cardDiv;
    }
    
    getBattleCardClasses(card, isDead) {
        let classes = `battle-card-new rarity-border-${card.rarity}`;
        
        if (isDead) classes += ' dead';
        
        // –°—Ç–∞—Ç—É—Å—ã –æ—Ç —Å–∫–∏–ª–ª–æ–≤
        if (this.battleState.frozenCards && this.battleState.frozenCards.includes(card.name)) {
            classes += ' frozen-status';
        }
        if (this.battleState.fearedCards && this.battleState.fearedCards.includes(card.name)) {
            classes += ' feared-status';
        }
        
        return classes;
    }
    
    getBattleCardHTML(card, isPlayer, isDead) {
        const healthPercentage = Math.max(0, (card.health / card.maxHealth) * 100);
        const upgradeCount = card.upgrades ? card.upgrades.length : 0;
        
        // –ó–≤–µ–∑–¥—ã —É–ª—É—á—à–µ–Ω–∏–π
        const starsHtml = this.getUpgradeStarsHTML(upgradeCount);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç—ã
        const statsHtml = this.getBattleCardStatsHTML(card);
        
        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∏–ª–ª–∞
        const skillButtonHtml = this.getSkillButtonHTML(card, isPlayer, isDead);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è —Ü–≤–µ—Ç–∞ –∏–º–µ–Ω–∏
        const rarityClass = `rarity-${card.rarity}`;
        
        return `
            <div class="battle-card-image" style="background-image: url('${card.image}')"></div>
            <div class="battle-card-info">
                <div class="battle-card-name ${rarityClass}">${card.name}</div>
                ${starsHtml}
                ${statsHtml}
                <div class="battle-health-bar">
                    <div class="battle-health-fill" style="width: ${healthPercentage}%"></div>
                    <div class="battle-health-text">${Math.max(0, Math.floor(card.health))}/${card.maxHealth}</div>
                </div>
            </div>
            ${skillButtonHtml}
            ${isDead ? '<div class="battle-dead-overlay"><div class="skull">üíÄ</div></div>' : ''}
        `;
    }
    
    getUpgradeStarsHTML(upgradeCount) {
        return `<div class="battle-card-stars">
            ${Array(3).fill(0).map((_, i) => 
                `<span class="star ${i < upgradeCount ? 'filled' : 'empty'}">‚òÖ</span>`
            ).join('')}
        </div>`;
    }
    
    getBattleCardStatsHTML(card) {
        return `<div class="battle-card-stats">
            <div class="stat-mini"><span class="stat-icon">‚öîÔ∏è</span>${card.damage}</div>
            <div class="stat-mini"><span class="stat-icon">‚ù§Ô∏è</span>${card.maxHealth}</div>
            <div class="stat-mini"><span class="stat-icon">üõ°Ô∏è</span>${card.defense}%</div>
            <div class="stat-mini"><span class="stat-icon">‚ö°</span>${card.speed}</div>
        </div>`;
    }
    
    getSkillButtonHTML(card, isPlayer, isDead) {
        const hasSkill = card.skill && (card.rarity === 'epic' || card.rarity === 'legendary');
        if (!hasSkill || !isPlayer || isDead) return '';
        
        const skillOnCooldown = card.skillCooldown > 0;
        const cooldownText = skillOnCooldown ? `(${card.skillCooldown})` : '';
        
        return `
            <button class="skill-btn ${skillOnCooldown ? 'on-cooldown' : ''}" 
                    data-card="${card.name}" 
                    ${skillOnCooldown ? 'disabled' : ''}>
                <img src="${card.skill.icon}" alt="${card.skill.name}"
                     onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.nextElementSibling.style.display='block';">
                ${cooldownText ? '<span class="skill-cooldown">' + cooldownText + '</span>' : ''}
                <span class="skill-icon-fallback" style="display: none;">‚ö°</span>
                <div class="skill-tooltip">
                    <strong>${card.skill.name}</strong><br>
                    ${card.skill.description}
                </div>
            </button>
        `;
    }
    
    attachBattleCardHandlers(cardDiv, card, isPlayer, isDead) {
        const hasSkill = card.skill && (card.rarity === 'epic' || card.rarity === 'legendary');
        const skillOnCooldown = card.skillCooldown > 0;
        
        if (hasSkill && isPlayer && !isDead && !skillOnCooldown) {
            const skillBtn = cardDiv.querySelector('.skill-btn');
            if (skillBtn) {
                skillBtn.onclick = (e) => {
                    e.stopPropagation();
                    console.log('‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞:', card.skill.name, '–æ—Ç', card.name);
                    this.useSkill(card);
                };
            }
        }
    }

    startInteractiveBattle() {
        this.battleTurn = 0;
        this.currentPlayerAttacker = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        this.isPlayerTurn = true;
        this.battleEnded = false;
        this.selectedEnemyCard = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤
        document.getElementById('battle-round-num').textContent = 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—ã
        this.setupBattleCardListeners();
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        this.startPlayerTurn();
    }

    setupBattleCardListeners() {
        console.log('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç –≤ –±–æ—é');
        // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ showCardSelection –∏ showTargetSelection
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    }

    startPlayerTurn() {
        if (this.battleEnded) return;
        
        console.log('üë§ –ù–∞—á–∞–ª–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞');
        
        this.isPlayerTurn = true;
        this.selectedEnemyCard = null;
        
        // üßπ –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä—É–Ω
        this.clearRuneEffects();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä—É–Ω—ã
        this.battleState.runeUsedThisTurn = false;
        
        // ‚ö° –£–º–µ–Ω—å—à–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã —Å–∫–∏–ª–ª–æ–≤
        this.decreaseSkillCooldowns();
        
        // –í—ã–¥–∞–µ–º –Ω–æ–≤—É—é —Ä—É–Ω—É –∏–≥—Ä–æ–∫—É
        this.battleState.playerRune = this.generateRune();
        console.log('üîÆ –ò–≥—Ä–æ–∫—É –≤—ã–ø–∞–ª–∞ —Ä—É–Ω–∞:', this.battleState.playerRune.name);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä—É–Ω—É
        this.renderPlayerRune();
        
        // –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        const alivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
        
        if (alivePlayerCards.length === 0) {
            // –í—Å–µ –∫–∞—Ä—Ç—ã –º–µ—Ä—Ç–≤—ã - –∫–æ–Ω–µ—Ü –±–æ—è
            this.checkBattleEnd();
            return;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã - —É–±–∏—Ä–∞–µ–º —Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ –∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ
        const availableCards = alivePlayerCards.filter(card => {
            const notOnCooldown = !this.battleState.lastPlayerCard || card.name !== this.battleState.lastPlayerCard.name;
            const notFrozen = !this.battleState.frozenCards.includes(card.name);
            const notFeared = !this.battleState.fearedCards.includes(card.name);
            
            if (!notFrozen) console.log('‚ùÑÔ∏è –ö–∞—Ä—Ç–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞:', card.name);
            if (!notFeared) console.log('üò± –ö–∞—Ä—Ç–∞ –≤ —Å—Ç—Ä–∞—Ö–µ:', card.name);
            
            return notOnCooldown && notFrozen && notFeared;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç (–≤—Å–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
        if (availableCards.length === 0 && alivePlayerCards.length > 0) {
            console.log('‚è≥ –í—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ (–∂–∏–≤—ã—Ö:', alivePlayerCards.length, '), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞');
            this.showBattleHint('–í—Å–µ –≤–∞—à–∏ –∫–∞—Ä—Ç—ã –æ—Ç–¥—ã—Ö–∞—é—Ç! –•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastPlayerCard —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            this.battleState.lastPlayerCard = null;
            
            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –±–æ—Ç—É
        setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-–±–æ–π
                    if (this.battleState.isOnline && window.onlineBattlesSystem) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω: –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞, –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É');
                        window.onlineBattlesSystem.endPlayerTurn();
                        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º startBotTurn!
                    } else {
                        // –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω
                        this.startBotTurn();
                    }
                }
            }, 2000);
            return;
        }
        
        const cardsToChoose = availableCards;
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('selected', 'target-available', 'hint-glow', 'used-last-round');
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        if (this.battleState.lastPlayerCard) {
            const usedCardElement = document.querySelector(`#player-cards .battle-card-new[data-card-name="${this.battleState.lastPlayerCard.name}"]`);
            if (usedCardElement && availableCards.length > 0) {
                usedCardElement.classList.add('used-last-round');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–Ω
        this.renderPlayerRune();
        this.renderBotRune();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É
        this.showCardSelection(cardsToChoose);
    }
    
    showCardSelection(availableCards) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showBattleHint('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏');
        
        console.log('üü¢ –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º', availableCards.length, '–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç');
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        availableCards.forEach(card => {
            // –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ V2 –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –≤ #player-cards
            const cardElement = document.querySelector(`#player-cards .battle-card-new[data-card-name="${card.name}"]`);
            if (cardElement) {
                cardElement.classList.add('hint-glow');
                cardElement.style.pointerEvents = 'auto';
                cardElement.style.cursor = 'pointer';
                
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:', card.name);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
                cardElement.onclick = () => {
                    console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ –∏–≥—Ä–æ–∫–∞:', card.name);
                    this.selectPlayerAttacker(card);
                };
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', card.name);
            }
        });
    }
    
    selectPlayerAttacker(selectedCard) {
        console.log('üü° –ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∞—Ç–∞–∫–∏:', selectedCard.name);
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        this.currentAttacker = selectedCard;
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.querySelectorAll('#player-cards .battle-card-new').forEach(c => {
            c.classList.remove('hint-glow');
            c.style.pointerEvents = 'none';
            c.style.cursor = '';
            c.onclick = null;
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        const attackerElement = document.querySelector(`#player-cards .battle-card-new[data-card-name="${selectedCard.name}"]`);
        if (attackerElement) {
            attackerElement.classList.add('selected');
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞ –∂–µ–ª—Ç—ã–º');
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏
        this.showTargetSelection(selectedCard);
    }
    
    showTargetSelection(attackerCard) {
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–≤–∏–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã)
        // –ù–µ–≤–∏–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –ú–û–ì–£–¢ –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏—Ö –Ω–µ–ª—å–∑—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        // –í–ê–ñ–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—É-–∞—Ç–∞–∫—É—é—â–µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –±–∏—Ç—å —Å–∞–º —Å–µ–±—è!
        const aliveEnemyCards = this.battleState.botDeck.filter(card => {
            return !card.isDead && card.health > 0 && card.name !== attackerCard.name;
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ç–∞–∫
        const attacksCount = Math.max(1, Math.floor(attackerCard.speed / 10));
        const attackText = attacksCount > 1 ? ` (${attacksCount} –∞—Ç–∞–∫–∏)` : '';
        this.showBattleHint(`${attackerCard.name}${attackText} –∞—Ç–∞–∫—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å.`);
        
        console.log('üéØ –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º', aliveEnemyCards.length, '—Ü–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ)');
        
        aliveEnemyCards.forEach(enemyCard => {
            // –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ V2 –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ #enemy-cards
            const enemyElement = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${enemyCard.name}"]`);
            if (enemyElement) {
                enemyElement.classList.add('target-available');
                enemyElement.style.pointerEvents = 'auto';
                enemyElement.style.cursor = 'crosshair';
                
                console.log('‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞:', enemyCard.name);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Ü–µ–ª—å
                enemyElement.onclick = () => {
                    console.log('üéØ –ö–ª–∏–∫ –ø–æ —Ü–µ–ª–∏:', enemyCard.name);
                    this.selectTarget(enemyCard);
                };
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç —Ü–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', enemyCard.name);
            }
        });
    }

    selectTarget(targetCard) {
        console.log('üéØ selectTarget –≤—ã–∑–≤–∞–Ω, currentAttacker:', this.currentAttacker?.name);
        console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª—å:', targetCard.name);
        
        if (!this.currentAttacker) {
            console.error('‚ùå currentAttacker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
            return;
        }
        
        // –ó–≤—É–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        this.soundSystem.playSound('whoosh', 0.5);
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ü–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('target-available', 'hint-glow', 'selected');
            c.style.pointerEvents = '';
            c.style.cursor = '';
            c.onclick = null;
        });
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.hideBattleHint();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        const attacksCount = Math.max(1, Math.floor(this.currentAttacker.speed / 10));
        
        console.log('‚öîÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º', attacksCount, '–∞—Ç–∞–∫(–∏)');
        
        this.performMultipleAttacks(this.currentAttacker, targetCard, attacksCount);
    }
    
    performMultipleAttacks(attacker, initialTarget, attacksCount) {
        console.log(`‚öîÔ∏è performMultipleAttacks: ${attacker.name} ‚Üí ${initialTarget.name}, ${attacksCount} –∞—Ç–∞–∫(–∏)`);
        
        let attackIndex = 0;
        let currentTarget = initialTarget;
        
        const performNextAttack = () => {
            if (attackIndex >= attacksCount) {
                // –í—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                console.log('‚úÖ –í—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º lastPlayerCard:', attacker.name);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏
                this.battleState.lastPlayerCard = { name: attacker.name };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
                this.saveBattleState();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-–±–æ–π
                if (this.battleState.isOnline && window.onlineBattlesSystem) {
                    console.log('üåê –û–Ω–ª–∞–π–Ω-–±–æ–π: –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É');
                    window.onlineBattlesSystem.endPlayerTurn();
                    
                    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º startBotTurn –≤ –æ–Ω–ª–∞–π–Ω-–±–æ—é!
                    // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ - —Ä–µ–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫, –∞ –Ω–µ –±–æ—Ç
                    return;
                }
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ö–æ–¥—É –±–æ—Ç–∞ (–¢–û–õ–¨–ö–û –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-–±–æ–µ–≤)
                console.log('ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ö–æ–¥—É –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫...');
            setTimeout(() => {
                    if (!this.checkBattleEnd()) {
                        this.startBotTurn();
                    }
            }, 1000);
                return;
            }
            
            console.log(`‚öîÔ∏è –ê—Ç–∞–∫–∞ ${attackIndex + 1} –∏–∑ ${attacksCount}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –µ—â–µ –∂–∏–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é
            if (currentTarget.isDead || currentTarget.health <= 0) {
                const aliveEnemies = this.battleState.botDeck.filter(c => !c.isDead && c.health > 0);
                if (aliveEnemies.length === 0) {
                    // –í—Å–µ –≤—Ä–∞–≥–∏ –º–µ—Ä—Ç–≤—ã
                    this.checkBattleEnd();
                    return;
                }
                currentTarget = aliveEnemies[0]; // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
            this.performAttack(attacker, currentTarget, false);
            
            attackIndex++;
            
            // –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                if (!this.checkBattleEnd()) {
                    performNextAttack();
                }
            }, 1000);
        };
        
        performNextAttack();
    }

    startBotTurn() {
        if (this.battleEnded) return;
        
        // ‚ö†Ô∏è –í –æ–Ω–ª–∞–π–Ω-–±–æ–µ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞!
        if (this.battleState.isOnline) {
            console.log('‚ö†Ô∏è startBotTurn –≤—ã–∑–≤–∞–Ω –≤ –æ–Ω–ª–∞–π–Ω-–±–æ—é! –≠—Ç–æ –æ—à–∏–±–∫–∞!');
            console.log('üåê –í –æ–Ω–ª–∞–π–Ω-–±–æ—é –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç —Å–≤–æ–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏');
            return;
        }
        
        console.log('ü§ñ –•–û–î –ë–û–¢–ê –ù–ê–ß–ê–õ–°–Ø (–æ—Ñ—Ñ–ª–∞–π–Ω-–±–æ–π)');
        
        this.isPlayerTurn = false;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showBattleHint('–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞... –û–∂–∏–¥–∞–π—Ç–µ');
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('selected', 'target-available', 'hint-glow', 'used-last-round');
            c.style.pointerEvents = 'none';
            c.style.cursor = '';
            c.onclick = null;
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
        if (this.battleState.lastBotCard) {
            const usedCardElement = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${this.battleState.lastBotCard.name}"]`);
            if (usedCardElement) {
                usedCardElement.classList.add('used-last-round');
                console.log('‚è≥ –ö–∞—Ä—Ç–∞ –±–æ—Ç–∞ —Å –∫—É–ª–¥–∞—É–Ω–æ–º:', this.battleState.lastBotCard.name);
            }
        }
        
        // üîÆ –í—ã–¥–∞–µ–º –Ω–æ–≤—É—é —Ä—É–Ω—É –±–æ—Ç—É
        this.battleState.botRune = this.generateRune();
        console.log('üîÆ –ë–æ—Ç—É –≤—ã–ø–∞–ª–∞ —Ä—É–Ω–∞:', this.battleState.botRune.name);
        this.renderBotRune();
        
        // üîÆ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä—É–Ω—É (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
        setTimeout(() => {
            this.botUseRune();
        }, 800);
        
        // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            this.selectBotAttacker();
        }, 1600);
    }
    
    botUseRune() {
        const rune = this.battleState.botRune;
        if (!rune) return;
        
        const aliveBotCards = this.battleState.botDeck.filter(card => !card.isDead && card.health > 0);
        if (aliveBotCards.length === 0) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ª–∏ –±–æ—Ç —Ö–æ–¥ (–≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ/–∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã/–≤ —Å—Ç—Ä–∞—Ö–µ)
        const availableBotCards = aliveBotCards.filter(card => {
            const notOnCooldown = !this.battleState.lastBotCard || card.name !== this.battleState.lastBotCard.name;
            const notFrozen = !this.battleState.frozenCards.includes(card.name);
            const notFeared = !this.battleState.fearedCards.includes(card.name);
            return notOnCooldown && notFrozen && notFeared;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç - —Ä—É–Ω—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if (availableBotCards.length === 0 && aliveBotCards.length > 0) {
            console.log('‚è≥ –ë–æ—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥, –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É–Ω—É');
                return;
            }
        
        let targetCard = null;
        
        if (rune.type === 'invisibility') {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ —Å–∞–º—É—é —Å–ª–∞–±—É—é –∫–∞—Ä—Ç—É
            targetCard = aliveBotCards.reduce((weakest, card) => 
                card.health < weakest.health ? card : weakest
            );
            this.battleState.invisibleCards.push(targetCard.name);
            this.battleState.runeDurations[targetCard.name] = 1; // 1 —Ä–∞—É–Ω–¥
            console.log('üëª –ë–æ—Ç —Å–¥–µ–ª–∞–ª –∫–∞—Ä—Ç—É –Ω–µ–≤–∏–¥–∏–º–æ–π –Ω–∞ 1 —Ä–∞—É–Ω–¥:', targetCard.name);
            
            const cardEl = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${targetCard.name}"]`);
            if (cardEl) {
                this.showRuneActivationAnimation(cardEl, 'invisibility');
                cardEl.classList.add('invisible-card', 'has-rune-effect', 'invisibility');
                cardEl.style.opacity = '0.5';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                this.addRuneIndicator(cardEl, 'invisibility', 'üëª –ù–ï–í–ò–î–ò–ú–û–°–¢–¨');
            }
        } else if (rune.type === 'shield') {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º HP
            targetCard = aliveBotCards.reduce((strongest, card) => 
                card.health > strongest.health ? card : strongest
            );
            this.battleState.shieldedCards.push(targetCard.name);
            this.battleState.runeDurations[targetCard.name] = 1; // 1 —Ä–∞—É–Ω–¥
            targetCard.tempDefense = (targetCard.tempDefense || 0) + 40;
            console.log('üõ°Ô∏è –ë–æ—Ç –¥–∞–ª —â–∏—Ç –∫–∞—Ä—Ç–µ –Ω–∞ 1 —Ä–∞—É–Ω–¥:', targetCard.name);
            
            const cardEl = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${targetCard.name}"]`);
            if (cardEl) {
                this.showRuneActivationAnimation(cardEl, 'shield');
                cardEl.classList.add('shielded-card', 'has-rune-effect', 'shield');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                this.addRuneIndicator(cardEl, 'shield', 'üõ°Ô∏è –©–ò–¢');
            }
        } else if (rune.type === 'water') {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ —Ä–∞–Ω–µ–Ω—É—é –∫–∞—Ä—Ç—É
            const damagedCards = aliveBotCards.filter(card => card.health < card.maxHealth);
            if (damagedCards.length > 0) {
                targetCard = damagedCards.reduce((mostDamaged, card) => 
                    (card.maxHealth - card.health) > (mostDamaged.maxHealth - mostDamaged.health) ? card : mostDamaged
                );
                const healAmount = Math.floor(targetCard.maxHealth * 0.2);
                targetCard.health = Math.min(targetCard.maxHealth, targetCard.health + healAmount);
                console.log('üíß –ë–æ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª HP –∫–∞—Ä—Ç–µ:', targetCard.name, '+', healAmount);
                
                this.renderBattle();
            }
        }
        
        if (targetCard) {
            this.showBattleHint(`–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${rune.name} –Ω–∞ ${targetCard.name}!`);
            setTimeout(() => this.showBattleHint('–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞... –û–∂–∏–¥–∞–π—Ç–µ'), 2000);
        }
    }

    selectBotAttacker() {
        const alivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
        const aliveBotCards = this.battleState.botDeck.filter(card => !card.isDead && card.health > 0);
        
        if (aliveBotCards.length === 0 || alivePlayerCards.length === 0) {
            this.checkBattleEnd();
                return;
            }
        
        // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏ (–Ω–µ —Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ –∏ –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ)
        let availableBotCards = aliveBotCards.filter(card => {
            const notOnCooldown = !this.battleState.lastBotCard || card.name !== this.battleState.lastBotCard.name;
            const notFrozen = !this.battleState.frozenCards.includes(card.name);
            const notFeared = !this.battleState.fearedCards.includes(card.name);
            
            return notOnCooldown && notFrozen && notFeared;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç (–≤—Å–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
        if (availableBotCards.length === 0 && aliveBotCards.length > 0) {
            console.log('‚è≥ –í—Å–µ –∫–∞—Ä—Ç—ã –±–æ—Ç–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ (–∂–∏–≤—ã—Ö:', aliveBotCards.length, '), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥');
            this.showBattleHint('–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ—Ç–¥—ã—Ö–∞—é—Ç! –•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastBotCard —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            this.battleState.lastBotCard = null;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ (–±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥)
            const oldRound = this.battleState.round;
            this.battleState.round++;
            console.log('üìä –†–∞—É–Ω–¥ —É–≤–µ–ª–∏—á–µ–Ω (–ø—Ä–æ–ø—É—Å–∫ –±–æ—Ç–∞):', oldRound, '‚Üí', this.battleState.round);
            
            // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—É–Ω –ü–û–°–õ–ï –ü–û–õ–ù–û–ì–û –†–ê–£–ù–î–ê
            this.decreaseRuneDurations();
            
            this.updateRoundDisplay();
            this.saveBattleState();
            
            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
            setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    this.startPlayerTurn();
                }
            }, 2000);
            return;
        }
        
        console.log('ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ä—Ç –±–æ—Ç–∞:', availableBotCards.length);
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        let attackerCard = availableBotCards[Math.floor(Math.random() * availableBotCards.length)];
        
        // ‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ —Å–æ —Å–∫–∏–ª–ª–æ–º –Ω–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ (30% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
        if (Math.random() < 0.3) {
            const cardsWithSkill = availableBotCards.filter(c => c.skill && c.skillCooldown === 0);
            if (cardsWithSkill.length > 0) {
                attackerCard = cardsWithSkill[Math.floor(Math.random() * cardsWithSkill.length)];
                console.log('‚ö° –ë–æ—Ç —Ä–µ—à–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª:', attackerCard.skill.name);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∏–ª–ª –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∞—Ç–∞–∫–∏
                setTimeout(() => {
                    this.botUseSkill(attackerCard);
                }, 800);
                return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –∞—Ç–∞–∫—É
            }
        }
        
        console.log('üü° –ë–æ—Ç –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏:', attackerCard.name);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –±–æ—Ç–∞
        const attackerElement = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${attackerCard.name}"]`);
        if (attackerElement) {
            attackerElement.classList.add('selected');
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –±–æ—Ç–∞ –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        const attacksCount = Math.max(1, Math.floor(attackerCard.speed / 10));
        const attackText = attacksCount > 1 ? ` (${attacksCount} –∞—Ç–∞–∫–∏)` : '';
        this.showBattleHint(`${attackerCard.name}${attackText} –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å...`);
        
        // –ß–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å (–∑–∞–º–µ–¥–ª–µ–Ω–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
        setTimeout(() => {
            this.selectBotTarget(attackerCard, alivePlayerCards);
        }, 1200);
    }
    
    selectBotTarget(attackerCard, alivePlayerCards) {
        console.log('üéØ –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –∏–∑', alivePlayerCards.length, '–∫–∞—Ä—Ç');
        
        // –í–ê–ñ–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—É-–∞—Ç–∞–∫—É—é—â–µ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –±–∏–ª —Å–∞–º —Å–µ–±—è!
        const validTargets = alivePlayerCards.filter(card => card.name !== attackerCard.name);
        
        if (validTargets.length === 0) {
            console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞!');
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
        const targetCard = validTargets[Math.floor(Math.random() * validTargets.length)];
        
        console.log('üî¥ –ë–æ—Ç –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å:', targetCard.name);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ü–µ–ª—å
        const targetElement = document.querySelector(`#player-cards .battle-card-new[data-card-name="${targetCard.name}"]`);
        if (targetElement) {
            targetElement.classList.add('target-available');
            console.log('‚úÖ –¶–µ–ª—å –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞ –∫—Ä–∞—Å–Ω—ã–º');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showBattleHint(`${attackerCard.name} –∞—Ç–∞–∫—É–µ—Ç ${targetCard.name}!`);
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        const attacksCount = Math.max(1, Math.floor(attackerCard.speed / 10));
        
        console.log('‚öîÔ∏è –ë–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç', attacksCount, '–∞—Ç–∞–∫(–∏)');
        
        // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
        setTimeout(() => {
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            document.querySelectorAll('.battle-card-new').forEach(c => {
                c.classList.remove('selected', 'target-available');
            });
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
            this.performBotMultipleAttacks(attackerCard, targetCard, attacksCount);
        }, 800);
    }
    
    performBotMultipleAttacks(attacker, initialTarget, attacksCount) {
        console.log(`‚öîÔ∏è performBotMultipleAttacks: ${attacker.name} ‚Üí ${initialTarget.name}, ${attacksCount} –∞—Ç–∞–∫(–∏)`);
        
        let attackIndex = 0;
        let currentTarget = initialTarget;
        
        const performNextAttack = () => {
            if (this.battleEnded) return;
            
            if (attackIndex >= attacksCount) {
                // –í—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                console.log('‚úÖ –í—Å–µ –∞—Ç–∞–∫–∏ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º lastBotCard:', attacker.name);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏
                this.battleState.lastBotCard = { name: attacker.name };
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞ (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∏–≥—Ä–æ–∫ + –±–æ—Ç = 1 —Ä–∞—É–Ω–¥)
                if (this.battleState) {
                    const oldRound = this.battleState.round;
                    this.battleState.round++;
                    console.log('üìä –†–∞—É–Ω–¥ —É–≤–µ–ª–∏—á–µ–Ω:', oldRound, '‚Üí', this.battleState.round);
                    
                    // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—É–Ω –ü–û–°–õ–ï –ü–û–õ–ù–û–ì–û –†–ê–£–ù–î–ê
                    this.decreaseRuneDurations();
                    
                    this.updateRoundDisplay();
                    this.saveBattleState();
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
                console.log('üë§ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ö–æ–¥—É –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫...');
                setTimeout(() => {
                    if (!this.checkBattleEnd()) {
                        this.startPlayerTurn();
                    }
                }, 500);
                return;
            }
            
            console.log(`‚öîÔ∏è –ê—Ç–∞–∫–∞ –±–æ—Ç–∞ ${attackIndex + 1} –∏–∑ ${attacksCount}`);
            
            const currentAlivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
            
            if (currentAlivePlayerCards.length === 0) {
                console.log('üíÄ –í—Å–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –º–µ—Ä—Ç–≤—ã');
            this.checkBattleEnd();
            return;
        }
        
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –µ—â–µ –∂–∏–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é
            if (currentTarget.isDead || currentTarget.health <= 0) {
                const newTarget = currentAlivePlayerCards[Math.floor(Math.random() * currentAlivePlayerCards.length)];
                console.log('üîÑ –¶–µ–ª—å –º–µ—Ä—Ç–≤–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è:', currentTarget.name, '‚Üí', newTarget.name);
                currentTarget = newTarget;
            }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
            this.performAttack(attacker, currentTarget, true);
        
            attackIndex++;
            
            // –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ 1.2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (!this.checkBattleEnd()) {
                    performNextAttack();
                }
            }, 1200);
        };
        
        performNextAttack();
    }

    // üîÆ ===== –°–ò–°–¢–ï–ú–ê –†–£–ù =====
    
    generateRune() {
        const runeTypes = Object.keys(this.runes);
        const randomType = runeTypes[Math.floor(Math.random() * runeTypes.length)];
        return { ...this.runes[randomType] };
    }
    
    renderPlayerRune() {
        console.log('üîÆ renderPlayerRune –≤—ã–∑–≤–∞–Ω');
        const runeContainer = document.getElementById('player-rune-container');
        console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É–Ω—ã –∏–≥—Ä–æ–∫–∞:', runeContainer ? '–Ω–∞–π–¥–µ–Ω ‚úÖ' : '–ù–ï –Ω–∞–π–¥–µ–Ω ‚ùå');
        
        if (!runeContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É–Ω—ã –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            console.log('üîç –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å id –Ω–∞ —ç–∫—Ä–∞–Ω–µ:', 
                Array.from(document.querySelectorAll('[id]')).map(el => el.id)
            );
            return;
        }
        
        const rune = this.battleState.playerRune;
        console.log('üîÆ –†—É–Ω–∞ –∏–≥—Ä–æ–∫–∞:', rune);
        if (!rune) {
            console.error('‚ùå –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Ä—É–Ω—ã –≤ battleState!');
            return;
        }
        
        runeContainer.style.display = 'block';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º data URI –∫–∞–∫ fallback
        const fallbackIcon = 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"%3E%3Ccircle cx="50" cy="50" r="40" fill="%23FFD700"/%3E%3Ctext x="50" y="65" font-size="40" text-anchor="middle" fill="%23000"%3EüîÆ%3C/text%3E%3C/svg%3E';
        
        runeContainer.innerHTML = `
            <div class="rune-item ${this.battleState.runeUsedThisTurn ? 'used' : ''}" id="player-rune">
                <div class="rune-icon-wrapper">
                    <img src="${rune.icon}" alt="${rune.name}"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <div class="rune-icon-fallback" style="display: none;">üîÆ</div>
                    <div class="rune-tooltip">
                        <div style="font-size: 1.3rem; font-weight: 900; margin-bottom: 0.8rem; color: #fbbf24; text-shadow: 0 0 20px rgba(251, 191, 36, 1);">${rune.name}</div>
                        <div style="font-size: 1.05rem; line-height: 1.6;">${rune.description}</div>
                    </div>
                </div>
                <span class="rune-name">${rune.name}</span>
                <button class="rune-use-btn btn primary" ${this.battleState.runeUsedThisTurn ? 'disabled' : ''}>
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </button>
            </div>
        `;
        
        console.log('‚úÖ HTML —Ä—É–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, icon:', rune.icon);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
        if (!this.battleState.runeUsedThisTurn) {
            const useBtn = runeContainer.querySelector('.rune-use-btn');
            if (useBtn) {
                useBtn.onclick = () => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ–¥
                    const alivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
                    const availableCards = alivePlayerCards.filter(card => {
                        const notOnCooldown = !this.battleState.lastPlayerCard || card.name !== this.battleState.lastPlayerCard.name;
                        const notFrozen = !this.battleState.frozenCards.includes(card.name);
                        const notFeared = !this.battleState.fearedCards.includes(card.name);
                        return notOnCooldown && notFrozen && notFeared;
                    });
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç - —Ä—É–Ω—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    if (availableCards.length === 0 && alivePlayerCards.length > 0) {
                        this.showBattleHint('‚è≥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã –æ—Ç–¥—ã—Ö–∞—é—Ç! –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É–Ω—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞.');
                        setTimeout(() => this.hideBattleHint(), 2000);
                        return;
                    }
                    
                    this.showRuneTargetSelection();
                };
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä—É–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω');
            } else {
                console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä—É–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            }
        }
    }
    
    renderBotRune() {
        console.log('üîÆ renderBotRune –≤—ã–∑–≤–∞–Ω');
        const runeContainer = document.getElementById('bot-rune-container');
        console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É–Ω—ã –±–æ—Ç–∞:', runeContainer ? '–Ω–∞–π–¥–µ–Ω ‚úÖ' : '–ù–ï –Ω–∞–π–¥–µ–Ω ‚ùå');
        
        if (!runeContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É–Ω—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const rune = this.battleState.botRune;
        console.log('üîÆ –†—É–Ω–∞ –±–æ—Ç–∞:', rune);
        if (!rune) {
            console.error('‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç —Ä—É–Ω—ã –≤ battleState!');
            return;
        }
        
        runeContainer.style.display = 'block';
        runeContainer.innerHTML = `
            <div class="rune-item">
                <div class="rune-icon-wrapper">
                    <img src="${rune.icon}" alt="${rune.name}"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <div class="rune-icon-fallback" style="display: none;">üîÆ</div>
                    <div class="rune-tooltip">
                        <div style="font-size: 1.3rem; font-weight: 900; margin-bottom: 0.8rem; color: #fbbf24; text-shadow: 0 0 20px rgba(251, 191, 36, 1);">${rune.name}</div>
                        <div style="font-size: 1.05rem; line-height: 1.6;">${rune.description}</div>
                    </div>
                </div>
                <span class="rune-name">${rune.name}</span>
            </div>
        `;
        console.log('‚úÖ HTML —Ä—É–Ω—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, icon:', rune.icon);
    }
    
    async showRuneTargetSelection() {
        console.log('üîÆ –í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è —Ä—É–Ω—ã');
        
        const rune = this.battleState.playerRune;
        if (!rune || this.battleState.runeUsedThisTurn) return;
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞—Ç–∞–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('target-available', 'hint-glow');
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä—É–Ω—ã
        let targets = [];
        let hint = '';
        
        if (rune.type === 'invisibility') {
            // –ù–ï–í–ò–î–ò–ú–û–°–¢–¨ - –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ –°–í–û–Æ –∫–∞—Ä—Ç—É (–≤—Ä–∞–≥ –µ—ë –Ω–µ –∞—Ç–∞–∫—É–µ—Ç)
            targets = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
            hint = '–í—ã–±–µ—Ä–∏—Ç–µ –°–í–û–Æ –∫–∞—Ä—Ç—É –¥–ª—è –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ (–≤—Ä–∞–≥ –Ω–µ —Å–º–æ–∂–µ—Ç –µ—ë –∞—Ç–∞–∫–æ–≤–∞—Ç—å)';
        } else if (rune.type === 'shield') {
            // –©–ò–¢ - –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ –°–í–û–Æ –∫–∞—Ä—Ç—É (–ø–æ–ª—É—á–∏—Ç –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞)
            targets = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
            hint = '–í—ã–±–µ—Ä–∏—Ç–µ –°–í–û–Æ –∫–∞—Ä—Ç—É –¥–ª—è —â–∏—Ç–∞ (+40% –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫ –≤—Ä–∞–≥–∞)';
        } else if (rune.type === 'water') {
            // –í–û–î–ê - –ª–µ—á–∏–º —Å–≤–æ—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
            targets = this.battleState.playerDeck.filter(card => 
                !card.isDead && card.health > 0 && card.health < card.maxHealth
            );
            hint = '–í—ã–±–µ—Ä–∏—Ç–µ –°–í–û–Æ –∫–∞—Ä—Ç—É –¥–ª—è –ª–µ—á–µ–Ω–∏—è';
        }
        
        if (targets.length === 0) {
            await this.showAlert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π —Ä—É–Ω—ã!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ (—Å–≤–æ–∏ –∫–∞—Ä—Ç—ã)
        targets.forEach(card => {
            const cardElement = document.querySelector(`#player-cards .battle-card-new[data-card-name="${card.name}"]`);
            if (cardElement) {
                cardElement.classList.add('rune-target');
                cardElement.style.cursor = 'pointer';
                cardElement.onclick = () => this.useRuneOnCard(card);
            }
        });
        
        this.showBattleHint(hint + ' (–†—É–Ω–∞ –Ω–µ –∑–∞–±–µ—Ä–µ—Ç –≤–∞—à —Ö–æ–¥)');
    }
    
    async useRuneOnCard(targetCard) {
        console.log('üîÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—É–Ω—ã –Ω–∞:', targetCard.name);
        
        const rune = this.battleState.playerRune;
        if (!rune || this.battleState.runeUsedThisTurn) return;
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('rune-target');
            c.style.cursor = '';
            c.onclick = null;
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä—É–Ω—ã
        if (rune.type === 'invisibility') {
            this.battleState.invisibleCards.push(targetCard.name);
            this.battleState.runeDurations[targetCard.name] = 2; // 2 —Ö–æ–¥–∞
            this.showBattleHint(`${targetCard.name} –Ω–µ–≤–∏–¥–∏–º! –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Ç–∞–∫–æ–≤–∞–Ω 2 —Ö–æ–¥–∞.`);
            console.log('üëª –ö–∞—Ä—Ç–∞ —Å—Ç–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º–æ–π –Ω–∞ 2 —Ö–æ–¥–∞:', targetCard.name);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–Ω—ã
            const cardEl = document.querySelector(`#player-cards .battle-card-new[data-card-name="${targetCard.name}"]`);
            if (cardEl) {
                this.showRuneActivationAnimation(cardEl, 'invisibility');
                cardEl.classList.add('invisible-card', 'has-rune-effect', 'invisibility');
                cardEl.style.opacity = '0.5';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                this.addRuneIndicator(cardEl, 'invisibility', 'üëª –ù–ï–í–ò–î–ò–ú–û–°–¢–¨');
            }
        } else if (rune.type === 'shield') {
            this.battleState.shieldedCards.push(targetCard.name);
            this.battleState.runeDurations[targetCard.name] = 2; // 2 —Ö–æ–¥–∞
            targetCard.tempDefense = (targetCard.tempDefense || 0) + 40;
            this.showBattleHint(`${targetCard.name} –ø–æ–ª—É—á–∏–ª —â–∏—Ç! +40% –∑–∞—â–∏—Ç—ã –Ω–∞ 2 —Ö–æ–¥–∞.`);
            console.log('üõ°Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∏–ª–∞ —â–∏—Ç –Ω–∞ 2 —Ö–æ–¥–∞:', targetCard.name);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–Ω—ã
            const cardEl = document.querySelector(`#player-cards .battle-card-new[data-card-name="${targetCard.name}"]`);
            if (cardEl) {
                this.showRuneActivationAnimation(cardEl, 'shield');
                cardEl.classList.add('shielded-card', 'has-rune-effect', 'shield');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                this.addRuneIndicator(cardEl, 'shield', 'üõ°Ô∏è –©–ò–¢');
            }
        } else if (rune.type === 'water') {
            const healAmount = Math.floor(targetCard.maxHealth * 0.2);
            targetCard.health = Math.min(targetCard.maxHealth, targetCard.health + healAmount);
            this.showBattleHint(`${targetCard.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª ${healAmount} HP!`);
            console.log('üíß –ö–∞—Ä—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ HP:', targetCard.name, '+', healAmount);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.renderBattle();
        }
        
        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Ä—É–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        this.battleState.runeUsedThisTurn = true;
        this.renderPlayerRune();
        
        // –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥
        setTimeout(() => {
            this.hideBattleHint();
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏
            this.showCardSelection();
        }, 1500);
    }
    
    decreaseRuneDurations() {
        console.log('‚è±Ô∏è –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—É–Ω (–∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞)');
        
        if (!this.battleState) return;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!this.battleState.runeDurations) {
            this.battleState.runeDurations = {};
            return;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—É–Ω –∏ —É–±–∏—Ä–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ
        Object.keys(this.battleState.runeDurations).forEach(cardName => {
            const oldDuration = this.battleState.runeDurations[cardName];
            this.battleState.runeDurations[cardName]--;
            console.log(`‚è±Ô∏è –†—É–Ω–∞ –Ω–∞ ${cardName}: ${oldDuration} ‚Üí ${this.battleState.runeDurations[cardName]} —Ä–∞—É–Ω–¥–æ–≤`);
            
            if (this.battleState.runeDurations[cardName] <= 0) {
                delete this.battleState.runeDurations[cardName];
                console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—É–Ω—ã –Ω–∞ ${cardName} –∏—Å—Ç–µ–∫–ª–∞!`);
            }
        });
    }
    
    clearRuneEffects() {
        console.log('üßπ –û—á–∏—â–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∏—Å—Ç–µ–∫—à–∏—Ö —Ä—É–Ω');
        
        if (!this.battleState) return;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!this.battleState.runeDurations) {
            this.battleState.runeDurations = {};
        }
        
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –∏—Å—Ç–µ–∫—à–∏–µ)
        if (this.battleState.invisibleCards) {
            this.battleState.invisibleCards = this.battleState.invisibleCards.filter(cardName => {
                const hasEffect = this.battleState.runeDurations[cardName] && this.battleState.runeDurations[cardName] > 0;
                if (!hasEffect) {
                    console.log('üëª –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –∏—Å—Ç–µ–∫–ª–∞:', cardName);
                    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                    const cardEl = document.querySelector(`.battle-card-new[data-card-name="${cardName}"]`);
                    if (cardEl) {
                        cardEl.classList.remove('invisible-card', 'has-rune-effect', 'invisibility');
                        cardEl.style.opacity = '';
                        const indicator = cardEl.querySelector('.rune-indicator');
                        if (indicator) indicator.remove();
                    }
                }
                return hasEffect;
            });
        }
        
        // –£–±–∏—Ä–∞–µ–º —â–∏—Ç—ã (—Ç–æ–ª—å–∫–æ –∏—Å—Ç–µ–∫—à–∏–µ)
        if (this.battleState.shieldedCards) {
            this.battleState.shieldedCards = this.battleState.shieldedCards.filter(cardName => {
                const hasEffect = this.battleState.runeDurations[cardName] && this.battleState.runeDurations[cardName] > 0;
                if (!hasEffect) {
                    console.log('üõ°Ô∏è –©–∏—Ç –∏—Å—Ç–µ–∫:', cardName);
                    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                    const cardEl = document.querySelector(`.battle-card-new[data-card-name="${cardName}"]`);
                    if (cardEl) {
                        cardEl.classList.remove('shielded-card', 'has-rune-effect', 'shield');
                        const indicator = cardEl.querySelector('.rune-indicator');
                        if (indicator) indicator.remove();
                    }
                    // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å –∑–∞—â–∏—Ç—ã
                    const card = [...this.battleState.playerDeck, ...this.battleState.botDeck].find(c => c.name === cardName);
                    if (card && card.tempDefense) {
                        card.tempDefense = 0;
                    }
                }
                return hasEffect;
            });
        }
        
        // –û—á–∏—â–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —Ä–∞—É–Ω–¥)
        if (this.battleState.frozenCards && this.battleState.frozenCards.length > 0) {
            console.log('‚ùÑÔ∏è –û—á–∏—â–∞–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É');
            this.battleState.frozenCards.forEach(cardName => {
                const cardEl = document.querySelector(`.battle-card-new[data-card-name="${cardName}"]`);
                if (cardEl) {
                    cardEl.classList.remove('frozen-status');
                }
            });
            this.battleState.frozenCards = [];
        }
        
        // –û—á–∏—â–∞–µ–º –∏—Å–ø—É–≥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1 —Ä–∞—É–Ω–¥)
        if (this.battleState.fearedCards && this.battleState.fearedCards.length > 0) {
            console.log('üò± –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞—Ö');
            this.battleState.fearedCards.forEach(cardName => {
                const cardEl = document.querySelector(`.battle-card-new[data-card-name="${cardName}"]`);
                if (cardEl) {
                    cardEl.classList.remove('feared-status');
                }
            });
            this.battleState.fearedCards = [];
        }
    }
    
    // ===== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –†–£–ù =====
    
    // ‚ö° ===== –°–ò–°–¢–ï–ú–ê –°–ö–ò–õ–õ–û–í =====
    
    useSkill(card) {
        if (!card.skill || !this.isPlayerTurn || card.skillCooldown > 0) return;
        
        console.log('‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞:', card.skill.name, '–æ—Ç', card.name);
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('hint-glow', 'target-available', 'rune-target');
        });
        
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–∏–ª–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É
        if (card.name === 'Shadow Fiend') {
            this.useShadowFiendSkill(card);
        } else if (card.name === 'Pudge') {
            this.showSkillTargetSelection(card, 'enemy');
        } else if (card.name === 'Invoker') {
            this.showSkillTargetSelection(card, 'enemy');
        } else if (card.name === 'Crystal Maiden') {
            this.showSkillTargetSelection(card, 'enemy');
        } else if (card.name === 'Terrorblade') {
            this.showSkillTargetSelection(card, 'any');
        } else if (card.name === 'Spirit Breaker') {
            this.useSpiritBreakerSkill(card);
        }
    }
    
    async showSkillTargetSelection(casterCard, targetType) {
        console.log('üéØ –í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è —Å–∫–∏–ª–ª–∞:', casterCard.skill.name);
        
        let targets = [];
        let hint = '';
        
        if (targetType === 'enemy') {
            // –¢–æ–ª—å–∫–æ –≤—Ä–∞–≥–∏ (–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–µ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–∫–∏–ª–ª–æ–≤)
            targets = this.battleState.botDeck.filter(card => !card.isDead && card.health > 0);
            hint = `–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è ${casterCard.skill.name}`;
        } else if (targetType === 'any') {
            // –õ—é–±—ã–µ –∫–∞—Ä—Ç—ã (—Å–≤–æ–∏ –∏ –≤—Ä–∞–≥–∏)
            targets = [
                ...this.battleState.playerDeck.filter(c => !c.isDead && c.health > 0),
                ...this.battleState.botDeck.filter(c => !c.isDead && c.health > 0)
            ];
            hint = `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è ${casterCard.skill.name}`;
        }
        
        if (targets.length === 0) {
            await this.showAlert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π!', '‚ö†Ô∏è', '–û—à–∏–±–∫–∞');
            return;
        }
        
        this.showBattleHint(hint + ' (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ –∑–∞–º–µ–Ω—è–µ—Ç –∞—Ç–∞–∫—É)');
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ü–µ–ª–∏
        targets.forEach(targetCard => {
            const isPlayerCard = this.battleState.playerDeck.find(c => c.name === targetCard.name);
            const side = isPlayerCard ? 'player' : 'enemy';
            const cardElement = document.querySelector(`.${side}-battle-side .battle-card-new[data-card-name="${targetCard.name}"]`);
            
            if (cardElement) {
                cardElement.classList.add('skill-target');
                cardElement.style.cursor = 'crosshair';
                cardElement.onclick = () => this.castSkillOnTarget(casterCard, targetCard);
            }
        });
    }
    
    castSkillOnTarget(casterCard, targetCard) {
        console.log('‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–ª–ª–∞:', casterCard.skill.name, '–Ω–∞', targetCard.name);
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('skill-target');
            c.style.cursor = '';
            c.onclick = null;
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–ª–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–µ—Ä–æ—è
        if (casterCard.name === 'Pudge') {
            this.usePudgeSkill(casterCard, targetCard);
        } else if (casterCard.name === 'Invoker') {
            this.useInvokerSkill(casterCard, targetCard);
        } else if (casterCard.name === 'Crystal Maiden') {
            this.useCrystalMaidenSkill(casterCard, targetCard);
        } else if (casterCard.name === 'Terrorblade') {
            this.useTerrorbladeSkill(casterCard, targetCard);
        }
    }
    
    // Shadow Fiend - Requiem of Souls
    useShadowFiendSkill(card) {
        console.log('üíÄ Shadow Fiend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–µ–∫–≤–∏–µ–º –¥—É—à!');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        this.soundSystem.playSound('shadow_fiend_requiem', 1.2);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        card.skillCooldown = 2;
        
        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Ö–æ–¥–∏–ª–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
        this.battleState.lastPlayerCard = { name: card.name };
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—É –Ω–∞–ø—Ä–æ—Ç–∏–≤ (—Ç–æ—Ç –∂–µ –∏–Ω–¥–µ–∫—Å)
        const casterIndex = this.battleState.playerDeck.findIndex(c => c.name === card.name);
        const oppositeCard = this.battleState.botDeck[casterIndex];
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥—É—à
        this.createRequiemAnimation(card, oppositeCard);
        
        setTimeout(() => {
            // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –≤—Ä–∞–≥–∞–º
            this.battleState.botDeck.forEach((enemy, idx) => {
                if (!enemy.isDead && enemy.health > 0) {
                    const damage = idx === casterIndex ? 50 : 20;
                    enemy.health = Math.max(0, enemy.health - damage);
                    
                    if (enemy.health <= 0) {
                        enemy.isDead = true;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –≤ —Å—Ç—Ä–∞—Ö
                    this.battleState.fearedCards.push(enemy.name);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–Ω
                    this.showDamageNumber(enemy, damage, false, false);
                }
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å—Ç—Ä–∞—Ö–∞
            this.showFearEffect();
            
            this.renderBattle();
            this.showBattleHint('–í—Å–µ –≤—Ä–∞–≥–∏ –≤ —Å—Ç—Ä–∞—Ö–µ! –ü—Ä–æ–ø—É—Å–∫–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥.');
            
            setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    // –û–Ω–ª–∞–π–Ω-–±–æ–π: –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥, –ù–ï –≤—ã–∑—ã–≤–∞–µ–º startBotTurn
                    if (this.battleState.isOnline && window.onlineBattlesSystem) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω: Requiem –ø—Ä–∏–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥');
                        window.onlineBattlesSystem.endPlayerTurn();
                    } else {
                        // –û—Ñ—Ñ–ª–∞–π–Ω: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ö–æ–¥—É –±–æ—Ç–∞ (–æ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –∏–∑-–∑–∞ —Å—Ç—Ä–∞—Ö–∞)
                        this.startBotTurn();
                    }
                }
            }, 2000);
        }, 1500);
    }
    
    // Pudge - Dismember
    usePudgeSkill(casterCard, targetCard) {
        console.log('ü©∏ Pudge –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Dismember!');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω)
        // this.soundSystem.playSound('pudge_dismember', 1.2);
        
        casterCard.skillCooldown = 2;
        this.battleState.lastPlayerCard = { name: casterCard.name };
        
        // –ê–Ω–∏–º–∞—Ü–∏—è Dismember
        this.createDismemberAnimation(casterCard, targetCard);
        
        setTimeout(() => {
            // –°–Ω–∏–º–∞–µ–º 50 HP —É —Ü–µ–ª–∏
            targetCard.health = Math.max(0, targetCard.health - 50);
            if (targetCard.health <= 0) {
                targetCard.isDead = true;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 25 HP Pudge
            casterCard.health = Math.min(casterCard.maxHealth, casterCard.health + 25);
            
            this.showDamageNumber(targetCard, 50, false, false);
            this.renderBattle();
            this.showBattleHint(`Pudge –ø–æ–∂–∏—Ä–∞–µ—Ç –≤—Ä–∞–≥–∞! -50 HP —Ü–µ–ª–∏, +25 HP Pudge`);
            
            setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    if (this.battleState.isOnline && window.onlineBattlesSystem) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω: Dismember –ø—Ä–∏–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥');
                        window.onlineBattlesSystem.endPlayerTurn();
                    } else {
                        this.startBotTurn();
                    }
                }
            }, 2000);
        }, 1500);
    }
    
    // Invoker - Sun Strike
    useInvokerSkill(casterCard, targetCard) {
        console.log('‚òÄÔ∏è Invoker –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sun Strike!');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        this.soundSystem.playSound('invoker_sunstrike', 1.2);
        
        casterCard.skillCooldown = 2;
        this.battleState.lastPlayerCard = { name: casterCard.name };
        
        // –ê–Ω–∏–º–∞—Ü–∏—è Sun Strike
        this.createSunStrikeAnimation(targetCard);
        
        setTimeout(() => {
            // –ù–∞–Ω–æ—Å–∏–º 100 —É—Ä–æ–Ω–∞
            targetCard.health = Math.max(0, targetCard.health - 100);
            if (targetCard.health <= 0) {
                targetCard.isDead = true;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º Cold Snap (–∑–∞–º–æ—Ä–æ–∑–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥)
            this.battleState.frozenCards.push(targetCard.name);
            
            this.showDamageNumber(targetCard, 100, false, false);
            this.showColdSnapEffect(targetCard);
            this.renderBattle();
            this.showBattleHint(`Sun Strike! 100 —É—Ä–æ–Ω–∞ + Cold Snap (–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞)`);
            
            setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    if (this.battleState.isOnline && window.onlineBattlesSystem) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω: Sun Strike –ø—Ä–∏–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥');
                        window.onlineBattlesSystem.endPlayerTurn();
                    } else {
                        this.startBotTurn();
                    }
                }
            }, 2000);
        }, 2000);
    }
    
    // Crystal Maiden - Frostbite
    useCrystalMaidenSkill(casterCard, targetCard) {
        console.log('‚ùÑÔ∏è Crystal Maiden –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Frostbite!');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω)
        // this.soundSystem.playSound('crystal_maiden_frostbite', 1.2);
        
        casterCard.skillCooldown = 2;
        this.battleState.lastPlayerCard = { name: casterCard.name };
        
        // –ê–Ω–∏–º–∞—Ü–∏—è Frostbite
        this.createFrostbiteAnimation(targetCard);
        
        setTimeout(() => {
            // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ü–µ–ª—å
            this.battleState.frozenCards.push(targetCard.name);
            
            this.showColdSnapEffect(targetCard);
            this.showBattleHint(`${targetCard.name} –∑–∞–º–æ—Ä–æ–∂–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥.`);
            
            setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    if (this.battleState.isOnline && window.onlineBattlesSystem) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω: Frostbite –ø—Ä–∏–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥');
                        window.onlineBattlesSystem.endPlayerTurn();
                    } else {
                        this.startBotTurn();
                    }
                }
            }, 2000);
        }, 1500);
    }
    
    // Terrorblade - Sunder
    useTerrorbladeSkill(casterCard, targetCard) {
        console.log('üîÑ Terrorblade –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sunder!');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        this.soundSystem.playSound('terrorblade_sunder', 1.2);
        
        casterCard.skillCooldown = 2;
        this.battleState.lastPlayerCard = { name: casterCard.name };
        
        // –ê–Ω–∏–º–∞—Ü–∏—è Sunder
        this.createSunderAnimation(casterCard, targetCard);
        
        setTimeout(() => {
            // –ú–µ–Ω—è–µ–º HP
            const tempHealth = casterCard.health;
            casterCard.health = targetCard.health;
            targetCard.health = tempHealth;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç–∏
            if (casterCard.health <= 0) casterCard.isDead = true;
            if (targetCard.health <= 0) targetCard.isDead = true;
            
            this.renderBattle();
            this.showBattleHint(`Sunder! ${casterCard.name} –∏ ${targetCard.name} –æ–±–º–µ–Ω—è–ª–∏—Å—å HP!`);
            
            setTimeout(() => {
                this.hideBattleHint();
                if (!this.checkBattleEnd()) {
                    if (this.battleState.isOnline && window.onlineBattlesSystem) {
                        console.log('üåê –û–Ω–ª–∞–π–Ω: Sunder –ø—Ä–∏–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥');
                        window.onlineBattlesSystem.endPlayerTurn();
                    } else {
                        this.startBotTurn();
                    }
                }
            }, 2000);
        }, 1500);
    }
    
    // Spirit Breaker - Charge
    useSpiritBreakerSkill(card) {
        console.log('‚ö° Spirit Breaker –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Charge of Darkness!');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω)
        // this.soundSystem.playSound('spirit_breaker_charge', 1.2);
        
        card.skillCooldown = 2;
        
        // –î–∞–µ–º +20 —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ —Ä–∞—É–Ω–¥
        card.tempSpeed = 20;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è Charge
        this.createChargeAnimation(card);
        
        setTimeout(() => {
            this.showBattleHint(`Spirit Breaker –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è! +20 —Å–∫–æ—Ä–æ—Å—Ç–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å!`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ª—é–±—É—é, –≤–∫–ª—é—á–∞—è –Ω–µ–≤–∏–¥–∏–º—ã–µ)
            const allEnemies = this.battleState.botDeck.filter(c => !c.isDead && c.health > 0);
            
            allEnemies.forEach(enemy => {
                const cardElement = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${enemy.name}"]`);
                if (cardElement) {
                    cardElement.classList.add('skill-target');
                    cardElement.style.cursor = 'crosshair';
                    cardElement.onclick = () => {
                        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                        document.querySelectorAll('.battle-card-new').forEach(c => {
                            c.classList.remove('skill-target');
                            c.style.cursor = '';
                            c.onclick = null;
                        });
                        
                        // –ê—Ç–∞–∫—É–µ–º —Å –±–æ–Ω—É—Å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
                        const attacksCount = Math.max(1, Math.floor((card.speed + card.tempSpeed) / 10));
                        console.log('‚ö° Spirit Breaker –∞—Ç–∞–∫—É–µ—Ç —Å', attacksCount, '—É–¥–∞—Ä–∞–º–∏!');
                        
                        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Ö–æ–¥–∏–ª–∏
                        this.battleState.lastPlayerCard = { name: card.name };
                        
                        // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
                        setTimeout(() => {
                            card.tempSpeed = 0;
                        }, attacksCount * 1200);
                        
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫–∏
                        this.performMultipleAttacks(card, enemy, attacksCount);
                    };
                }
            });
        }, 1000);
    }
    
    // ===== –ê–ù–ò–ú–ê–¶–ò–ò –°–ö–ò–õ–õ–û–í =====
    
    createRequiemAnimation(caster, oppositeCard) {
        console.log('üíÄüíÄüíÄ –ê–ù–ò–ú–ê–¶–ò–Ø REQUIEM –ù–ê–ß–ê–¢–ê üíÄüíÄüíÄ');
        console.log('Caster:', caster.name);
        console.log('Opposite card:', oppositeCard.name);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
        const oppositeCardEl = document.querySelector(`#enemy-cards .battle-card-new[data-card-name="${oppositeCard.name}"]`);
        if (!oppositeCardEl) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', oppositeCard.name);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –û–ö–ù–ê (–Ω–µ –∞—Ä–µ–Ω—ã)
        const rect = oppositeCardEl.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        console.log('üéØ Requiem center (window coords):', centerX, centerY);
        console.log('üìê Card position:', rect);
        
        // –°–æ–∑–¥–∞–µ–º 12 –¥—É—à –ø–æ –∫—Ä—É–≥—É
        const soulCount = 12;
        const radius = 200; // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–¥–∏—É—Å –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        
        for (let i = 0; i < soulCount; i++) {
            const angle = (i / soulCount) * Math.PI * 2;
            const targetX = Math.cos(angle) * radius;
            const targetY = Math.sin(angle) * radius;
            
            const soul = document.createElement('div');
            soul.className = 'requiem-soul';
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞ (fixed)
            soul.style.left = centerX + 'px';
            soul.style.top = centerY + 'px';
            soul.style.zIndex = '99999';
            soul.style.position = 'fixed';
            soul.style.transition = 'all 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            
            // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥—É—à–∏
            soul.innerHTML = `
                <div class="soul-core"></div>
                <div class="soul-trail"></div>
            `;
            
            document.body.appendChild(soul); // –î–æ–±–∞–≤–ª—è–µ–º –≤ body, –∞ –Ω–µ –≤ arena!
            console.log(`‚úÖ Soul ${i} created at window position (${centerX}, ${centerY})`);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è: –¥—É—à–∞ –ª–µ—Ç–∏—Ç –ø–æ –∫—Ä—É–≥—É
            setTimeout(() => {
                soul.style.opacity = '1';
                soul.style.transform = `translate(${targetX}px, ${targetY}px) scale(1.5) rotate(${360 + angle * 57.3}deg)`;
                console.log(`üåÄ Soul ${i} flying to offset (${targetX}, ${targetY})`);
            }, 50 + i * 30); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥—É—à–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
            
            // –£–¥–∞–ª—è–µ–º –¥—É—à—É
            setTimeout(() => {
                if (document.body.contains(soul)) {
                    document.body.removeChild(soul);
                    console.log(`üóëÔ∏è Soul ${i} removed`);
                }
            }, 2500);
        }
        
        console.log('‚úÖ‚úÖ‚úÖ REQUIEM ANIMATION COMPLETE ‚úÖ‚úÖ‚úÖ');
    }
    
    createDismemberAnimation(caster, target) {
        console.log('ü©∏ –ê–Ω–∏–º–∞—Ü–∏—è Dismember');
        
        const targetEl = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        if (targetEl) {
            targetEl.classList.add('dismember-shake');
            setTimeout(() => targetEl.classList.remove('dismember-shake'), 1500);
        }
    }
    
    createSunStrikeAnimation(target) {
        console.log('‚òÄÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è Sun Strike');
        
        const targetEl = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        if (!targetEl) return;
        
        const arena = document.querySelector('.battle-arena');
        
        // –õ—É—á —Å–≤–µ—Ç–∞ —Å–≤–µ—Ä—Ö—É
        const beam = document.createElement('div');
        beam.className = 'sunstrike-beam';
        const rect = targetEl.getBoundingClientRect();
        const arenaRect = arena.getBoundingClientRect();
        
        beam.style.left = (rect.left - arenaRect.left + rect.width / 2) + 'px';
        beam.style.top = '0';
        
        arena.appendChild(beam);
        
        setTimeout(() => beam.classList.add('active'), 10);
        setTimeout(() => {
            if (arena.contains(beam)) arena.removeChild(beam);
        }, 2000);
        
        // –í—Å–ø—ã—à–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        targetEl.classList.add('sunstrike-hit');
        setTimeout(() => targetEl.classList.remove('sunstrike-hit'), 1000);
    }
    
    createFrostbiteAnimation(target) {
        console.log('‚ùÑÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è Frostbite');
        
        const targetEl = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        if (targetEl) {
            targetEl.classList.add('frozen');
            
            // –°–æ–∑–¥–∞–µ–º –ª–µ–¥—è–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
            for (let i = 0; i < 10; i++) {
                const crystal = document.createElement('div');
                crystal.className = 'ice-crystal';
                crystal.textContent = '‚ùÑ';
                crystal.style.left = Math.random() * 100 + '%';
                crystal.style.animationDelay = (i * 0.1) + 's';
                targetEl.appendChild(crystal);
                
                setTimeout(() => {
                    if (targetEl.contains(crystal)) targetEl.removeChild(crystal);
                }, 1500);
            }
        }
    }
    
    createSunderAnimation(caster, target) {
        console.log('üîÑ –ê–Ω–∏–º–∞—Ü–∏—è Sunder');
        
        const casterEl = document.querySelector(`.battle-card-new[data-card-name="${caster.name}"]`);
        const targetEl = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        
        if (casterEl && targetEl) {
            // –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
            const arena = document.querySelector('.battle-arena');
            const line = document.createElement('div');
            line.className = 'sunder-line';
            
            arena.appendChild(line);
            
            const casterRect = casterEl.getBoundingClientRect();
            const targetRect = targetEl.getBoundingClientRect();
            const arenaRect = arena.getBoundingClientRect();
            
            const x1 = casterRect.left - arenaRect.left + casterRect.width / 2;
            const y1 = casterRect.top - arenaRect.top + casterRect.height / 2;
            const x2 = targetRect.left - arenaRect.left + targetRect.width / 2;
            const y2 = targetRect.top - arenaRect.top + targetRect.height / 2;
            
            const length = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
            const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
            
            line.style.width = length + 'px';
            line.style.left = x1 + 'px';
            line.style.top = y1 + 'px';
            line.style.transform = `rotate(${angle}deg)`;
            
            setTimeout(() => line.classList.add('active'), 10);
            setTimeout(() => {
                if (arena.contains(line)) arena.removeChild(line);
            }, 1500);
            
            casterEl.classList.add('sunder-glow');
            targetEl.classList.add('sunder-glow');
            setTimeout(() => {
                casterEl.classList.remove('sunder-glow');
                targetEl.classList.remove('sunder-glow');
            }, 1500);
        }
    }
    
    createChargeAnimation(card) {
        console.log('‚ö° –ê–Ω–∏–º–∞—Ü–∏—è Charge of Darkness');
        
        const cardEl = document.querySelector(`.battle-card-new[data-card-name="${card.name}"]`);
        if (cardEl) {
            cardEl.classList.add('charging');
            setTimeout(() => cardEl.classList.remove('charging'), 2000);
        }
    }
    
    showFearEffect() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ø–∏—á–Ω—ã–µ —Ö–∏—Ç–º–∞—Ä–∫–µ—Ä—ã —Å—Ç—Ä–∞—Ö–∞ –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
        this.battleState.botDeck.forEach(enemy => {
            if (!enemy.isDead) {
                const cardEl = document.querySelector(`.enemy-battle-side .battle-card-new[data-card-name="${enemy.name}"]`);
                if (cardEl) {
                    const fearMarker = document.createElement('div');
                    fearMarker.className = 'fear-marker-full';
                    fearMarker.innerHTML = `
                        <div class="fear-overlay"></div>
                        <div class="fear-content">
                            <div class="fear-icon-big">üò±</div>
                            <div class="fear-text-big">–°–¢–†–ê–•</div>
                        </div>
                    `;
                    cardEl.style.position = 'relative';
                    cardEl.appendChild(fearMarker);
                    
                    setTimeout(() => {
                        if (cardEl.contains(fearMarker)) cardEl.removeChild(fearMarker);
                    }, 2500);
                }
            }
        });
    }
    
    showColdSnapEffect(target) {
        const cardEl = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        if (cardEl) {
            const freezeMarker = document.createElement('div');
            freezeMarker.className = 'freeze-marker-full';
            freezeMarker.innerHTML = `
                <div class="freeze-overlay"></div>
                <div class="freeze-content">
                    <div class="freeze-icon-big">‚ùÑÔ∏è</div>
                    <div class="freeze-text-big">–ó–ê–ú–û–†–û–ñ–ï–ù</div>
                </div>
            `;
            cardEl.style.position = 'relative';
            cardEl.appendChild(freezeMarker);
            
            setTimeout(() => {
                if (cardEl.contains(freezeMarker)) cardEl.removeChild(freezeMarker);
            }, 2500);
        }
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–Ω—ã
    showRuneActivationAnimation(cardEl, runeType) {
        if (!cardEl) return;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (–≤—Å–ø—ã—à–∫–∞)
        const activation = document.createElement('div');
        activation.className = `rune-activation ${runeType}`;
        cardEl.appendChild(activation);
        
        // –ß–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < 20; i++) {
            const particle = document.createElement('div');
            particle.className = `rune-particle ${runeType}`;
            
            const angle = (i / 20) * Math.PI * 2;
            const distance = 60 + Math.random() * 40;
            const tx = Math.cos(angle) * distance;
            const ty = Math.sin(angle) * distance;
            
            particle.style.setProperty('--tx', tx + 'px');
            particle.style.setProperty('--ty', ty + 'px');
            particle.style.left = '50%';
            particle.style.top = '50%';
            
            cardEl.appendChild(particle);
            
            setTimeout(() => {
                if (cardEl.contains(particle)) cardEl.removeChild(particle);
            }, 1500);
        }
        
        setTimeout(() => {
            if (cardEl.contains(activation)) cardEl.removeChild(activation);
        }, 1500);
        
        console.log('‚ú® –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–Ω—ã:', runeType);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä—É–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    addRuneIndicator(cardEl, runeType, text) {
        if (!cardEl) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldIndicator = cardEl.querySelector('.card-rune-indicator');
        if (oldIndicator) {
            cardEl.removeChild(oldIndicator);
        }
        
        const indicator = document.createElement('div');
        indicator.className = `card-rune-indicator ${runeType}`;
        indicator.textContent = text;
        cardEl.appendChild(indicator);
        
        console.log('üìç –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä—É–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω:', text);
    }
    
    showDamageNumber(target, damage, isBlocked, isCrit) {
        const targetEl = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        if (!targetEl) return;
        
        const dmgText = document.createElement('div');
        dmgText.className = `damage-number ${isCrit ? 'crit' : ''} ${isBlocked ? 'blocked' : ''}`;
        dmgText.textContent = isBlocked ? `–ë–õ–û–ö ${damage}` : `-${damage}`;
        dmgText.style.left = Math.random() * 60 + 20 + '%';
        
        targetEl.appendChild(dmgText);
        
        setTimeout(() => dmgText.classList.add('show'), 10);
        setTimeout(() => {
            if (targetEl.contains(dmgText)) targetEl.removeChild(dmgText);
        }, 1500);
    }
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
    decreaseSkillCooldowns() {
        if (!this.battleState) return;
        
        if (this.battleState.playerDeck) {
            this.battleState.playerDeck.forEach(card => {
                if (card.skillCooldown > 0) {
                    card.skillCooldown--;
                    console.log('‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω', card.name, ':', card.skillCooldown);
                }
            });
        }
        
        if (this.battleState.botDeck) {
            this.battleState.botDeck.forEach(card => {
                if (card.skillCooldown > 0) {
                    card.skillCooldown--;
                }
            });
        }
        
        // –û—á–∏—â–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
        if (this.battleState.frozenCards) {
            this.battleState.frozenCards = [];
        }
        if (this.battleState.fearedCards) {
            this.battleState.fearedCards = [];
        }
    }
    
    // –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∫–∏–ª–ª—ã
    botUseSkill(card) {
        console.log('‚ö° –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∫–∏–ª–ª:', card.skill.name);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        card.skillCooldown = 2;
        this.battleState.lastBotCard = { name: card.name };
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∏–ª–ª
        const alivePlayerCards = this.battleState.playerDeck.filter(c => !c.isDead && c.health > 0);
        
        if (card.name === 'Shadow Fiend') {
            // Requiem - –Ω–∞ –≤—Å–µ—Ö
            this.botUseShadowFiendSkill(card);
        } else if (card.name === 'Pudge') {
            // Dismember - –Ω–∞ —Å–∞–º—É—é —Å–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
            const target = alivePlayerCards.reduce((strongest, c) => c.health > strongest.health ? c : strongest);
            this.botUsePudgeSkill(card, target);
        } else if (card.name === 'Invoker') {
            // Sun Strike - –Ω–∞ —Å–∞–º—É—é —Å–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
            const target = alivePlayerCards.reduce((strongest, c) => c.health > strongest.health ? c : strongest);
            this.botUseInvokerSkill(card, target);
        } else if (card.name === 'Crystal Maiden') {
            // Frostbite - –Ω–∞ —Å–∞–º—É—é –æ–ø–∞—Å–Ω—É—é (–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω)
            const target = alivePlayerCards.reduce((strongest, c) => c.damage > strongest.damage ? c : strongest);
            this.botUseCrystalMaidenSkill(card, target);
        } else if (card.name === 'Terrorblade') {
            // Sunder - –Ω–∞ —Å–∞–º—É—é –∑–¥–æ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É –µ—Å–ª–∏ Terrorblade —Ä–∞–Ω–µ–Ω
            if (card.health < card.maxHealth * 0.5) {
                const target = alivePlayerCards.reduce((strongest, c) => c.health > strongest.health ? c : strongest);
                this.botUseTerrorbladeSkill(card, target);
            } else {
                // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–æ –∞—Ç–∞–∫—É–µ–º
                this.selectBotTarget(card, alivePlayerCards);
            }
        } else if (card.name === 'Spirit Breaker') {
            // Charge - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–∞–∑—É
            this.botUseSpiritBreakerSkill(card);
        }
    }
    
    botUseShadowFiendSkill(card) {
        this.useShadowFiendSkill(card); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
    }
    
    botUsePudgeSkill(casterCard, targetCard) {
        this.usePudgeSkill(casterCard, targetCard);
    }
    
    botUseInvokerSkill(casterCard, targetCard) {
        this.useInvokerSkill(casterCard, targetCard);
    }
    
    botUseCrystalMaidenSkill(casterCard, targetCard) {
        this.useCrystalMaidenSkill(casterCard, targetCard);
    }
    
    botUseTerrorbladeSkill(casterCard, targetCard) {
        this.useTerrorbladeSkill(casterCard, targetCard);
    }
    
    botUseSpiritBreakerSkill(card) {
        // –°—Ä–∞–∑—É –∑–∞—Ä—è–∂–∞–µ–º—Å—è –∏ –∞—Ç–∞–∫—É–µ–º
        card.tempSpeed = 20;
        this.createChargeAnimation(card);
        
        setTimeout(() => {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
            const alivePlayerCards = this.battleState.playerDeck.filter(c => !c.isDead && c.health > 0);
            const target = alivePlayerCards[Math.floor(Math.random() * alivePlayerCards.length)];
            
            const attacksCount = Math.max(1, Math.floor((card.speed + card.tempSpeed) / 10));
            console.log('‚ö° Spirit Breaker (–±–æ—Ç) –∞—Ç–∞–∫—É–µ—Ç —Å', attacksCount, '—É–¥–∞—Ä–∞–º–∏!');
            
            this.showBattleHint(`–ë–æ—Ç: Spirit Breaker –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è!`);
            
            setTimeout(() => {
                card.tempSpeed = 0;
                this.performBotMultipleAttacks(card, target, attacksCount);
            }, 800);
        }, 1000);
    }
    
    // ===== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –°–ö–ò–õ–õ–û–í =====

    showBattleHint(text) {
        let hintElement = document.querySelector('.battle-hint');
        
        if (!hintElement) {
            hintElement = document.createElement('div');
            hintElement.className = 'battle-hint';
            document.querySelector('.battle-arena').appendChild(hintElement);
        }
        
        hintElement.textContent = text;
        hintElement.classList.add('active');
    }

    hideBattleHint() {
        const hintElement = document.querySelector('.battle-hint');
        if (hintElement) {
            hintElement.classList.remove('active');
        }
    }

    checkBattleEnd() {
        if (this.battleEnded) return true;
        
        const { playerDeck, botDeck } = this.battleState;
        
        const alivePlayerCards = playerDeck.filter(card => !card.isDead && card.health > 0);
        const aliveBotCards = botDeck.filter(card => !card.isDead && card.health > 0);
        
        console.log('Checking battle end:', { alivePlayerCards: alivePlayerCards.length, aliveBotCards: aliveBotCards.length });
        
        if (alivePlayerCards.length === 0) {
            this.battleEnded = true;
            console.log('Player lost - showing defeat screen');
            setTimeout(() => {
            this.endBattle(false);
            }, 1000);
            return true;
        }
        
        if (aliveBotCards.length === 0) {
            this.battleEnded = true;
            console.log('Player won - showing victory screen');
            setTimeout(() => {
            this.endBattle(true);
            }, 1000);
            return true;
        }
        
        return false;
    }

    performAttack(attacker, target, isEnemyAttacking = false) {
        if (attacker.isDead || target.isDead) return;

        // üîÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏
        if (this.battleState.invisibleCards && this.battleState.invisibleCards.includes(target.name)) {
            console.log('üëª –¶–µ–ª—å –Ω–µ–≤–∏–¥–∏–º–∞! –ê—Ç–∞–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç');
            console.log('   invisibleCards:', this.battleState.invisibleCards);
            console.log('   target.name:', target.name);
            this.showBattleHint(`${target.name} –Ω–µ–≤–∏–¥–∏–º! –ê—Ç–∞–∫–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∞—Å—å!`);
            setTimeout(() => this.hideBattleHint(), 1500);
            return;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω
        let damage = attacker.damage;
        let isBlocked = false;
        let isCrit = false;
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (15% —à–∞–Ω—Å)
        if (Math.random() < 0.15) {
            damage = Math.floor(damage * 1.5);
            isCrit = true;
            this.soundSystem.playSound('critAttack');
        } else {
            this.soundSystem.playSound('attack');
        }
        
        // üîÆ –£—á–∏—Ç—ã–≤–∞–µ–º —Ä—É–Ω—É —â–∏—Ç–∞ (+40% –∑–∞—â–∏—Ç—ã)
        let totalDefense = target.defense;
        if (this.battleState.shieldedCards.includes(target.name)) {
            totalDefense += 40;
            console.log('üõ°Ô∏è –¶–µ–ª—å –ø–æ–¥ —â–∏—Ç–æ–º! –ó–∞—â–∏—Ç–∞:', totalDefense + '%');
        }
        if (target.tempDefense) {
            totalDefense += target.tempDefense;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É
        if (Math.random() * 100 < totalDefense) {
            damage = Math.floor(damage * 0.3); // –ó–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ 70%
            isBlocked = true;
        } else {
            this.soundSystem.playSound('damage');
        }

        const oldHealth = target.health;
        target.health = Math.max(0, target.health - damage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        const justDied = target.health <= 0 && !target.isDead;
        if (justDied) {
            target.isDead = true;
            this.createDeathEffect();
            this.soundSystem.playSound('death');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –±–æ–π
            setTimeout(() => {
                this.checkBattleEnd();
            }, 500);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.addAttackEffect(attacker, target, damage, isBlocked, isCrit, isEnemyAttacking);
    }

    createDeathEffect() {
        // –ö—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
        const flash = document.createElement('div');
        flash.className = 'death-flash';
        document.body.appendChild(flash);
        
        setTimeout(() => flash.classList.add('active'), 10);
        
        setTimeout(() => {
            flash.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(flash)) {
                    document.body.removeChild(flash);
                }
            }, 500);
        }, 300);
    }

    addAttackEffect(attacker, target, damage, isBlocked, isCrit, isEnemyAttacking) {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç –Ω–∞ –ø–æ–ª–µ –±–æ—è
        const attackerElement = document.querySelector(`.battle-card-new[data-card-name="${attacker.name}"]`);
        const targetElement = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        
        if (!attackerElement || !targetElement) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã
        attackerElement.classList.add('battle-attacking');
        setTimeout(() => attackerElement.classList.remove('battle-attacking'), 600);
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –∞—Ç–∞–∫–∏
        this.createAttackLine(attackerElement, targetElement, isCrit);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        setTimeout(() => {
            targetElement.classList.add('battle-taking-damage');
            setTimeout(() => targetElement.classList.remove('battle-taking-damage'), 500);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∏—Ç–º–∞—Ä–∫–µ—Ä
            this.createHitMarker(targetElement, damage, isBlocked, isCrit);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∑–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ä—Ç—ã –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ—Ö
            this.updateCardHealth(targetElement, target);
        }, 300);
    }

    updateCardHealth(cardElement, cardData) {
        const healthBar = cardElement.querySelector('.battle-health-fill');
        const healthText = cardElement.querySelector('.battle-health-text');
        
        if (healthBar && healthText) {
            const healthPercentage = Math.max(0, (cardData.health / cardData.maxHealth) * 100);
            healthBar.style.width = `${healthPercentage}%`;
            healthText.textContent = `${Math.max(0, Math.floor(cardData.health))}/${cardData.maxHealth}`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        if (cardData.health <= 0 && !cardElement.classList.contains('dead')) {
            cardElement.classList.add('dead');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π —Å–º–µ—Ä—Ç–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!cardElement.querySelector('.battle-dead-overlay')) {
                const deathOverlay = document.createElement('div');
                deathOverlay.className = 'battle-dead-overlay';
                deathOverlay.innerHTML = '<div class="skull">üíÄ</div>';
                cardElement.appendChild(deathOverlay);
            }
        }
    }

    createAttackLine(fromElement, toElement, isCrit) {
        const fromRect = fromElement.getBoundingClientRect();
        const toRect = toElement.getBoundingClientRect();
        
        const fromX = fromRect.left + fromRect.width / 2;
        const fromY = fromRect.top + fromRect.height / 2;
        const toX = toRect.left + toRect.width / 2;
        const toY = toRect.top + toRect.height / 2;
        
        const angle = Math.atan2(toY - fromY, toX - fromX);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è –∏–∑–æ–≥–Ω—É—Ç–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        const midX = (fromX + toX) / 2;
        const midY = (fromY + toY) / 2;
        // –°–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –¥—É–≥–∏
        const arcHeight = -80;
        const controlX = midX;
        const controlY = midY + arcHeight;
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—á
        const sword = document.createElement('div');
        sword.className = `flying-sword ${isCrit ? 'critical' : ''}`;
        sword.innerHTML = '‚öîÔ∏è';
        sword.style.left = fromX + 'px';
        sword.style.top = fromY + 'px';
        sword.style.setProperty('--from-x', fromX + 'px');
        sword.style.setProperty('--from-y', fromY + 'px');
        sword.style.setProperty('--control-x', controlX + 'px');
        sword.style.setProperty('--control-y', controlY + 'px');
        sword.style.setProperty('--to-x', toX + 'px');
        sword.style.setProperty('--to-y', toY + 'px');
        sword.style.transform = `rotate(${angle}rad)`;
        
        document.body.appendChild(sword);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ –º–µ—á–∞ –ø–æ –¥—É–≥–µ
        setTimeout(() => {
            sword.classList.add('flying');
        }, 10);
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        setTimeout(() => {
            if (document.body.contains(sword)) {
                document.body.removeChild(sword);
            }
        }, 600);
    }

    createHitMarker(element, damage, isBlocked, isCrit) {
        const hitMarker = document.createElement('div');
        hitMarker.className = 'hit-marker';
        
        if (isCrit) {
            hitMarker.classList.add('critical');
            hitMarker.innerHTML = `<span class="damage-number">${damage}</span><span class="damage-label">–ö–†–ò–¢!</span>`;
        } else if (isBlocked) {
            hitMarker.classList.add('blocked');
            hitMarker.innerHTML = `<span class="damage-number">${damage}</span><span class="damage-label">–ë–õ–û–ö</span>`;
        } else {
            hitMarker.innerHTML = `<span class="damage-number">-${damage}</span>`;
        }
        
        const rect = element.getBoundingClientRect();
        hitMarker.style.left = rect.left + rect.width / 2 + 'px';
        hitMarker.style.top = rect.top + rect.height / 2 + 'px';
        
        // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
        const randomOffset = (Math.random() - 0.5) * 40;
        hitMarker.style.setProperty('--random-x', randomOffset + 'px');
        
        document.body.appendChild(hitMarker);
        
        setTimeout(() => hitMarker.classList.add('active'), 10);
        
        setTimeout(() => {
            if (document.body.contains(hitMarker)) {
                document.body.removeChild(hitMarker);
            }
        }, 1500);
    }

    backToMenu() {
        console.log('üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        
        // –£–±–∏—Ä–∞–µ–º overlay —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const overlay = document.querySelector('.battle-result-overlay');
        if (overlay && document.body.contains(overlay)) {
            document.body.removeChild(overlay);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
        this.clearBattleState();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
        const battleScreen = document.getElementById('battle-screen');
        const mainMenu = document.getElementById('main-menu');
        
        if (battleScreen) {
            battleScreen.classList.remove('active');
            battleScreen.style.display = 'none';
        }
        
        if (mainMenu) {
            mainMenu.classList.add('active');
            mainMenu.style.display = 'block';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserInfo();
        this.loadProfile();
        
        console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    
    playAgain() {
        console.log('üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑');
        
        // –£–±–∏—Ä–∞–µ–º overlay —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const overlay = document.querySelector('.battle-result-overlay');
        if (overlay && document.body.contains(overlay)) {
            document.body.removeChild(overlay);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ–π
        this.backToMenu();
        setTimeout(() => {
            this.startBotBattle();
        }, 500);
    }
    
    async endBattle(playerWon) {
        console.log('=== endBattle called ===', { playerWon });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-–±–æ–π
        if (this.battleState && this.battleState.isOnline && window.onlineBattlesSystem) {
            await window.onlineBattlesSystem.endOnlineBattle(playerWon);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
        this.clearBattleState();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultOverlay = document.createElement('div');
        resultOverlay.className = 'battle-result-overlay';
        resultOverlay.style.display = 'flex'; // –Ø–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        resultOverlay.style.opacity = '0'; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        
        if (playerWon) {
            // –ó–≤—É–∫ –ø–æ–±–µ–¥—ã
            this.soundSystem.playSound('victory');
            
            // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            const user = this.getUser();
            const newGold = user.gold + 25;
            const newGems = user.gems + 1;
            const newExp = user.experience + 10;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            await this.saveUser({
                gold: newGold,
                gems: newGems,
                experience: newExp
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
            user.gold = newGold;
            user.gems = newGems;
            user.experience = newExp;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            await this.checkLevelUp(user);
            
            // –û–ø—ã—Ç –∫–ª–∞–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            console.log('üè∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–Ω–∞ –¥–ª—è –æ–ø—ã—Ç–∞...');
            console.log('   - window.clansSystem:', window.clansSystem ? '–µ—Å—Ç—å' : '–ù–ï–¢');
            console.log('   - user.clanId:', user.clanId);
            
            if (user.clanId) {
                if (window.clansSystem) {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞–Ω –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                    if (!window.clansSystem.currentClan) {
                        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞–Ω –¥–ª—è –æ–ø—ã—Ç–∞...');
                        await window.clansSystem.loadUserClan();
                    }
                    
                    if (window.clansSystem.currentClan) {
                        console.log('‚úÖ –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∫–ª–∞–Ω—É:', window.clansSystem.currentClan.name);
                        await window.clansSystem.addClanExp(10);
                        console.log('‚úÖ –û–ø—ã—Ç –∫–ª–∞–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω: +10');
                    } else {
                        console.log('‚ö†Ô∏è –ö–ª–∞–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞');
                    }
                } else {
                    console.log('‚ö†Ô∏è clansSystem –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
            } else {
                console.log('‚ÑπÔ∏è –ò–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ');
            }
            
            resultOverlay.innerHTML = `
                <div class="battle-result victory">
                    <div class="result-icon">üëë</div>
                    <div class="result-title">–ü–û–ë–ï–î–ê!</div>
                    <div class="result-rewards">
                        <div class="reward-item">+25 ü™ô</div>
                        <div class="reward-item">+1 üíé</div>
                        <div class="reward-item">+10 EXP</div>
                    </div>
                    <div class="result-buttons">
                        <button class="btn primary" onclick="gameData.backToMenu()">üìã –í –º–µ–Ω—é</button>
                        <button class="btn secondary" onclick="gameData.playAgain()">üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ</button>
                    </div>
                </div>
            `;
        } else {
            // –ó–≤—É–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            this.soundSystem.playSound('defeat');
            
            resultOverlay.innerHTML = `
                <div class="battle-result defeat">
                    <div class="result-icon">üíÄ</div>
                    <div class="result-title">–ü–û–†–ê–ñ–ï–ù–ò–ï</div>
                    <div class="result-message">–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</div>
                    <div class="result-buttons">
                        <button class="btn primary" onclick="gameData.backToMenu()">üìã –í –º–µ–Ω—é</button>
                        <button class="btn secondary" onclick="gameData.playAgain()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                    </div>
                </div>
            `;
        }
        
        console.log('Adding result overlay to body');
        document.body.appendChild(resultOverlay);
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
            resultOverlay.style.opacity = '1';
            resultOverlay.classList.add('active');
            console.log('Result overlay should be visible now');
        }, 100);
    }

    playAgain() {
        // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const resultOverlay = document.querySelector('.battle-result-overlay');
        if (resultOverlay && document.body.contains(resultOverlay)) {
            document.body.removeChild(resultOverlay);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        this.clearBattleState();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±–æ–π
        this.startBotBattle();
    }

    async checkLevelUp(user) {
        const expNeeded = user.level <= 5 ? 30 : 30 + (Math.floor((user.level - 1) / 5) * 50);
        
        if (user.experience >= expNeeded) {
            const newLevel = user.level + 1;
            const newExp = user.experience - expNeeded;
            const newGold = user.gold + 100;
            const newGems = user.gems + 5;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await this.saveUser({
                level: newLevel,
                experience: newExp,
                gold: newGold,
                gems: newGems
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
            user.level = newLevel;
            user.experience = newExp;
            user.gold = newGold;
            user.gems = newGems;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            this.showLevelUpModal(newLevel);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∫–∞–ª—É –æ–ø—ã—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            setTimeout(() => {
                this.updateExperienceBar(user);
                this.updateUserInfo();
            }, 100);
        }
    }

    showLevelUpModal(newLevel) {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const overlay = document.createElement('div');
        overlay.className = 'level-up-overlay';
        overlay.innerHTML = `
            <div class="level-up-modal">
                <div class="level-up-glow"></div>
                <div class="level-up-sparkles">
                    <div class="sparkle" style="top: 10%; left: 20%; animation-delay: 0s;">‚ú®</div>
                    <div class="sparkle" style="top: 80%; left: 15%; animation-delay: 0.3s;">‚ú®</div>
                    <div class="sparkle" style="top: 15%; left: 80%; animation-delay: 0.6s;">‚ú®</div>
                    <div class="sparkle" style="top: 85%; left: 75%; animation-delay: 0.9s;">‚ú®</div>
                    <div class="sparkle" style="top: 50%; left: 10%; animation-delay: 0.2s;">‚≠ê</div>
                    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 0.5s;">‚≠ê</div>
                </div>
                <div class="level-up-icon">üéâ</div>
                <div class="level-up-title">–ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!</div>
                <div class="level-up-level">–£—Ä–æ–≤–µ–Ω—å ${newLevel}</div>
                <div class="level-up-rewards">
                    <div class="level-up-reward-item">
                        <div class="reward-icon">ü™ô</div>
                        <div class="reward-text">+100 –ó–æ–ª–æ—Ç–∞</div>
                    </div>
                    <div class="level-up-reward-item">
                        <div class="reward-icon">üíé</div>
                        <div class="reward-text">+5 –ì–µ–º–æ–≤</div>
                    </div>
                </div>
                <button class="btn primary close-level-up-btn">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã
        this.soundSystem.playSound('victory');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-level-up-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            }, 300);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ - —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç

    showBattleInfo(mode) {
        const modal = document.getElementById('battle-mode-info-modal');
        const content = document.getElementById('battle-mode-info-content');
        const title = document.getElementById('battle-mode-info-title');
        
        let infoHtml = '';
        
        if (mode === 'bot') {
            title.textContent = 'ü§ñ –ë–æ–π —Å –±–æ—Ç–æ–º - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É</h3>
                    <div class="info-divider"></div>
                    <div class="chance-item">
                        <span class="rarity-label">ü™ô –ó–æ–ª–æ—Ç–æ</span>
                        <span class="chance-value">+25</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label">üíé –ì–µ–º—ã</span>
                        <span class="chance-value">+1</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label">‚≠ê –û–ø—ã—Ç</span>
                        <span class="chance-value">+10</span>
                    </div>
                    <div class="info-divider"></div>
                    <h4>‚öîÔ∏è –û–ø—ã—Ç –∫–ª–∞–Ω–∞:</h4>
                    <div class="info-note">
                        ‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –≤ –∫–ª–∞–Ω–µ, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç +10 –æ–ø—ã—Ç–∞<br>
                        üìä –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è: –£—Ä–æ–≤–µ–Ω—å √ó 100 –æ–ø—ã—Ç–∞
                    </div>
                    <div class="info-divider"></div>
                    <h4>üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å:</h4>
                    <div class="info-note">
                        ‚≠ê –ü–µ—Ä–≤—ã–π –±–æ–π: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞!<br>
                        ‚öîÔ∏è –°–ª–µ–¥—É—é—â–∏–µ –±–æ–∏: —à–∞–Ω—Å ~50%
                    </div>
                </div>
            `;
        } else if (mode === 'online') {
            title.textContent = 'üë• –û–Ω–ª–∞–π–Ω –±–æ–π - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–≥–∏ –¥–ª—è –∏–≥—Ä—ã:</h4>
                    <div class="upgrade-list-info">
                        <div>1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É (–∫–æ–¥ 6 —Ü–∏—Ñ—Ä)</div>
                        <div>2Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º</div>
                        <div>3Ô∏è‚É£ –î—Ä—É–≥ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è</div>
                        <div>4Ô∏è‚É£ –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</div>
                    </div>
                    <div class="info-divider"></div>
                    <h4>‚ö†Ô∏è –í–∞–∂–Ω–æ:</h4>
                    <div class="info-note">
                        ‚ùå –ù–∞–≥—Ä–∞–¥—ã –ù–ï –¥–∞—é—Ç—Å—è (–∑–æ–ª–æ—Ç–æ, –≥–µ–º—ã, –æ–ø—ã—Ç)<br>
                        ‚ùå –û–ø—ã—Ç –∫–ª–∞–Ω—É –ù–ï –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è<br>
                        ‚úÖ –ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å –¥—Ä—É–∑—å—è–º–∏
                    </div>
                    <div class="info-divider"></div>
                    <h4>‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h4>
                    <div class="upgrade-list-info">
                        <div>üîÑ Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</div>
                        <div>üåê –ò–≥—Ä–∞ —á–µ—Ä–µ–∑ Firebase</div>
                        <div>üéØ –ë–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</div>
                    </div>
                </div>
            `;
        } else if (mode === 'ranked') {
            title.textContent = 'üèÜ –†–∞–Ω–≥–æ–≤—ã–µ –±–æ–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>üìä –°–∏—Å—Ç–µ–º–∞ ELO</h3>
                    <div class="info-divider"></div>
                    <h4>–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:</h4>
                    <div class="chance-item">
                        <span class="rarity-label">üëë –ü–æ–±–µ–¥–∞</span>
                        <span class="chance-value">+10 ELO</span>
                    </div>
                    <div class="chance-item chance-bad">
                        <span class="rarity-label">üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ</span>
                        <span class="chance-value">-5 ELO</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-legendary">‚≠ê –í—Å–µ –∫–∞—Ä—Ç—ã –≤—ã–∂–∏–ª–∏</span>
                        <span class="chance-value">+5 ELO</span>
                    </div>
                    <div class="info-divider"></div>
                    <h4>üéñÔ∏è –ó–≤–∞–Ω–∏—è:</h4>
                    <div class="upgrade-list-info">
                        <div>ü•â –ù–æ–≤–∏—á–æ–∫ (0-999)</div>
                        <div>ü•â –ë—Ä–æ–Ω–∑–∞ (1000-1499)</div>
                        <div>ü•à –°–µ—Ä–µ–±—Ä–æ (1500-1999)</div>
                        <div>ü•á –ó–æ–ª–æ—Ç–æ (2000-2499)</div>
                        <div>üíé –ü–ª–∞—Ç–∏–Ω–∞ (2500-2999)</div>
                        <div>üí† –ê–ª–º–∞–∑ (3000+)</div>
                    </div>
                    <div class="info-divider"></div>
                    <div class="info-note">
                        üìÖ –†–∞–Ω–≥–æ–≤—ã–µ –±–æ–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!<br>
                        üéØ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                    </div>
                </div>
            `;
        }
        
        content.innerHTML = infoHtml;
        modal.style.display = 'flex';
        setTimeout(() => modal.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.getElementById('close-battle-mode-info').onclick = () => {
            modal.style.display = 'none';
            modal.classList.remove('active');
        };
        
        window.onclick = (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
                modal.classList.remove('active');
            }
        };
    }

    // ========== –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø ==========

    startTutorial() {
        this.tutorialStep = 0;
        this.tutorialSteps = [
            {
                text: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –Ω–æ–≤—ã–π –≤–æ–∏–Ω! –Ø ‚Äî Shadow Fiend, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å—Å—è –≤ –º–∏—Ä–µ DOTA CARDS.\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ—Å–Ω–æ–≤!`,
                allowedElements: []
            },
            {
                text: `–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–æ–∫–æ–¥ <strong>FREE50</strong> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:\n\nüí∞ +50 –ó–æ–ª–æ—Ç–∞\nüíé +5 –ì–µ–º–æ–≤\n\n–í–≤–µ–¥–∏ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"!`,
                allowedElements: ['#promo-code', '#use-code-btn'],
                highlightElements: ['.code-input-section']
            },
            {
                text: `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É <strong>"–ö–µ–π—Å—ã"</strong> –∏ –æ—Ç–∫—Ä–æ–π <strong>–û–±—ã—á–Ω—ã–π –∫–µ–π—Å</strong> –∑–∞ 100 –∑–æ–ª–æ—Ç–∞.\n\n–í –∫–µ–π—Å–∞—Ö –≤—ã–ø–∞–¥–∞—é—Ç –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏!`,
                allowedElements: ['[data-tab="cases"]', '.buy-case[data-case="normal"]'],
                highlightElements: ['[data-tab="cases"]']
            },
            {
                text: `–£ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –µ—Å—Ç—å 4 –≤–∞–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n\n‚öîÔ∏è <strong>–£—Ä–æ–Ω</strong> - —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç\n‚ù§Ô∏è <strong>–ó–¥–æ—Ä–æ–≤—å–µ</strong> - —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–Ω–∞ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç\nüõ°Ô∏è <strong>–ó–∞—â–∏—Ç–∞</strong> - —à–∞–Ω—Å –±–ª–æ–∫–∞ —É—Ä–æ–Ω–∞\n‚ö° <strong>–°–∫–æ—Ä–æ—Å—Ç—å</strong> - –∞—Ç–∞–∫ –∑–∞ —Ö–æ–¥\n\n0-19 —Å–∫–æ—Ä–æ—Å—Ç–∏ = 1 –∞—Ç–∞–∫–∞\n20-29 = 2 –∞—Ç–∞–∫–∏, 30+ = 3 –∞—Ç–∞–∫–∏!`,
                allowedElements: ['[data-tab="cards"]'],
                highlightElements: ['[data-tab="cards"]']
            },
            {
                text: `–°–æ–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏–∑ 3 –∫–∞—Ä—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ <strong>"–ö–æ–ª–æ–¥–∞"</strong>, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏ –≤ <strong>"–ë–æ–∏"</strong> –∏ –Ω–∞–∂–º–∏ <strong>"–ù–∞—á–∞—Ç—å –±–æ–π"</strong>!\n\n‚≠ê –ü–µ—Ä–≤—ã–π –±–æ–π - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞!\n\n–£–¥–∞—á–∏, –≤–æ–∏–Ω!`,
                allowedElements: ['[data-tab="deck"]', '[data-tab="battle"]', '#bot-battle-btn'],
                highlightElements: ['[data-tab="deck"]', '[data-tab="battle"]']
            }
        ];
        
        const overlay = document.getElementById('tutorial-overlay');
        overlay.style.display = 'flex';
        setTimeout(() => overlay.classList.add('active'), 10);
        
        this.setupTutorialHandlers();
        this.showTutorialStep(0);
    }

    setupTutorialHandlers() {
        document.getElementById('tutorial-next-btn').onclick = () => this.nextTutorialStep();
        document.getElementById('tutorial-prev-btn').onclick = () => this.prevTutorialStep();
        document.getElementById('skip-tutorial-btn').onclick = () => this.skipTutorial();
    }

    showTutorialStep(step) {
        const stepData = this.tutorialSteps[step];
        const textElement = document.getElementById('tutorial-text');
        const prevBtn = document.getElementById('tutorial-prev-btn');
        const nextBtn = document.getElementById('tutorial-next-btn');
        const counter = document.getElementById('tutorial-step-counter');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞
        textElement.style.opacity = '0';
        setTimeout(() => {
            textElement.innerHTML = stepData.text;
            textElement.style.opacity = '1';
        }, 200);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        counter.textContent = `${step + 1} / ${this.tutorialSteps.length}`;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
        prevBtn.style.display = step > 0 ? 'block' : 'none';
        nextBtn.textContent = step === this.tutorialSteps.length - 1 ? '–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üéÆ' : '–î–∞–ª–µ–µ ‚Üí';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updateTutorialBlocking(stepData);
        
        this.tutorialStep = step;
    }
    
    updateTutorialBlocking(stepData) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏ —Å—Ç—Ä–µ–ª–∫–∏
        document.querySelectorAll('.tutorial-highlight').forEach(el => {
            el.classList.remove('tutorial-highlight');
        });
        
        document.querySelectorAll('.tutorial-arrow').forEach(el => {
            el.remove();
        });
        
        // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.tutorial-blocked').forEach(el => {
            el.classList.remove('tutorial-blocked');
            el.style.pointerEvents = '';
        });
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–∫–ª–∞–¥–∫–∏ –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        const allInteractiveElements = document.querySelectorAll('.nav-btn, .btn, button, input, textarea');
        
        allInteractiveElements.forEach(el => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è
            if (el.id === 'tutorial-next-btn' || el.id === 'tutorial-prev-btn' || el.id === 'skip-tutorial-btn') {
                return;
            }
            
            let isAllowed = false;
            
            if (stepData.allowedElements && stepData.allowedElements.length > 0) {
                stepData.allowedElements.forEach(selector => {
                    try {
                        if (el.matches(selector) || el.closest(selector)) {
                            isAllowed = true;
                        }
                    } catch (e) {}
                });
            }
            
            if (!isAllowed) {
                el.classList.add('tutorial-blocked');
                el.style.pointerEvents = 'none';
            }
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (stepData.highlightElements) {
            stepData.highlightElements.forEach(selector => {
                const element = document.querySelector(selector);
                if (element) {
                    element.classList.add('tutorial-highlight');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É
                    const arrow = document.createElement('div');
                    arrow.className = 'tutorial-arrow';
                    arrow.innerHTML = 'üëá';
                    element.appendChild(arrow);
                }
            });
        }
    }

    nextTutorialStep() {
        if (this.tutorialStep >= this.tutorialSteps.length - 1) {
            this.completeTutorial();
        } else {
            this.showTutorialStep(this.tutorialStep + 1);
        }
    }

    prevTutorialStep() {
        if (this.tutorialStep > 0) {
            this.showTutorialStep(this.tutorialStep - 1);
        }
    }

    async skipTutorial() {
        if (await this.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?', '‚ùì', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')) {
            await this.saveUser({ tutorialCompleted: true });
            
            // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –æ–±—É—á–µ–Ω–∏—è
            const overlay = document.getElementById('tutorial-overlay');
            overlay.classList.remove('active');
            setTimeout(() => {
                overlay.style.display = 'none';
            }, 300);
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            document.querySelectorAll('.tutorial-blocked').forEach(el => {
                el.classList.remove('tutorial-blocked');
                el.style.pointerEvents = '';
            });
            
            document.querySelectorAll('.tutorial-highlight').forEach(el => {
                el.classList.remove('tutorial-highlight');
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–Ω–∫—É—Ä—Å–µ –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è
            setTimeout(() => {
                this.showCompetitionHint();
            }, 500);
        }
    }

    async completeTutorial() {
        await this.saveUser({ tutorialCompleted: true });
        
        // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –æ–±—É—á–µ–Ω–∏—è
        const overlay = document.getElementById('tutorial-overlay');
        overlay.classList.remove('active');
        setTimeout(() => {
            overlay.style.display = 'none';
        }, 300);
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.tutorial-blocked').forEach(el => {
            el.classList.remove('tutorial-blocked');
            el.style.pointerEvents = '';
        });
        
        document.querySelectorAll('.tutorial-highlight').forEach(el => {
            el.classList.remove('tutorial-highlight');
        });
        
        this.updateUserInfo();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–Ω–∫—É—Ä—Å–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        setTimeout(() => {
            this.showCompetitionHint();
        }, 500);
    }

    // ========== –°–ò–°–¢–ï–ú–ê –î–†–£–ó–ï–ô ==========

    switchFriendsTab(tabName) {
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.friends-nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.friends-content-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelector(`[data-friends-tab="${tabName}"]`).classList.add('active');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
        if (tabName === 'my-friends') {
            this.loadFriendsList();
        } else if (tabName === 'requests') {
            this.loadFriendRequests();
        }
    }

    initializeFriendsData(user) {
        if (!user.friends) user.friends = [];
        if (!user.friendRequests) user.friendRequests = { incoming: [], outgoing: [] };
    }

    async loadFriendsList() {
        const user = this.getUser();
        this.initializeFriendsData(user);
        
        const container = document.getElementById('friends-list');
        const countElement = document.getElementById('friends-count');
        
        const friends = user.friends || [];
        countElement.textContent = friends.length;
        container.innerHTML = '';
        
        if (friends.length === 0) {
            container.innerHTML = '<div class="no-friends">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–∏—Å–∫"!</div>';
            return;
        }
        
        for (const friendUserId of friends) {
            const friend = await this.getUserById(friendUserId);
            if (!friend) continue;
            
            const friendDiv = document.createElement('div');
            friendDiv.className = 'friend-item';
            
            const avatarSrc = friend.avatar || this.avatars[0];
            
            friendDiv.innerHTML = `
                <div class="friend-avatar">
                    <img src="${avatarSrc}" alt="${friend.nickname || friend.username}">
                </div>
                <div class="friend-info">
                    <div class="friend-name">${friend.nickname || friend.username}</div>
                    <div class="friend-id">ID: ${friend.userid || '–ù/–î'}</div>
                    <div class="friend-stats">
                        <span>–£—Ä–æ–≤–µ–Ω—å: ${friend.level || 1}</span>
                        <span>–ö–∞—Ä—Ç: ${Object.keys(friend.cards || {}).length}</span>
                    </div>
                </div>
                <div class="friend-actions">
                    <button class="btn small" onclick="gameData.removeFriend('${friendUserId}')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            
            container.appendChild(friendDiv);
        }
    }

    async searchPlayers() {
        const query = document.getElementById('friend-search-input').value.trim();
        const resultsContainer = document.getElementById('search-results');
        
        if (!query) {
            resultsContainer.innerHTML = '<div class="no-results">–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞</div>';
            return;
        }
        
        const currentUser = this.getUser();
        this.initializeFriendsData(currentUser);
        
        resultsContainer.innerHTML = '';
        
        const allUsers = await this.getAllUsers();
        const queryLower = query.toLowerCase();
        
        const results = Object.entries(allUsers).filter(([userId, user]) => {
            if (userId === this.currentUser) return false;
            
            const username = user.username || '';
            const nickname = user.nickname || '';
            const userid = user.userid || '';
            
            return username.toLowerCase().includes(queryLower) ||
                   nickname.toLowerCase().includes(queryLower) ||
                   userid.toLowerCase().includes(queryLower);
        });
        
        if (results.length === 0) {
            resultsContainer.innerHTML = '<div class="no-results">–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        results.forEach(([userId, user]) => {
            const resultDiv = document.createElement('div');
            resultDiv.className = 'search-result-item';
            
            const avatarSrc = user.avatar || this.avatars[0];
            const isFriend = (currentUser.friends || []).includes(userId);
            const hasSentRequest = (currentUser.friendRequests?.outgoing || []).includes(userId);
            const hasIncomingRequest = (currentUser.friendRequests?.incoming || []).includes(userId);
            
            let buttonHTML;
            if (isFriend) {
                buttonHTML = '<span class="already-friends">‚úì –£–∂–µ –¥—Ä—É–∑—å—è</span>';
            } else if (hasSentRequest) {
                buttonHTML = '<span class="request-sent">–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>';
            } else if (hasIncomingRequest) {
                buttonHTML = `<button class="btn primary small" onclick="gameData.acceptFriendRequest('${userId}')">–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å</button>`;
            } else {
                buttonHTML = `<button class="btn primary small" onclick="gameData.sendFriendRequest('${userId}')">–î–æ–±–∞–≤–∏—Ç—å</button>`;
            }
            
            resultDiv.innerHTML = `
                <div class="search-result-avatar">
                    <img src="${avatarSrc}" alt="${user.nickname || user.username}">
                </div>
                <div class="search-result-info">
                    <div class="search-result-name">${user.nickname || user.username}</div>
                    <div class="search-result-id">ID: ${user.userid || '–ù/–î'}</div>
                    <div class="search-result-stats">
                        –£—Ä–æ–≤–µ–Ω—å: ${user.level || 1} | –ö–∞—Ä—Ç: ${Object.keys(user.cards || {}).length}
                    </div>
                </div>
                <div class="search-result-actions">
                    ${buttonHTML}
                </div>
            `;
            
            resultsContainer.appendChild(resultDiv);
        });
    }

    async sendFriendRequest(targetUserId) {
        const currentUser = this.getUser();
        const targetUser = await this.getUserById(targetUserId);
        
        if (!targetUser) {
            await this.showAlert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', '‚ùå', '–û—à–∏–±–∫–∞');
            return;
        }
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(targetUser);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (currentUser.friends && currentUser.friends.includes(targetUserId)) {
            await this.showAlert('–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤–∞—à –¥—Ä—É–≥!', '‚ÑπÔ∏è', '–í–Ω–∏–º–∞–Ω–∏–µ');
            return;
        }
        
        if (currentUser.friendRequests && currentUser.friendRequests.outgoing && currentUser.friendRequests.outgoing.includes(targetUserId)) {
            await this.showAlert('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É!', '‚ÑπÔ∏è', '–í–Ω–∏–º–∞–Ω–∏–µ');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const newOutgoing = [...(currentUser.friendRequests?.outgoing || []), targetUserId];
        const newIncoming = [...(targetUser.friendRequests?.incoming || []), this.currentUser];
        
        await this.saveUser({ 'friendRequests/outgoing': newOutgoing });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(targetUserId, { 'friendRequests/incoming': newIncoming });
        } else {
            targetUser.friendRequests.incoming = newIncoming;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        await this.showAlert(`–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É ${targetUser.nickname || targetUser.username}!`, '‚úÖ', '–£—Å–ø–µ—Ö');
        this.searchPlayers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    }

    async acceptFriendRequest(senderUserId) {
        const currentUser = this.getUser();
        const sender = await this.getUserById(senderUserId);
        
        if (!sender) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(sender);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
        const newIncoming = (currentUser.friendRequests?.incoming || []).filter(u => u !== senderUserId);
        const newFriends = [...(currentUser.friends || []), senderUserId];
        
        const senderOutgoing = (sender.friendRequests?.outgoing || []).filter(u => u !== this.currentUser);
        const senderFriends = [...(sender.friends || []), this.currentUser];
        
        await this.saveUser({
            'friendRequests/incoming': newIncoming,
            'friends': newFriends
        });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(senderUserId, {
                'friendRequests/outgoing': senderOutgoing,
                'friends': senderFriends
            });
        } else {
            sender.friendRequests.outgoing = senderOutgoing;
            sender.friends = senderFriends;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('upgrade');
        await this.showAlert(`–¢–µ–ø–µ—Ä—å –≤—ã –¥—Ä—É–∑—å—è —Å ${sender.nickname || sender.username}!`, '‚úÖ', '–£—Å–ø–µ—Ö');
        this.loadFriendRequests();
    }

    async rejectFriendRequest(senderUserId) {
        const currentUser = this.getUser();
        const sender = await this.getUserById(senderUserId);
        
        if (!sender) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(sender);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        const newIncoming = (currentUser.friendRequests?.incoming || []).filter(u => u !== senderUserId);
        const senderOutgoing = (sender.friendRequests?.outgoing || []).filter(u => u !== this.currentUser);
        
        await this.saveUser({ 'friendRequests/incoming': newIncoming });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(senderUserId, { 'friendRequests/outgoing': senderOutgoing });
        } else {
            sender.friendRequests.outgoing = senderOutgoing;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        this.loadFriendRequests();
    }

    async cancelFriendRequest(targetUserId) {
        const currentUser = this.getUser();
        const target = await this.getUserById(targetUserId);
        
        if (!target) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(target);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        const newOutgoing = (currentUser.friendRequests?.outgoing || []).filter(u => u !== targetUserId);
        const targetIncoming = (target.friendRequests?.incoming || []).filter(u => u !== this.currentUser);
        
        await this.saveUser({ 'friendRequests/outgoing': newOutgoing });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(targetUserId, { 'friendRequests/incoming': targetIncoming });
        } else {
            target.friendRequests.incoming = targetIncoming;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        this.loadFriendRequests();
    }

    async removeFriend(friendUserId) {
        if (!await this.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞?', '‚ùì', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')) return;
        
        const currentUser = this.getUser();
        const friend = await this.getUserById(friendUserId);
        
        if (!friend) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(friend);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–∑–µ–π
        const newFriends = (currentUser.friends || []).filter(u => u !== friendUserId);
        const friendNewFriends = (friend.friends || []).filter(u => u !== this.currentUser);
        
        await this.saveUser({ friends: newFriends });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(friendUserId, { friends: friendNewFriends });
        } else {
            friend.friends = friendNewFriends;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        this.loadFriendsList();
    }

    async loadFriendRequests() {
        const user = this.getUser();
        this.initializeFriendsData(user);
        
        const incomingContainer = document.getElementById('incoming-requests');
        const outgoingContainer = document.getElementById('outgoing-requests');
        const incomingCount = document.getElementById('incoming-count');
        const outgoingCount = document.getElementById('outgoing-count');
        
        const incoming = user.friendRequests?.incoming || [];
        const outgoing = user.friendRequests?.outgoing || [];
        
        incomingCount.textContent = incoming.length;
        outgoingCount.textContent = outgoing.length;
        
        // –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        incomingContainer.innerHTML = '';
        if (incoming.length === 0) {
            incomingContainer.innerHTML = '<div class="no-requests">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>';
        } else {
            for (const senderUserId of incoming) {
                const sender = await this.getUserById(senderUserId);
                if (!sender) continue;
                
                const requestDiv = document.createElement('div');
                requestDiv.className = 'request-item';
                
                const avatarSrc = sender.avatar || this.avatars[0];
                
                requestDiv.innerHTML = `
                    <div class="request-avatar">
                        <img src="${avatarSrc}" alt="${sender.nickname || sender.username}">
                    </div>
                    <div class="request-info">
                        <div class="request-name">${sender.nickname || sender.username}</div>
                        <div class="request-id">ID: ${sender.userid || '–ù/–î'}</div>
                    </div>
                    <div class="request-actions">
                        <button class="btn primary small" onclick="gameData.acceptFriendRequest('${senderUserId}')">–ü—Ä–∏–Ω—è—Ç—å</button>
                        <button class="btn secondary small" onclick="gameData.rejectFriendRequest('${senderUserId}')">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                    </div>
                `;
                
                incomingContainer.appendChild(requestDiv);
            }
        }
        
        // –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        outgoingContainer.innerHTML = '';
        if (outgoing.length === 0) {
            outgoingContainer.innerHTML = '<div class="no-requests">–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>';
        } else {
            for (const targetUserId of outgoing) {
                const target = await this.getUserById(targetUserId);
                if (!target) continue;
                
                const requestDiv = document.createElement('div');
                requestDiv.className = 'request-item';
                
                const avatarSrc = target.avatar || this.avatars[0];
                
                requestDiv.innerHTML = `
                    <div class="request-avatar">
                        <img src="${avatarSrc}" alt="${target.nickname || target.username}">
                    </div>
                    <div class="request-info">
                        <div class="request-name">${target.nickname || target.username}</div>
                        <div class="request-id">ID: ${target.userid || '–ù/–î'}</div>
                    </div>
                    <div class="request-actions">
                        <button class="btn secondary small" onclick="gameData.cancelFriendRequest('${targetUserId}')">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                    </div>
                `;
                
                outgoingContainer.appendChild(requestDiv);
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ localStorage –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase
if (typeof firebaseAdapter !== 'undefined') {
    const originalSetItem = localStorage.setItem.bind(localStorage);
    
    localStorage.setItem = function(key, value) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ –æ–±—ã—á–Ω–æ
        originalSetItem(key, value);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if (key === 'dotaCardsUsers' && gameData && gameData.currentUser && gameData.useFirebase) {
            const users = JSON.parse(value);
            const currentUserData = users[gameData.currentUser];
            
            if (currentUserData) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Firebase
                firebaseAdapter.updateUserData(gameData.currentUser, currentUserData)
                    .catch(err => console.error('Auto-sync error:', err));
            }
        }
    };
    
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è localStorage ‚Üí Firebase –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
let gameData;

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
        gameData = new GameData();
        window.gameData = gameData; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è Firebase
    });
} else {
    console.log('üìÑ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
    gameData = new GameData();
    window.gameData = gameData; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è Firebase
}

