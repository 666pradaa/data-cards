// –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
class SoundSystem {
    constructor() {
        this.masterVolume = 0.3;
        this.soundEnabled = localStorage.getItem('soundEnabled') !== 'false';
        this.musicEnabled = localStorage.getItem('musicEnabled') !== 'false';
        this.currentBgMusic = null;
        
        // –ü—É—Ç–∏ –∫ –∑–≤—É–∫–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
        this.soundPaths = {
            'whoosh': 'sounds/whoosh.mp3',
            'attack': 'sounds/attack.mp3',
            'critAttack': 'sounds/crit_attack.mp3',
            'damage': 'sounds/damage.mp3',
            'death': 'sounds/death.mp3',
            'openCase': 'sounds/open_case.mp3',
            'victory': 'sounds/victory.mp3',
            'defeat': 'sounds/defeat.mp3',
            'upgrade': 'sounds/upgrade.mp3',
            'backgroundMusic': 'sounds/background_music.mp3'
        };
    }

    playSound(type, volume = 1) {
        if (!this.soundEnabled) return;
        
        const soundPath = this.soundPaths[type];
        if (soundPath) {
            try {
                const audio = new Audio(soundPath);
                audio.volume = this.masterVolume * volume;
                audio.play().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            } catch (e) {
                // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        }
    }

    startBackgroundMusic() {
        if (!this.musicEnabled) {
            console.log('Music is disabled');
            return;
        }
        
        // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç - –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        if (this.currentBgMusic && !this.currentBgMusic.paused) {
            console.log('Music is already playing');
            return;
        }
        
        try {
            console.log('Attempting to start background music from:', this.soundPaths['backgroundMusic']);
            this.currentBgMusic = new Audio(this.soundPaths['backgroundMusic']);
            this.currentBgMusic.volume = this.masterVolume * 0.3;
            this.currentBgMusic.loop = true;
            this.currentBgMusic.play()
                .then(() => console.log('‚úÖ Background music started successfully!'))
                .catch(err => console.error('‚ùå Failed to play music:', err.message));
        } catch (e) {
            console.error('‚ùå Error creating audio:', e.message);
        }
    }

    startBattleMusic() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º—É–∑—ã–∫—É —á—Ç–æ –∏ –≤ –º–µ–Ω—é - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä–∞—Ç—å
    }

    stopBackgroundMusic() {
        if (this.currentBgMusic) {
            this.currentBgMusic.pause();
            this.currentBgMusic = null;
        }
    }

    stopBattleMusic() {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –º—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å
    }

    toggleSound() {
        this.soundEnabled = !this.soundEnabled;
        localStorage.setItem('soundEnabled', this.soundEnabled);
        return this.soundEnabled;
    }

    toggleMusic() {
        this.musicEnabled = !this.musicEnabled;
        localStorage.setItem('musicEnabled', this.musicEnabled);
        
        if (this.musicEnabled) {
            this.startBackgroundMusic();
        } else {
            this.stopBackgroundMusic();
        }
        
        return this.musicEnabled;
    }
}

// –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
class GameData {
    constructor() {
        this.currentUser = null;
        this.currentUserData = null;
        this.allUsersCache = {}; // –ö–µ—à –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        this.useFirebase = typeof firebase !== 'undefined' && typeof firebaseAdapter !== 'undefined';
        
        // –°–æ–∑–¥–∞—ë–º —É–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.users = this.createUsersProxy();
        
        this.currentTheme = localStorage.getItem('dotaCardsTheme') || 'dark';
        this.soundSystem = new SoundSystem();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–æ–ª–æ–¥—ã
        this.deckRarityFilter = 'all';
        this.deckStarsFilter = 'all';
        
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É)
        this.avatars = [
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/pudge.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/invoker.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png',
            'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png'
        ];
        
        console.log('üéÆ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', this.useFirebase ? '‚òÅÔ∏è Firebase' : 'üíæ localStorage');
        
        this.initData();
        this.initUI();
    }

    createUsersProxy() {
        if (!this.useFirebase) {
            // –û–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è localStorage
            return JSON.parse(localStorage.getItem('dotaCardsUsers') || '{}');
        }
        
        // –ü—Ä–æ–∫—Å–∏ –¥–ª—è Firebase - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ this.users[this.currentUser]
        return new Proxy({}, {
            get: (target, prop) => {
                if (prop === this.currentUser) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return this.currentUserData;
                }
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞
                return this.allUsersCache[prop];
            },
            set: (target, prop, value) => {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                if (prop === this.currentUser && this.useFirebase) {
                    this.currentUserData = value;
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ saveUser()
                }
                return true;
            }
        });
    }

    initData() {
        // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–æ–±—â–∞—è —Å–∏–ª–∞ ~100-120 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, +20-30 –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—å)
        this.cards = {
            // –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~100-120)
            'Shadow Shaman': {
                name: 'Shadow Shaman',
                rarity: 'common',
                damage: 30,
                health: 80,
                defense: 15,
                speed: 18,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_shaman.png'
            },
            'Chen': {
                name: 'Chen',
                rarity: 'common',
                damage: 25,
                health: 90,
                defense: 20,
                speed: 15,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/chen.png'
            },
            'Lycan': {
                name: 'Lycan',
                rarity: 'common',
                damage: 35,
                health: 70,
                defense: 10,
                speed: 25,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/lycan.png'
            },
            // –†–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~130-150)
            'Lion': {
                name: 'Lion',
                rarity: 'rare',
                damage: 40,
                health: 85,
                defense: 18,
                speed: 22,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png'
            },
            'Sven': {
                name: 'Sven',
                rarity: 'rare',
                damage: 45,
                health: 100,
                defense: 15,
                speed: 18,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/sven.png'
            },
            'Queen Of Pain': {
                name: 'Queen Of Pain',
                rarity: 'rare',
                damage: 42,
                health: 80,
                defense: 12,
                speed: 30,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png'
            },
            // –≠–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~160-180)
            'Terrorblade': {
                name: 'Terrorblade',
                rarity: 'epic',
                damage: 55,
                health: 110,
                defense: 20,
                speed: 20,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/terrorblade.png'
            },
            'Crystal Maiden': {
                name: 'Crystal Maiden',
                rarity: 'epic',
                damage: 50,
                health: 100,
                defense: 25,
                speed: 18,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png'
            },
            'Spirit Breaker': {
                name: 'Spirit Breaker',
                rarity: 'epic',
                damage: 60,
                health: 120,
                defense: 15,
                speed: 16,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/spirit_breaker.png'
            },
            // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Å–∏–ª–∞ ~190-220)
            'Shadow Fiend': {
                name: 'Shadow Fiend',
                rarity: 'legendary',
                damage: 75,
                health: 130,
                defense: 22,
                speed: 26,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png'
            },
            'Pudge': {
                name: 'Pudge',
                rarity: 'legendary',
                damage: 65,
                health: 160,
                defense: 30,
                speed: 12,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/pudge.png'
            },
            'Invoker': {
                name: 'Invoker',
                rarity: 'legendary',
                damage: 70,
                health: 120,
                defense: 18,
                speed: 32,
                image: 'https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/heroes/invoker.png'
            }
        };

        // –£–ª—É—á—à–µ–Ω–∏—è
        this.upgrades = {
            'Moon Shard': { name: 'Moon Shard', effect: 'speed', value: 20, description: '+20 —Å–∫–æ—Ä–æ—Å—Ç–∏' },
            'Divine Rapier': { name: 'Divine Rapier', effect: 'damage', value: 50, description: '+50 —É—Ä–æ–Ω–∞' },
            'Heart of Tarrasque': { name: 'Heart of Tarrasque', effect: 'health', value: 100, description: '+100 –∑–¥–æ—Ä–æ–≤—å—è' },
            'Black King Bar': { name: 'Black King Bar', effect: 'defense', value: 20, description: '+20% –∑–∞—â–∏—Ç—ã' }
        };

        // –ö–µ–π—Å—ã
        this.cases = {
            normal: { name: '–û–±—ã—á–Ω—ã–π –∫–µ–π—Å', cost: 100, currency: 'gold', rewards: {} },
            mega: { name: '–ú–µ–≥–∞ –±–æ–∫—Å', cost: 10, currency: 'gems', rewards: {} },
            upgrades: { name: '–£–ª—É—á—à–µ–Ω–∏—è', cost: 250, currency: 'gold', rewards: { upgrades: 1 } }
        };
    }

    initUI() {
        console.log('üîß initUI() –≤—ã–∑–≤–∞–Ω - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
        this.applyTheme();
        this.setupEventListeners();
        this.checkAuth();
    }

    applyTheme() {
        document.body.classList.toggle('light-theme', this.currentTheme === 'light');
    }

    toggleTheme() {
        this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
        localStorage.setItem('dotaCardsTheme', this.currentTheme);
        this.applyTheme();
        this.updateThemeButton();
        this.soundSystem.playSound('click');
    }

    updateThemeButton() {
        const button = document.getElementById('theme-toggle');
        button.textContent = this.currentTheme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
    }

    toggleSound() {
        const enabled = this.soundSystem.toggleSound();
        const button = document.getElementById('sound-toggle');
        button.textContent = enabled ? 'üîä' : 'üîá';
        if (enabled) {
            this.soundSystem.playSound('click');
        }
    }

    updateSoundButton() {
        const button = document.getElementById('sound-toggle');
        button.textContent = this.soundSystem.soundEnabled ? 'üîä' : 'üîá';
    }

    toggleMusic() {
        const enabled = this.soundSystem.toggleMusic();
        const button = document.getElementById('music-toggle');
        button.textContent = enabled ? 'üéµ' : 'üîá';
    }

    updateMusicButton() {
        const button = document.getElementById('music-toggle');
        if (button) {
            button.textContent = this.soundSystem.musicEnabled ? 'üéµ' : 'üîá';
        }
    }

    setupEventListeners() {
        console.log('üîß setupEventListeners() –≤—ã–∑–≤–∞–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let musicStarted = false;
        document.addEventListener('click', () => {
            if (!musicStarted) {
                musicStarted = true;
                this.soundSystem.startBackgroundMusic();
                console.log('Background music started after user interaction');
            }
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º whoosh —Ç–æ–ª—å–∫–æ –∫ –∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-btn')) {
                this.soundSystem.playSound('whoosh', 0.5);
            }
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥—Ä—É–∑–µ–π
        document.querySelectorAll('.friends-nav-btn').forEach(btn => {
            btn.addEventListener('click', () => this.switchFriendsTab(btn.dataset.friendsTab));
        });

        // –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π
        document.getElementById('friend-search-btn').addEventListener('click', () => this.searchPlayers());
        document.getElementById('friend-search-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.searchPlayers();
        });

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');
        const logoutBtn = document.getElementById('logout-btn');
        
        if (loginBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            loginBtn.addEventListener('click', async () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞!');
                try {
                    await this.login();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
                    alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ login-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (registerBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            registerBtn.addEventListener('click', async () => {
                console.log('üîµ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
                try {
                    await this.register();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
                    alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ register-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (logoutBtn) {
            logoutBtn.addEventListener('click', async () => {
                try {
                    await this.logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
                    alert('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message);
                }
            });
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });

        // –ö–µ–π—Å—ã
        document.querySelectorAll('.buy-case').forEach(btn => {
            btn.addEventListener('click', (e) => this.buyCase(e.target.dataset.case));
        });
        
        document.querySelectorAll('.case-info-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.showCaseInfo(e.target.dataset.case));
        });
        
        document.getElementById('close-case-info-modal').addEventListener('click', () => this.closeCaseInfoModal());

        // –ë–æ–∏
        const botBtn = document.getElementById('bot-battle-btn');
        if (botBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞');
            botBtn.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –±–æ–π —Å –±–æ—Ç–æ–º');
                this.startBotBattle();
            });
        }
        
        const onlineBtn = document.getElementById('online-battle-btn');
        if (onlineBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è –Ω–∞–π–¥–µ–Ω–∞');
            onlineBtn.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–±–æ–π');
                console.log('window.onlineBattlesSystem:', window.onlineBattlesSystem);
                if (window.onlineBattlesSystem) {
                    window.onlineBattlesSystem.openOnlineBattleModal();
                } else {
                    alert('–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–∞—Ö
        setTimeout(() => {
            document.querySelectorAll('.mode-info-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    this.showBattleInfo(btn.dataset.info);
                });
            });
        }, 500);

        // –ü—Ä–æ–º–æ-–∫–æ–¥—ã
        document.getElementById('use-code-btn').addEventListener('click', () => this.usePromoCode());

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        document.getElementById('theme-toggle').addEventListener('click', () => this.toggleTheme());

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
        const musicToggleBtn = document.getElementById('music-toggle');
        if (musicToggleBtn) {
            musicToggleBtn.addEventListener('click', () => this.toggleMusic());
            this.updateMusicButton();
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
        document.getElementById('sound-toggle').addEventListener('click', () => this.toggleSound());

        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        document.getElementById('close-admin').addEventListener('click', () => this.closeAdminPanel());
        document.getElementById('admin-search').addEventListener('input', (e) => this.searchUsers(e.target.value));

        // –ü—Ä–æ—Ñ–∏–ª—å
        document.getElementById('change-avatar-btn').addEventListener('click', () => this.openAvatarModal());
        document.getElementById('close-avatar-modal').addEventListener('click', () => this.closeAvatarModal());
        document.getElementById('close-edit-modal').addEventListener('click', () => this.closeEditModal());
        document.getElementById('save-edit-btn').addEventListener('click', () => this.saveEdit());
        document.getElementById('upload-avatar-btn').addEventListener('click', () => document.getElementById('avatar-file-input').click());
        document.getElementById('avatar-file-input').addEventListener('change', (e) => this.handleAvatarUpload(e));
        
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.openEditModal(e.target.dataset.field));
        });
    }

    handleAvatarUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (!file.type.startsWith('image/')) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!');
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Data URL
        const reader = new FileReader();
        reader.onload = (e) => {
            const avatarUrl = e.target.result;
            this.selectAvatar(avatarUrl);
        };
        reader.readAsDataURL(file);
    }

    async generateUserId() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä (6 —Ü–∏—Ñ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        let id;
        const allUsers = await this.getAllUsers();
        do {
            id = Math.floor(100000 + Math.random() * 900000).toString();
        } while (Object.values(allUsers).some(u => u.userid === id || u.userId === id));
        return id;
    }

    generateRandomNickname() {
        const adjectives = [
            '–ú–æ–≥—É—á–∏–π', '–¢—ë–º–Ω—ã–π', '–°–≤–µ—Ç–ª—ã–π', '–ë—ã—Å—Ç—Ä—ã–π', '–ú—É–¥—Ä—ã–π', 
            '–•—Ä–∞–±—Ä—ã–π', '–î–∏–∫–∏–π', '–•–∏—Ç—Ä—ã–π', '–î—Ä–µ–≤–Ω–∏–π', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
            '–í–µ–ª–∏–∫–∏–π', '–ì—Ä–æ–∑–Ω—ã–π', '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π', '–í–µ—á–Ω—ã–π'
        ];
        const nouns = [
            '–í–æ–∏–Ω', '–ú–∞–≥', '–û—Ö–æ—Ç–Ω–∏–∫', '–°—Ç—Ä–∞–Ω–Ω–∏–∫', '–•—Ä–∞–Ω–∏—Ç–µ–ª—å',
            '–ì–µ—Ä–æ–π', '–õ—É—á–Ω–∏–∫', '–†—ã—Ü–∞—Ä—å', '–ê—Å—Å–∞—Å–∏–Ω', '–ß–µ–º–ø–∏–æ–Ω',
            '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å', '–ó–∞—â–∏—Ç–Ω–∏–∫', '–ó–∞–≤–æ–µ–≤–∞—Ç–µ–ª—å', '–ú—Å—Ç–∏—Ç–µ–ª—å', '–°—Ç—Ä–∞–∂'
        ];
        
        const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
        const noun = nouns[Math.floor(Math.random() * nouns.length)];
        const num = Math.floor(Math.random() * 999) + 1;
        
        return `${adj}${noun}${num}`;
    }

    checkAuth() {
        const currentUser = localStorage.getItem('dotaCardsCurrentUser');
        if (currentUser && this.users[currentUser]) {
            this.currentUser = currentUser;
            this.showMainMenu();
        } else {
            this.showAuthScreen();
        }
    }

    showAuthScreen() {
        document.getElementById('auth-screen').classList.add('active');
        document.getElementById('main-menu').classList.remove('active');
        document.getElementById('battle-screen').classList.remove('active');
        document.getElementById('admin-panel').classList.remove('active');
    }

    showMainMenu() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–æ–π
        const battleRestored = this.loadBattleState();
        if (battleRestored) {
            console.log('‚úÖ –ë–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –≤ –±–æ—é
        }
        
        document.getElementById('auth-screen').classList.remove('active');
        document.getElementById('main-menu').classList.add('active');
        document.getElementById('battle-screen').classList.remove('active');
        document.getElementById('admin-panel').classList.remove('active');
        this.updateUserInfo();
        this.updateThemeButton();
        this.updateSoundButton();
        this.updateMusicButton();
        this.loadCards();
        this.loadUpgrades();
        this.loadDeck();
        this.loadProfile();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞
        const user = this.getUser();
        if (user && user.isAdmin) {
            this.createAdminButton();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
        if (user && !user.tutorialCompleted) {
            console.log('üéì –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
            setTimeout(() => this.startTutorial(), 500);
        }
    }

    async loadProfile() {
        const user = this.getUser();
        if (!user) return;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!user.nickname) {
            user.nickname = this.generateRandomNickname();
            await this.saveUser({ nickname: user.nickname });
        }
        if (!user.userId && !user.userid) {
            user.userid = await this.generateUserId();
            await this.saveUser({ userid: user.userid });
        }
        if (!user.avatar) {
            user.avatar = this.avatars[0];
            await this.saveUser({ avatar: user.avatar });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        document.getElementById('user-avatar').src = user.avatar;
        document.getElementById('display-nickname').textContent = user.nickname;
        document.getElementById('display-userid').textContent = user.userid || user.userId;
        document.getElementById('profile-level').textContent = user.level;
        document.getElementById('profile-gold').textContent = user.gold;
        document.getElementById('profile-gems').textContent = user.gems;
        
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        const cardCount = Object.keys(user.cards || {}).length;
        document.getElementById('profile-cards').textContent = cardCount;
    }

    openAvatarModal() {
        const modal = document.getElementById('avatar-modal');
        const grid = document.getElementById('avatar-grid');
        grid.innerHTML = '';
        
        this.avatars.forEach(avatarUrl => {
            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'avatar-option';
            avatarDiv.innerHTML = `<img src="${avatarUrl}" alt="Avatar">`;
            avatarDiv.addEventListener('click', () => this.selectAvatar(avatarUrl));
            grid.appendChild(avatarDiv);
        });
        
        modal.classList.add('active');
    }

    closeAvatarModal() {
        document.getElementById('avatar-modal').classList.remove('active');
    }

    async selectAvatar(avatarUrl) {
        await this.saveUser({ avatar: avatarUrl });
        this.loadProfile();
        this.closeAvatarModal();
    }

    openEditModal(field) {
        this.editingField = field;
        const modal = document.getElementById('edit-modal');
        const title = document.getElementById('edit-modal-title');
        const input = document.getElementById('edit-field-input');
        const user = this.getUser();
        
        if (field === 'nickname') {
            title.textContent = '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º';
            input.value = user.nickname;
        } else if (field === 'userid') {
            title.textContent = '–ò–∑–º–µ–Ω–∏—Ç—å ID';
            input.value = user.userId;
        }
        
        modal.classList.add('active');
    }

    closeEditModal() {
        document.getElementById('edit-modal').classList.remove('active');
    }

    async saveEdit() {
        const user = this.getUser();
        const input = document.getElementById('edit-field-input');
        const value = input.value.trim();
        
        if (!value) {
            alert('–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
            return;
        }
        
        const updates = {};
        
        if (this.editingField === 'nickname') {
            updates.nickname = value;
        } else if (this.editingField === 'userid') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if (!/^\d+$/.test(value)) {
                alert('ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!');
                return;
            }
            
            if (value.length < 3 || value.length > 9) {
                alert('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 9 —Ü–∏—Ñ—Ä!');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            const allUsers = await this.getAllUsers();
            const idExists = Object.values(allUsers).some(u => {
                if (this.useFirebase) {
                    return u.userid === value && Object.keys(allUsers).find(k => allUsers[k] === u) !== this.currentUser;
                } else {
                    return u !== user && u.userid === value;
                }
            });
            
            if (idExists) {
                alert('–≠—Ç–æ—Ç ID —É–∂–µ –∑–∞–Ω—è—Ç!');
                return;
            }
            
            updates.userid = value;
        }
        
        await this.saveUser(updates);
        this.loadProfile();
        this.closeEditModal();
    }

    showCaseInfo(caseType) {
        const modal = document.getElementById('case-info-modal');
        const content = document.getElementById('case-info-content');
        const title = document.getElementById('case-info-title');
        
        let infoHtml = '';
        
        if (caseType === 'normal') {
            title.textContent = '–û–±—ã—á–Ω—ã–π –∫–µ–π—Å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å: 100 ü™ô</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç:</h4>
                    <div class="chance-item">
                        <span class="rarity-label rarity-common">–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">50%</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-rare">–†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">50%</span>
                    </div>
                    <div class="info-note">
                        ‚ÑπÔ∏è –ü–µ—Ä–≤—ã–µ 3 –∫–µ–π—Å–∞ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤<br>
                        üí∞ –î—É–±–ª–∏–∫–∞—Ç = –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    </div>
                </div>
            `;
        } else if (caseType === 'mega') {
            title.textContent = '–ú–µ–≥–∞ –±–æ–∫—Å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å: 10 üíé</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç:</h4>
                    <div class="chance-item">
                        <span class="rarity-label rarity-legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">15%</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-epic">–≠–ø–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">30%</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-rare">–†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                        <span class="chance-value">55%</span>
                    </div>
                    <div class="info-note">
                        ‚≠ê –¢–æ–ª—å–∫–æ —Ä–µ–¥–∫–∏–µ –∏ –≤—ã—à–µ<br>
                        üí∞ –î—É–±–ª–∏–∫–∞—Ç = –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (5 –≥–µ–º–æ–≤)
                    </div>
                </div>
            `;
        } else if (caseType === 'upgrades') {
            title.textContent = '–ö–µ–π—Å —É–ª—É—á—à–µ–Ω–∏–π - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å: 250 ü™ô</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:</h4>
                    <div class="chance-item">
                        <span class="rarity-label">–°–ª—É—á–∞–π–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ</span>
                        <span class="chance-value">60%</span>
                    </div>
                    <div class="chance-item chance-bad">
                        <span class="rarity-label">–ù–∏—á–µ–≥–æ</span>
                        <span class="chance-value">40%</span>
                    </div>
                    <div class="info-divider"></div>
                    <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:</h4>
                    <div class="upgrade-list-info">
                        <div>üåô Moon Shard (+20 —Å–∫–æ—Ä–æ—Å—Ç–∏)</div>
                        <div>‚öîÔ∏è Divine Rapier (+50 —É—Ä–æ–Ω–∞)</div>
                        <div>‚ù§Ô∏è Heart of Tarrasque (+100 –∑–¥–æ—Ä–æ–≤—å—è)</div>
                        <div>üõ°Ô∏è Black King Bar (+20% –∑–∞—â–∏—Ç—ã)</div>
                    </div>
                </div>
            `;
        }
        
        content.innerHTML = infoHtml;
        modal.classList.add('active');
    }

    closeCaseInfoModal() {
        document.getElementById('case-info-modal').classList.remove('active');
    }

    async login() {
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        const loginBtn = document.getElementById('login-btn');

        if (!username || !password) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        loginBtn.disabled = true;
        loginBtn.textContent = '–í—Ö–æ–¥...';
        
        console.log('üîµ –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥:', username);
        console.log('üîµ –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase:', this.useFirebase);

        try {
            if (this.useFirebase) {
                console.log('üîµ –í—ã–∑—ã–≤–∞–µ–º firebaseAdapter.login...');
                // Firebase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                const result = await firebaseAdapter.login(username, password);
                console.log('üîµ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', result);
            
            if (result.success) {
                this.currentUser = result.userId;
                this.currentUserData = result.userData;
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                firebaseAdapter.listenToUserData(result.userId, (data) => {
                    this.currentUserData = data;
                    this.updateUserInfo();
                });
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
                this.allUsersCache = await firebaseAdapter.getAllUsers();
                
                console.log('‚úÖ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Firebase:', username);
                this.showMainMenu();
            } else {
                alert(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }
        } else {
            // localStorage –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
        if (this.users[username] && this.users[username].password === password) {
            this.currentUser = username;
                this.currentUserData = this.users[username];
            localStorage.setItem('dotaCardsCurrentUser', username);
            this.showMainMenu();
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }
        }
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            loginBtn.disabled = false;
            loginBtn.textContent = '–í–æ–π—Ç–∏';
        }
    }

    async register() {
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        const registerBtn = document.getElementById('register-btn');

        if (!username || !password) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        if (password.length < 6) {
            alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        registerBtn.disabled = true;
        registerBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...';
        
        console.log('üîµ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', username);
        console.log('üîµ –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase:', this.useFirebase);

        try {
            if (this.useFirebase) {
                console.log('üîµ –í—ã–∑—ã–≤–∞–µ–º firebaseAdapter.register...');
                // Firebase —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                const result = await firebaseAdapter.register(username, password);
                console.log('üîµ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result);
            
            if (result.success) {
                this.currentUser = result.userId;
                this.currentUserData = result.userData;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const randomNickname = this.generateRandomNickname();
                const userid = await this.generateUserId();
                await firebaseAdapter.updateUserData(result.userId, {
                    username: username,
                    gold: 300,
                    gems: 5,
                    nickname: randomNickname,
                    userid: userid,
                    avatar: this.avatars[0],
                    clanInvites: [],
                    tutorialCompleted: false
                });
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                this.currentUserData = await firebaseAdapter.getUserData(result.userId);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                firebaseAdapter.listenToUserData(result.userId, (data) => {
                    this.currentUserData = data;
                    this.updateUserInfo();
                });
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                this.allUsersCache = await firebaseAdapter.getAllUsers();
                
                console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Firebase:', username);
                alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
                this.showMainMenu();
            } else {
                alert(result.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }
        } else {
            // localStorage —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
        if (this.users[username]) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        const userid = await this.generateUserId();
        const randomNickname = this.generateRandomNickname();

        this.users[username] = {
            username: username,
            password: password,
            gold: 300,
            gems: 5,
            level: 1,
            experience: 0,
            cards: {},
            upgrades: {},
            usedCodes: [],
            casesOpened: 0,
            normalCasesOpened: 0,
            deck: [],
            isAdmin: false,
            nickname: randomNickname,
            userid: userid,
            avatar: this.avatars[0],
            friends: [],
            friendRequests: { incoming: [], outgoing: [] },
            clanInvites: [],
            tutorialCompleted: false
        };

        localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        this.currentUser = username;
            this.currentUserData = this.users[username];
        localStorage.setItem('dotaCardsCurrentUser', username);
        this.showMainMenu();
        }
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            registerBtn.disabled = false;
            registerBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
        }
    }

    async logout() {
        if (this.useFirebase) {
            // Firebase –≤—ã—Ö–æ–¥
            firebaseAdapter.unlistenToUserData(this.currentUser);
            await firebaseAdapter.logout();
            console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ Firebase');
        } else {
            // localStorage –≤—ã—Ö–æ–¥
        localStorage.removeItem('dotaCardsCurrentUser');
        }
        
        this.currentUser = null;
        this.currentUserData = null;
        this.allUsersCache = {};
        this.showAuthScreen();
    }

    // ========== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ==========

    getUser() {
        // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.useFirebase) {
            return this.currentUserData;
        } else {
            return this.users[this.currentUser];
        }
    }

    async saveUser(updates) {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.useFirebase) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
            this.applyUpdatesToCurrentUser(updates);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            await firebaseAdapter.updateUserData(this.currentUser, updates);
            // currentUserData –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ listener —Å —Å–µ—Ä–≤–µ—Ä–∞
        } else {
            // localStorage
            Object.assign(this.users[this.currentUser], updates);
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
            this.currentUserData = this.users[this.currentUser];
        }
    }
    
    applyUpdatesToCurrentUser(updates) {
        // –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ currentUserData —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        for (const [key, value] of Object.entries(updates)) {
            if (key.includes('/')) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π —Ç–∏–ø–∞ "cards/Pudge/count"
                const parts = key.split('/');
                let obj = this.currentUserData;
                for (let i = 0; i < parts.length - 1; i++) {
                    if (!obj[parts[i]]) obj[parts[i]] = {};
                    obj = obj[parts[i]];
                }
                obj[parts[parts.length - 1]] = value;
            } else {
                this.currentUserData[key] = value;
            }
        }
    }
    
    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
    saveUserSync(updates) {
        if (this.useFirebase) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É
            this.applyUpdatesToCurrentUser(updates);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ
            firebaseAdapter.updateUserData(this.currentUser, updates).catch(err => {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
            });
        } else {
            Object.assign(this.users[this.currentUser], updates);
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
    }

    async getUserById(userId) {
        // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        if (this.useFirebase) {
            return this.allUsersCache[userId] || await firebaseAdapter.getUserData(userId);
        } else {
            return this.users[userId];
        }
    }

    async getAllUsers() {
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (this.useFirebase) {
            if (Object.keys(this.allUsersCache).length === 0) {
                this.allUsersCache = await firebaseAdapter.getAllUsers();
            }
            return this.allUsersCache;
        } else {
            return this.users;
        }
    }

    async usePromoCode() {
        const code = document.getElementById('promo-code').value;
        if (!code) return;

        const user = this.getUser();
        
        if (user.usedCodes && user.usedCodes.includes(code)) {
            alert('–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
            return;
        }

        const updates = {
            usedCodes: [...(user.usedCodes || []), code]
        };

        if (code === 'FREE50') {
            updates.gold = (user.gold || 0) + 50;
            updates.gems = (user.gems || 0) + 5;
            alert('–ü–æ–ª—É—á–µ–Ω–æ: 50 –∑–æ–ª–æ—Ç–∞ –∏ 5 –≥–µ–º–æ–≤!');
        } else if (code === 'ADMINPANEL666') {
            updates.isAdmin = true;
            this.createAdminButton();
            alert('–ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω!');
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
            return;
        }

        await this.saveUser(updates);
        this.updateUserInfo();
        document.getElementById('promo-code').value = '';
    }

    createAdminButton() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldBtn = document.getElementById('admin-btn');
        if (oldBtn) oldBtn.remove();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const adminBtn = document.createElement('button');
        adminBtn.id = 'admin-btn';
        adminBtn.className = 'btn small admin-btn';
        adminBtn.textContent = '‚öôÔ∏è –ê–¥–º–∏–Ω';
        adminBtn.addEventListener('click', () => this.showAdminPanel());
        
        const userInfo = document.querySelector('.user-info');
        userInfo.insertBefore(adminBtn, document.getElementById('logout-btn'));
    }

    async showAdminPanel() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
        const user = this.getUser();
        
        if (!user.isAdmin) {
            alert('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "ADMIN"');
            return;
        }
        
        const panel = document.getElementById('admin-panel');
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        const overlay = document.createElement('div');
        overlay.className = 'admin-overlay-animation';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < 30; i++) {
            const particle = document.createElement('div');
            particle.className = 'admin-particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 0.5 + 's';
            overlay.appendChild(particle);
        }
        
        document.body.appendChild(overlay);
        
        setTimeout(() => overlay.classList.add('active'), 10);
        
        setTimeout(() => {
            panel.classList.add('active');
        this.loadUsersList();
        }, 600);
        
        setTimeout(() => {
            if (document.body.contains(overlay)) {
                document.body.removeChild(overlay);
            }
        }, 1000);
    }

    closeAdminPanel() {
        document.getElementById('admin-panel').classList.remove('active');
    }

    async loadUsersList(searchQuery = '') {
        const container = document.getElementById('users-container');
        container.innerHTML = '<div style="text-align: center; padding: 2rem;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –Ω–∏–∫ –∞–¥–º–∏–Ω–∞
        const currentUser = this.getUser();
        if (currentUser) {
            document.getElementById('admin-avatar').src = currentUser.avatar || this.avatars[0];
            const displayText = `${currentUser.nickname || currentUser.username} ‚Ä¢ ${currentUser.userid || 'ID –Ω–µ –∑–∞–¥–∞–Ω'}`;
            document.getElementById('admin-user-name').textContent = displayText;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const allUsers = await this.getAllUsers();
        container.innerHTML = '';

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        const filteredUsers = Object.entries(allUsers).filter(([userId, user]) => {
            if (!searchQuery) return true;
            
            const query = searchQuery.toLowerCase();
            const usernameMatch = (user.username || '').toLowerCase().includes(query);
            const idMatch = (user.userid || '').toLowerCase().includes(query);
            const nickMatch = (user.nickname || '').toLowerCase().includes(query);
            
            return usernameMatch || idMatch || nickMatch;
        });

        if (filteredUsers.length === 0) {
            container.innerHTML = '<div class="no-users-found">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        filteredUsers.forEach(([userId, user]) => {
            const userDiv = document.createElement('div');
            userDiv.className = 'user-item';
            userDiv.innerHTML = `
                <div class="user-info-admin">
                    <strong>${user.username || userId.substr(0,8)}</strong>
                    <div class="user-meta">
                        <span class="user-nick">üë§ ${user.nickname || '–ù–µ –∑–∞–¥–∞–Ω'}</span>
                        <span class="user-id">üÜî ${user.userid || '–ù–µ –∑–∞–¥–∞–Ω'}</span>
                    </div>
                    <div>–£—Ä–æ–≤–µ–Ω—å: ${user.level || 1} | –ó–æ–ª–æ—Ç–æ: ${user.gold || 0} | –ì–µ–º—ã: ${user.gems || 0}</div>
                </div>
                <div class="user-controls">
                    <input type="number" placeholder="–ó–æ–ª–æ—Ç–æ" value="${user.gold || 0}" class="admin-input">
                    <input type="number" placeholder="–ì–µ–º—ã" value="${user.gems || 0}" class="admin-input">
                    <button class="btn small admin-btn-update" onclick="gameData.updateUserBalance('${userId}', this)">üí∞ –û–±–Ω–æ–≤–∏—Ç—å</button>
                    <button class="btn small admin-btn-reset" onclick="gameData.resetUserProgress('${userId}')">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</button>
                </div>
            `;
            container.appendChild(userDiv);
        });
    }

    async searchUsers(query) {
        await this.loadUsersList(query);
    }

    async updateUserBalance(userId, button) {
        const inputs = button.parentElement.querySelectorAll('.admin-input');
        const gold = parseInt(inputs[0].value) || 0;
        const gems = parseInt(inputs[1].value) || 0;
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(userId, { gold, gems });
        } else {
            this.users[userId].gold = gold;
            this.users[userId].gems = gems;
        localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        await this.loadUsersList();
        alert(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!`);
    }


    async resetUserProgress(userId) {
        const user = await this.getUserById(userId);
        const username = user.username || user.nickname || userId.substr(0, 8);
        
        if (confirm(`‚ö†Ô∏è –°–ë–†–û–° –ü–†–û–ì–†–ï–°–°–ê ${username}!\n\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å, –∫–∞—Ä—Ç—ã, —É–ª—É—á—à–µ–Ω–∏—è ‚Üí 0\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã ‚Üí –æ—á–∏—Å—Ç—è—Ç—Å—è\n\n–°–û–•–†–ê–ù–Ø–¢–°–Ø:\n‚úÖ ID –∏ –∞–≤–∞—Ç–∞—Ä\n‚úÖ –î—Ä—É–∑—å—è –∏ –∑–∞–ø—Ä–æ—Å—ã\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
            const resetData = {
                gold: 300,
                gems: 5,
                level: 1,
                experience: 0,
                cards: {},
                upgrades: {},
                usedCodes: [],  // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                casesOpened: 0,
                normalCasesOpened: 0,
                battlesPlayed: 0,
                battlesWon: 0,
                deck: []
                // –ù–ï —Ç—Ä–æ–≥–∞–µ–º: userid, avatar, friends, friendRequests, nickname, clan
            };
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–±—Ä–æ—Å –∫ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (this.useFirebase) {
                await firebaseAdapter.updateUserData(userId, resetData);
            } else {
                Object.assign(this.users[userId], resetData);
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
            }
            
            await this.loadUsersList();
            alert(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å ${username} —Å–±—Ä–æ—à–µ–Ω!\n\n‚Ä¢ –ë–∞–ª–∞–Ω—Å: 300 ü™ô + 5 üíé\n‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–Ω–æ–≤–∞\n‚Ä¢ ID, –∞–≤–∞—Ç–∞—Ä –∏ –¥—Ä—É–∑—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
        }
    }

    async updateUserInfo() {
        const user = this.getUser();
        if (!user) return;
        document.getElementById('gold-amount').textContent = user.gold || 0;
        document.getElementById('gems-amount').textContent = user.gems || 0;
        this.updateExperienceBar(user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–∞ —Å —Ç–µ–≥–æ–º –∫–ª–∞–Ω–∞
        await this.updateNicknameWithClanTag(user);
    }
    
    async updateNicknameWithClanTag(user) {
        const nicknameElement = document.getElementById('display-nickname');
        if (!nicknameElement) return;
        
        let displayText = user.nickname || user.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (user.clanId) {
            try {
                let clan;
                if (this.useFirebase) {
                    const snapshot = await firebase.database().ref(`clans/${user.clanId}`).once('value');
                    clan = snapshot.val();
                } else {
                    const clans = JSON.parse(localStorage.getItem('clans') || '{}');
                    clan = clans[user.clanId];
                }
                
                if (clan && clan.tag) {
                    displayText = `[${clan.tag}] ${displayText}`;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–∞ –∫–ª–∞–Ω–∞:', error);
            }
        }
        
        nicknameElement.textContent = displayText;
    }

    updateExperienceBar(user) {
        const expNeeded = user.level <= 5 ? 30 : 30 + (Math.floor((user.level - 1) / 5) * 50);
        const currentExp = user.experience;
        const percentage = Math.min(100, (currentExp / expNeeded) * 100);
        
        document.getElementById('exp-fill').style.width = `${percentage}%`;
        document.getElementById('exp-text').textContent = `${currentExp}/${expNeeded}`;
        document.getElementById('exp-level-badge').textContent = user.level;
    }

    switchTab(tabName) {
        // –ó–≤—É–∫ –∫–ª–∏–∫–∞
        this.soundSystem.playSound('click');
        
        // –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        this.animateTabTransition();
        
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–ª–∞–Ω–æ–≤ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if (tabName === 'clans' && window.clansSystem) {
            setTimeout(() => {
                window.clansSystem.loadClanInvites();
            }, 100);
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(`${tabName}-tab`).classList.add('active');
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å –∫–∞—Ä—Ç–∞–º–∏
        if (tabName === 'cards') {
            this.setupCardFilters('cards-tab');
        } else if (tabName === 'deck') {
            this.setupCardFilters('deck-tab', true);
        } else if (tabName === 'friends') {
            this.loadFriendsList();
        } else if (tabName === 'clans') {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–Ω–æ–≤
            if (window.clansSystem) {
                window.clansSystem.updateClanUI();
            }
        }
    }

    setupCardFilters(tabId, isDeck = false) {
        const tab = document.getElementById(tabId);
        const rarityBtns = tab.querySelectorAll('[data-rarity]');
        const starsBtns = tab.querySelectorAll('[data-stars]');
        
        let currentRarity = isDeck ? this.deckRarityFilter : 'all';
        let currentStars = isDeck ? this.deckStarsFilter : 'all';
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        rarityBtns.forEach(btn => btn.replaceWith(btn.cloneNode(true)));
        starsBtns.forEach(btn => btn.replaceWith(btn.cloneNode(true)));
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        tab.querySelectorAll('[data-rarity]').forEach(btn => {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            btn.classList.remove('active');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            if (isDeck && btn.dataset.rarity === this.deckRarityFilter) {
                btn.classList.add('active');
            } else if (!isDeck && btn.dataset.rarity === 'all') {
                btn.classList.add('active');
            }
            
            btn.addEventListener('click', () => {
                tab.querySelectorAll('[data-rarity]').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentRarity = btn.dataset.rarity;
                
                if (isDeck) {
                    this.deckRarityFilter = currentRarity;
                    this.renderDeckAvailableCards(currentRarity, currentStars);
                } else {
                    this.loadCards(currentRarity, currentStars);
                }
            });
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∑–≤–µ–∑–¥–∞–º
        tab.querySelectorAll('[data-stars]').forEach(btn => {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            btn.classList.remove('active');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            if (isDeck && btn.dataset.stars === this.deckStarsFilter) {
                btn.classList.add('active');
            } else if (!isDeck && btn.dataset.stars === 'all') {
                btn.classList.add('active');
            }
            
            btn.addEventListener('click', () => {
                tab.querySelectorAll('[data-stars]').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentStars = btn.dataset.stars;
                
                if (isDeck) {
                    this.deckStarsFilter = currentStars;
                    this.renderDeckAvailableCards(currentRarity, currentStars);
                } else {
                    this.loadCards(currentRarity, currentStars);
                }
            });
        });
    }

    animateTabTransition() {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å —á–∞—Å—Ç–∏—Ü–∞–º–∏
        this.createParticleTransition();
    }

    createParticleTransition() {
        // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        this.createWaveEffect();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
        setTimeout(() => {
            this.createFloatingParticles();
        }, 200);
    }

    createWaveEffect() {
        const wave = document.createElement('div');
        wave.className = 'wave-transition';
        wave.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: ${this.currentTheme === 'dark' ? 
                'radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%)' : 
                'radial-gradient(circle, rgba(0,0,0,0.1) 0%, transparent 70%)'};
            z-index: 999;
            opacity: 0;
            transform: scale(0.8);
            transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            pointer-events: none;
        `;
        
        document.body.appendChild(wave);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω—ã
        setTimeout(() => {
            wave.style.opacity = '1';
            wave.style.transform = 'scale(1)';
        }, 10);
        
        setTimeout(() => {
            wave.style.opacity = '0';
            wave.style.transform = 'scale(1.2)';
        }, 300);
        
        setTimeout(() => {
            if (document.body.contains(wave)) {
                document.body.removeChild(wave);
            }
        }, 900);
    }

    createFloatingParticles() {
        const colors = this.currentTheme === 'dark' ? 
            ['#fff', '#ccc', '#999'] : 
            ['#000', '#333', '#666'];
        
        for (let i = 0; i < 15; i++) {
            const particle = document.createElement('div');
            const color = colors[Math.floor(Math.random() * colors.length)];
            const size = Math.random() * 6 + 3;
            const startX = Math.random() * window.innerWidth;
            const startY = window.innerHeight + 50;
            const endX = startX + (Math.random() - 0.5) * 200;
            const endY = -50;
            
            particle.style.cssText = `
                position: fixed;
                width: ${size}px;
                height: ${size}px;
                background: ${color};
                border-radius: 50%;
                left: ${startX}px;
                top: ${startY}px;
                z-index: 1000;
                opacity: 0.8;
                box-shadow: 0 0 15px ${color}40;
                pointer-events: none;
                transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            `;
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            setTimeout(() => {
                particle.style.left = `${endX}px`;
                particle.style.top = `${endY}px`;
                particle.style.opacity = '0';
                particle.style.transform = 'scale(0.5) rotate(180deg)';
            }, 50);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ
            setTimeout(() => {
                if (document.body.contains(particle)) {
                    document.body.removeChild(particle);
                }
            }, 1300);
        }
    }

    animateThemeTransition() {
        const transition = document.createElement('div');
        transition.className = 'theme-transition';
        document.body.appendChild(transition);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            transition.classList.add('active');
        }, 10);

        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            transition.classList.remove('active');
        }, 300);

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        setTimeout(() => {
            if (document.body.contains(transition)) {
                document.body.removeChild(transition);
            }
        }, 900);
    }

    loadCards(rarityFilter = 'all', starsFilter = 'all') {
        const container = document.getElementById('cards-grid');
        container.innerHTML = '';

        const user = this.getUser();
        const userCards = user.cards || {};

        Object.keys(this.cards).forEach(cardName => {
            const card = this.cards[cardName];
            const userCard = userCards[cardName] || { count: 0, upgrades: [] };
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
            if (rarityFilter !== 'all' && card.rarity !== rarityFilter) {
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
            const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
            if (starsFilter !== 'all' && upgradeCount !== parseInt(starsFilter)) {
                return;
            }
            
            if (userCard.count > 0) {
                const cardDiv = document.createElement('div');
                cardDiv.className = `card rarity-border-${card.rarity}`;
                const starsHtml = Array(3).fill(0).map((_, i) => 
                    `<span class="star ${i < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                cardDiv.innerHTML = `
                    <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 10px;"></div>
                    <div class="card-rarity rarity-${card.rarity}">${this.getRarityName(card.rarity)}</div>
                    <div class="card-stars">${starsHtml}</div>
                    <div class="card-name">${card.name}</div>
                    <div class="card-stats">
                        <div>‚öîÔ∏è ${card.damage + this.getUpgradeBonus(userCard.upgrades, 'damage')}</div>
                        <div>‚ù§Ô∏è ${card.health + this.getUpgradeBonus(userCard.upgrades, 'health')}</div>
                        <div>üõ°Ô∏è ${card.defense + this.getUpgradeBonus(userCard.upgrades, 'defense')}%</div>
                        <div>‚ö° ${card.speed + this.getUpgradeBonus(userCard.upgrades, 'speed')}</div>
                    </div>
                    <div class="card-count">x${userCard.count}</div>
                `;
                container.appendChild(cardDiv);
            }
        });
    }

    loadDeck() {
        const user = this.getUser();
        if (!user.deck) user.deck = [];
        
        this.renderDeckSlots();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.renderDeckAvailableCards(this.deckRarityFilter, this.deckStarsFilter);
    }

    renderDeckSlots() {
        const container = document.getElementById('deck-slots');
        container.innerHTML = '';
        const user = this.getUser();
        const deck = user.deck || [];
        
        // –°–æ–∑–¥–∞–µ–º 3 —Å–ª–æ—Ç–∞
        for (let i = 0; i < 3; i++) {
            const slot = document.createElement('div');
            slot.className = 'deck-slot';
            
            if (deck[i]) {
                const card = this.cards[deck[i]];
                const userCard = user.cards[deck[i]];
                const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
                const starsHtml = Array(3).fill(0).map((_, idx) => 
                    `<span class="star ${idx < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                slot.classList.add('filled');
                slot.innerHTML = `
                    <div class="deck-card rarity-border-${card.rarity}">
                        <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 5px;"></div>
                        <div class="card-stars">${starsHtml}</div>
                        <div class="card-name">${card.name}</div>
                        <div class="card-stats-mini">
                            <span>‚öîÔ∏è${card.damage}</span>
                            <span>‚ù§Ô∏è${card.health}</span>
                            <span>üõ°Ô∏è${card.defense}%</span>
                            <span>‚ö°${card.speed}</span>
                        </div>
                        <button class="remove-from-deck-btn" data-index="${i}">‚úï</button>
                    </div>
                `;
            } else {
                slot.innerHTML = '<div class="deck-slot-empty">–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç</div>';
            }
            
            container.appendChild(slot);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        container.querySelectorAll('.remove-from-deck-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.removeFromDeck(index);
            });
        });
    }

    renderDeckAvailableCards(rarityFilter = 'all', starsFilter = 'all') {
        const container = document.getElementById('deck-available-cards');
        container.innerHTML = '';
        const user = this.getUser();
        const userCards = user.cards || {};
        const deck = user.deck || [];
        
        Object.keys(this.cards).forEach(cardName => {
            const card = this.cards[cardName];
            const userCard = userCards[cardName] || { count: 0, upgrades: [] };
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
            if (rarityFilter !== 'all' && card.rarity !== rarityFilter) {
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
            const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
            if (starsFilter !== 'all' && upgradeCount !== parseInt(starsFilter)) {
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –∏–≥—Ä–æ–∫–∞
            if (userCard.count > 0) {
                const cardDiv = document.createElement('div');
                cardDiv.className = `card rarity-border-${card.rarity} deck-card-item`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ
                const inDeck = deck.includes(cardName);
                if (inDeck) {
                    cardDiv.classList.add('in-deck');
                }
                
                const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
                const starsHtml = Array(3).fill(0).map((_, idx) => 
                    `<span class="star ${idx < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                cardDiv.innerHTML = `
                    <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 10px;"></div>
                    <div class="card-rarity rarity-${card.rarity}">${this.getRarityName(card.rarity)}</div>
                    <div class="card-stars">${starsHtml}</div>
                    <div class="card-name">${card.name}</div>
                    <div class="card-stats">
                        <div>‚öîÔ∏è ${card.damage}</div>
                        <div>‚ù§Ô∏è ${card.health}</div>
                        <div>üõ°Ô∏è ${card.defense}%</div>
                        <div>‚ö° ${card.speed}</div>
                    </div>
                    ${inDeck ? '<div class="in-deck-badge">–í –∫–æ–ª–æ–¥–µ</div>' : `<button class="add-to-deck-btn" data-card="${cardName}">–î–æ–±–∞–≤–∏—Ç—å</button>`}
                `;
                
                container.appendChild(cardDiv);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        container.querySelectorAll('.add-to-deck-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const cardName = e.target.dataset.card;
                this.addToDeck(cardName);
            });
        });
    }

    async addToDeck(cardName) {
        const user = this.getUser();
        const deck = user.deck || [];
        
        if (deck.length >= 3) {
            alert('–ö–æ–ª–æ–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ú–∞–∫—Å–∏–º—É–º 3 –∫–∞—Ä—Ç—ã.');
            return;
        }
        
        if (deck.includes(cardName)) {
            alert('–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤ –∫–æ–ª–æ–¥–µ!');
            return;
        }
        
        await this.saveUser({ deck: [...deck, cardName] });
        this.loadDeck();
    }

    async removeFromDeck(index) {
        const user = this.getUser();
        const deck = [...(user.deck || [])];
        deck.splice(index, 1);
        
        await this.saveUser({ deck });
        this.loadDeck();
    }

    getRarityName(rarity) {
        const names = {
            common: '–û–±—ã—á–Ω–∞—è',
            rare: '–†–µ–¥–∫–∞—è',
            epic: '–≠–ø–∏—á–µ—Å–∫–∞—è',
            legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'
        };
        return names[rarity] || rarity;
    }

    getUpgradeBonus(upgrades, stat) {
        let bonus = 0;
        if (upgrades && Array.isArray(upgrades)) {
        upgrades.forEach(upgradeName => {
            const upgrade = this.upgrades[upgradeName];
            if (upgrade && upgrade.effect === stat) {
                bonus += upgrade.value;
            }
        });
        }
        return bonus;
    }

    loadUpgrades() {
        const user = this.getUser();
        if (!user) return;
        
        const userUpgrades = user.upgrades || {};

        this.selectedUpgrade = null;
        this.renderUpgrades();
        this.renderCardsForUpgrade();
    }

    renderUpgrades() {
        const container = document.getElementById('upgrades-container');
        container.innerHTML = '';
        const user = this.getUser();
        if (!user) return;
        
        const userUpgrades = user.upgrades || {};
        
        Object.keys(this.upgrades).forEach(upgradeName => {
            const upgrade = this.upgrades[upgradeName];
            const count = userUpgrades[upgradeName] || 0;
            
            const upgradeDiv = document.createElement('div');
            upgradeDiv.className = `upgrade-item ${this.selectedUpgrade === upgradeName ? 'selected' : ''}`;
            upgradeDiv.innerHTML = `
                <h3>${upgrade.name}</h3>
                <p>${upgrade.description}</p>
                <div class="upgrade-count-badge">${count}</div>
                ${count > 0 ? `<button class="select-upgrade-btn" data-upgrade="${upgradeName}">–í—ã–±—Ä–∞—Ç—å</button>` : '<div class="no-upgrades">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</div>'}
            `;
            container.appendChild(upgradeDiv);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è
        container.querySelectorAll('.select-upgrade-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const upgradeName = e.target.dataset.upgrade;
                this.selectUpgrade(upgradeName);
            });
        });
    }

    selectUpgrade(upgradeName) {
        this.selectedUpgrade = upgradeName;
        this.renderUpgrades();
        this.renderCardsForUpgrade();
    }

    renderCardsForUpgrade() {
        const container = document.getElementById('upgrade-cards-grid');
        container.innerHTML = '';
        
        if (!this.selectedUpgrade) {
            container.innerHTML = '<div class="no-selection">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–ª–µ–≤–∞</div>';
            return;
        }
        
        const user = this.getUser();
        const userCards = user.cards || {};
        
        Object.keys(this.cards).forEach(cardName => {
            const card = this.cards[cardName];
            const userCard = userCards[cardName] || { count: 0, upgrades: [] };
            
            if (userCard.count > 0) {
                const cardDiv = document.createElement('div');
                cardDiv.className = `card rarity-border-${card.rarity}`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–∏–π —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ (–º–∞–∫—Å–∏–º—É–º 3)
                const upgradeCount = userCard.upgrades ? userCard.upgrades.length : 0;
                const canUpgrade = upgradeCount < 3;
                const starsHtml = Array(3).fill(0).map((_, idx) => 
                    `<span class="star ${idx < upgradeCount ? 'filled' : ''}">‚òÖ</span>`
                ).join('');
                
                cardDiv.innerHTML = `
                    <div class="card-image" style="background-image: url('${card.image}'); background-size: cover; background-position: center; width: 100%; height: 80px; border-radius: 10px; margin-bottom: 10px;"></div>
                    <div class="card-rarity rarity-${card.rarity}">${this.getRarityName(card.rarity)}</div>
                    <div class="card-stars">${starsHtml}</div>
                    <div class="card-name">${card.name}</div>
                    <div class="card-stats">
                        <div>‚öîÔ∏è ${card.damage + this.getUpgradeBonus(userCard.upgrades, 'damage')}</div>
                        <div>‚ù§Ô∏è ${card.health + this.getUpgradeBonus(userCard.upgrades, 'health')}</div>
                        <div>üõ°Ô∏è ${card.defense + this.getUpgradeBonus(userCard.upgrades, 'defense')}%</div>
                        <div>‚ö° ${card.speed + this.getUpgradeBonus(userCard.upgrades, 'speed')}</div>
                    </div>
                    ${canUpgrade ? `<button class="apply-upgrade-btn" data-card="${cardName}">–ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ</button>` : '<div class="max-upgrades">–ú–∞–∫—Å. —É–ª—É—á—à–µ–Ω–∏–π</div>'}
                `;
                container.appendChild(cardDiv);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
        container.querySelectorAll('.apply-upgrade-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const cardName = e.target.dataset.card;
                this.applyUpgrade(cardName);
            });
        });
    }

    async applyUpgrade(cardName) {
        const user = this.getUser();
        if (!user) {
            alert('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        if (!user.cards || !user.cards[cardName]) {
            alert('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            return;
        }
        
        if (!this.selectedUpgrade) {
            alert('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ!');
            return;
        }
        
        const userUpgrades = user.upgrades || {};
        const upgradeCount = userUpgrades[this.selectedUpgrade] || 0;
        
        if (upgradeCount <= 0) {
            alert('–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è!');
            return;
        }
        
        const userCard = user.cards[cardName];
        if (!userCard.upgrades) userCard.upgrades = [];
        
        if (userCard.upgrades.length >= 3) {
            alert('–ù–∞ –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —É–ª—É—á—à–µ–Ω–∏—è!');
            return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        const newCardUpgrades = [...userCard.upgrades, this.selectedUpgrade];
        const newUpgradeCount = upgradeCount - 1;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
        const allUpgrades = { ...userUpgrades };
        allUpgrades[this.selectedUpgrade] = newUpgradeCount;
        
        const updates = {
            [`cards/${cardName}/upgrades`]: newCardUpgrades,
            upgrades: allUpgrades
        };
        
        await this.saveUser(updates);
        
        // –ó–≤—É–∫ —É–ª—É—á—à–µ–Ω–∏—è
        this.soundSystem.playSound('upgrade');
        
        alert(`–£–ª—É—á—à–µ–Ω–∏–µ ${this.selectedUpgrade} –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ ${cardName}!`);
        
        this.loadUpgrades();
        this.loadCards();
    }

    async buyCase(caseType) {
        try {
            const user = this.getUser();
            if (!user) {
                alert('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
            
            const caseData = this.cases[caseType];
            if (!caseData) {
                alert('‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
            
            if (caseData.currency === 'gold' && user.gold < caseData.cost) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞');
                return;
            }
            
            if (caseData.currency === 'gems' && user.gems < caseData.cost) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤');
                return;
            }

            // –ó–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
            this.soundSystem.playSound('openCase');

            const updates = {};

            // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
            if (caseData.currency === 'gold') {
                updates.gold = user.gold - caseData.cost;
            } else {
                updates.gems = user.gems - caseData.cost;
            }

            // –î–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (–∫–µ–π—Å "upgrades")
            if (caseType === 'upgrades') {
                // 40% —à–∞–Ω—Å —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–¥–µ—Ç
                const dropChance = Math.random();
                
                if (dropChance < 0.4) {
                    // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                    await this.saveUser(updates);
                    this.showNothingDropAnimation();
                    this.updateUserInfo();
                    return;
                }
                
                // –í—ã–ø–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏–µ (60% —à–∞–Ω—Å)
                console.log('üéÅ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–∞—á—É —É–ª—É—á—à–µ–Ω–∏—è');
                console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:', this.upgrades);
                
                const upgradeNames = Object.keys(this.upgrades);
                console.log('üìã –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É–ª—É—á—à–µ–Ω–∏–π:', upgradeNames);
                
                if (upgradeNames.length === 0) {
                    console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π!');
                    await this.saveUser(updates);
                    this.updateUserInfo();
                    return;
                }
                
                const randomUpgrade = upgradeNames[Math.floor(Math.random() * upgradeNames.length)];
                console.log('üé≤ –í—ã–±—Ä–∞–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ:', randomUpgrade);
                
                const upgradeData = this.upgrades[randomUpgrade];
                console.log('üìä –î–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:', upgradeData);
                
                if (!upgradeData) {
                    console.error('‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', randomUpgrade);
                    await this.saveUser(updates);
                    this.updateUserInfo();
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —É–ª—É—á—à–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                const currentUpgrades = user.upgrades ? { ...user.upgrades } : {};
                currentUpgrades[randomUpgrade] = (currentUpgrades[randomUpgrade] || 0) + 1;
                updates.upgrades = currentUpgrades;
                
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è:', updates.upgrades);
                
                await this.saveUser(updates);
                this.updateUserInfo();
                
                console.log('üé¨ –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:', { upgradeName: randomUpgrade, upgradeData });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
                this.showUpgradeDropAnimation(randomUpgrade, upgradeData);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–Ω–µ —Å—Ä–∞–∑—É)
                setTimeout(() => {
                    this.loadUpgrades();
                }, 500);
                
                return;
            }

            // –î–∞–µ–º –∫–∞—Ä—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (–∫–µ–π—Å—ã normal –∏ mega)
            if (caseType === 'normal' || caseType === 'mega') {
                const cardResult = await this.giveRandomCard(user, caseType);
                updates.casesOpened = (user.casesOpened || 0) + 1;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await this.saveUser(updates);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
                this.showCardDropAnimation(cardResult, caseData);

                this.updateUserInfo();
                this.loadCards();
                this.loadUpgrades();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ buyCase:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞: ${error.message}`);
        }
    }

    showNothingDropAnimation() {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'card-drop-overlay';
        
        overlay.innerHTML = `
            <div class="card-drop-container">
                <div class="nothing-drop-animation">
                    <div class="nothing-icon">üí®</div>
                    <div class="nothing-message">
                        <div class="nothing-title">–ù–ï –ü–û–í–ï–ó–õ–û!</div>
                        <div class="nothing-desc">–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ</div>
                        <div class="nothing-hint">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</div>
                    </div>
                    <button class="btn primary close-drop-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-drop-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                this.updateUserInfo();
            }, 300);
        });
    }

    showUpgradeDropAnimation(upgradeName, upgradeData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (!upgradeData) {
            console.error('‚ùå upgradeData –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!', upgradeName);
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ this.upgrades
            upgradeData = this.upgrades[upgradeName];
            
            if (!upgradeData) {
                console.error('‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.upgrades:', upgradeName);
                alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'card-drop-overlay';
        
        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
        const upgradeIcons = {
            'Moon Shard': 'üåô',
            'Divine Rapier': '‚öîÔ∏è',
            'Heart of Tarrasque': '‚ù§Ô∏è',
            'Black King Bar': 'üõ°Ô∏è'
        };
        
        const icon = upgradeIcons[upgradeName] || '‚ú®';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const description = upgradeData.description || '–£–ª—É—á—à–µ–Ω–∏–µ';
        const effect = upgradeData.effect || '';
        const value = upgradeData.value || 0;
        
        overlay.innerHTML = `
            <div class="card-drop-container">
                <div class="upgrade-drop-animation">
                    <div class="upgrade-icon-large">${icon}</div>
                    <div class="dropped-upgrade">
                        <div class="upgrade-glow"></div>
                        <div class="upgrade-name-big">${upgradeName}</div>
                        <div class="upgrade-desc">${description}</div>
                        <div class="upgrade-effect-badge">
                            ${effect === 'damage' ? '‚öîÔ∏è –£—Ä–æ–Ω' : ''}
                            ${effect === 'health' ? '‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ' : ''}
                            ${effect === 'defense' ? 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞' : ''}
                            ${effect === 'speed' ? '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å' : ''}
                            +${value}
                        </div>
                    </div>
                    <button class="btn primary close-drop-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-drop-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                this.updateUserInfo();
                this.loadUpgrades();
            }, 300);
        });
    }

    showCardDropAnimation(cardResult, caseData) {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'card-drop-overlay';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ –∏—Å–∫—Ä—ã (–¥–ª—è epic –∏ legendary)
        const needsSparks = cardResult.card.rarity === 'epic' || cardResult.card.rarity === 'legendary';
        const sparksColor = cardResult.card.rarity === 'epic' ? '#a335ee' : '#ff8000';
        
        overlay.innerHTML = `
            <div class="card-drop-container">
                <div class="card-drop-animation">
                    ${cardResult.isDuplicate ? 
                        `<div class="duplicate-badge">–î–£–ë–õ–ò–ö–ê–¢!</div>
                         <div class="duplicate-reward">+${Math.floor(caseData.cost / 2)} ${caseData.currency === 'gold' ? 'ü™ô' : 'üíé'}</div>` 
                        : ''}
                    <div class="dropped-card rarity-border-${cardResult.card.rarity}">
                        <div class="card-glow"></div>
                        ${needsSparks ? this.generateSparks(sparksColor) : ''}
                        <div class="card-image" style="background-image: url('${cardResult.card.image}'); background-size: cover; background-position: center; width: 100%; height: 150px; border-radius: 10px; margin-bottom: 10px;"></div>
                        <div class="card-rarity rarity-${cardResult.card.rarity}">${this.getRarityName(cardResult.card.rarity)}</div>
                        <div class="card-name">${cardResult.card.name}</div>
                        <div class="card-stats">
                            <div>‚öîÔ∏è ${cardResult.card.damage}</div>
                            <div>‚ù§Ô∏è ${cardResult.card.health}</div>
                            <div>üõ°Ô∏è ${cardResult.card.defense}%</div>
                            <div>‚ö° ${cardResult.card.speed}</div>
                        </div>
                    </div>
                    <button class="btn primary close-drop-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-drop-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                this.updateUserInfo();
                this.loadCards();
                this.loadDeck();
            }, 300);
        });
    }

    generateSparks(color) {
        let sparksHTML = '<div class="sparks-container">';
        for (let i = 0; i < 30; i++) {
            const angle = (i / 30) * 360;
            const delay = Math.random() * 0.5;
            sparksHTML += `<div class="spark" style="--angle: ${angle}deg; --delay: ${delay}s; background: ${color};"></div>`;
        }
        sparksHTML += '</div>';
        return sparksHTML;
    }

    async giveRandomCard(user, caseType) {
        const userCards = user.cards || {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è casesOpened –µ—Å–ª–∏ –Ω–µ—Ç
        if (!user.casesOpened) user.casesOpened = 0;
        if (!user.normalCasesOpened) user.normalCasesOpened = 0;
        
        let selectedCardName;
        let isDuplicate = false;
        let availableCardPool = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–ª –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–µ–π—Å–∞
        if (caseType === 'normal') {
            // –û–±—ã—á–Ω—ã–π –∫–µ–π—Å - —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ
            availableCardPool = Object.keys(this.cards).filter(name => {
                const card = this.cards[name];
                return card.rarity === 'common' || card.rarity === 'rare';
            });
            
            // –ü–µ—Ä–≤—ã–µ 3 –û–ë–´–ß–ù–´–• –∫–µ–π—Å–∞ - –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if (user.normalCasesOpened < 3) {
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—É–ª–∞
                const newCards = availableCardPool.filter(name => !userCards[name] || userCards[name].count === 0);
                
                if (newCards.length > 0) {
                    selectedCardName = newCards[Math.floor(Math.random() * newCards.length)];
                } else {
                    // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –ø—É–ª–∞ —É–∂–µ –µ—Å—Ç—å
                    selectedCardName = availableCardPool[Math.floor(Math.random() * availableCardPool.length)];
                    isDuplicate = true;
                }
                user.normalCasesOpened++;
            } else {
                // –ü–æ—Å–ª–µ 3 –∫–µ–π—Å–æ–≤ - –æ–±—ã—á–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
                selectedCardName = availableCardPool[Math.floor(Math.random() * availableCardPool.length)];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
                if (userCards[selectedCardName] && userCards[selectedCardName].count > 0) {
                    isDuplicate = true;
                    
                    // –î–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–µ–π—Å–∞ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
                    const caseData = this.cases[caseType];
                    const refund = Math.floor(caseData.cost / 2);
                    await this.saveUser({ gold: user.gold + refund });
                }
                
                await this.saveUser({ normalCasesOpened: user.normalCasesOpened + 1 });
            }
        } else if (caseType === 'mega') {
            // –ú–µ–≥–∞ –±–æ–∫—Å - —Ä–µ–¥–∫–∏–µ, —ç–ø–∏—á–µ—Å–∫–∏–µ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å —à–∞–Ω—Å–∞–º–∏
            // –ë–ï–ó –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const rand = Math.random();
            
            if (rand < 0.15) {
                // 15% —à–∞–Ω—Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π
                availableCardPool = Object.keys(this.cards).filter(name => 
                    this.cards[name].rarity === 'legendary'
                );
            } else if (rand < 0.45) {
                // 30% —à–∞–Ω—Å —ç–ø–∏—á–µ—Å–∫–æ–π
                availableCardPool = Object.keys(this.cards).filter(name => 
                    this.cards[name].rarity === 'epic'
                );
            } else {
                // 55% —à–∞–Ω—Å —Ä–µ–¥–∫–æ–π
                availableCardPool = Object.keys(this.cards).filter(name => 
                    this.cards[name].rarity === 'rare'
                );
            }
            
            selectedCardName = availableCardPool[Math.floor(Math.random() * availableCardPool.length)];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
            if (userCards[selectedCardName] && userCards[selectedCardName].count > 0) {
                isDuplicate = true;
                
                // –î–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–µ–π—Å–∞ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
                const caseData = this.cases[caseType];
                const refund = Math.floor(caseData.cost / 2);
                await this.saveUser({ gems: user.gems + refund });
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        if (!isDuplicate) {
            const currentCard = userCards[selectedCardName] || { count: 0, upgrades: [] };
            await this.saveUser({
                [`cards/${selectedCardName}/count`]: currentCard.count + 1,
                [`cards/${selectedCardName}/upgrades`]: currentCard.upgrades || []
            });
        }
        
        return {
            card: this.cards[selectedCardName],
            cardName: selectedCardName,
            isDuplicate: isDuplicate
        };
    }

    startBotBattle() {
        console.log('=== startBotBattle called ===');
        
        try {
        const user = this.getUser();
        const userCards = user.cards || {};
            const deck = user.deck || [];
            
            console.log('User deck:', deck);
            console.log('User cards:', Object.keys(userCards));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–¥—ã
            if (deck.length === 0) {
                alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ö–æ–ª–æ–¥–∞"!');
            return;
        }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
        const playerDeck = [];
            deck.forEach(cardName => {
                console.log('Processing card:', cardName);
                console.log('Card exists in userCards:', !!userCards[cardName]);
                console.log('Card exists in this.cards:', !!this.cards[cardName]);
                
                if (userCards[cardName] && userCards[cardName].count > 0) {
                    try {
                        const battleCard = this.createBattleCard(cardName, userCards[cardName]);
                        playerDeck.push(battleCard);
                        console.log('Card added to deck:', cardName);
                    } catch (error) {
                        console.error('Error creating battle card:', cardName, error);
                        alert(`–û—à–∏–±–∫–∞ —Å –∫–∞—Ä—Ç–æ–π "${cardName}": ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–¥—É –∏ —Å–æ–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.`);
                    }
                }
            });

            console.log('Player deck created:', playerDeck.length, 'cards');

            if (playerDeck.length === 0) {
                alert('–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–æ–¥—ã!');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ—ë–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!user.battlesPlayed) user.battlesPlayed = 0;
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –±–æ—Ç–∞ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            const botDeck = this.createBotDeck(playerDeck);
            
            console.log('Bot deck created:', botDeck.length, 'cards');
            console.log('Starting battle...');

            this.startBattle(playerDeck, botDeck);
        } catch (error) {
            console.error('Error starting battle:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—è: ' + error.message);
        }
    }

    createBattleCard(cardName, userCard) {
        const card = this.cards[cardName];
        
        if (!card) {
            console.error('Card not found:', cardName);
            console.log('Available cards:', Object.keys(this.cards));
            throw new Error(`–ö–∞—Ä—Ç–∞ "${cardName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
        const upgrades = userCard.upgrades || [];
        
        return {
            name: card.name,
            damage: card.damage + this.getUpgradeBonus(upgrades, 'damage'),
            health: card.health + this.getUpgradeBonus(upgrades, 'health'),
            maxHealth: card.health + this.getUpgradeBonus(upgrades, 'health'),
            defense: card.defense + this.getUpgradeBonus(upgrades, 'defense'),
            speed: card.speed + this.getUpgradeBonus(upgrades, 'speed'),
            image: card.image,
            rarity: card.rarity,
            upgrades: upgrades,
            isDead: false
        };
    }

    generateBotName() {
        const botNames = [
            'Destroyer', 'Slayer', 'Hunter', 'Killer', 'Warrior',
            'Shadow', 'Phantom', 'Demon', 'Beast', 'Dragon',
            'Thunder', 'Storm', 'Chaos', 'Blade', 'Reaper',
            'Viper', 'Raven', 'Wolf', 'Tiger', 'Falcon',
            'Scorpion', 'Cobra', 'Hawk', 'Eagle', 'Panther',
            'Samurai', 'Ninja', 'Ronin', 'Shogun', 'Daimyo',
            'Knight', 'Paladin', 'Crusader', 'Champion', 'Gladiator',
            'Titan', 'Colossus', 'Behemoth', 'Leviathan', 'Kraken'
        ];
        
        const randomName = botNames[Math.floor(Math.random() * botNames.length)];
        const randomNumber = Math.floor(Math.random() * 9999) + 1;
        
        return `–ë–û–¢ ${randomName}${randomNumber}`;
    }

    createBotDeck(playerDeck = []) {
        console.log('Creating bot deck...');
        console.log('Available upgrades:', Object.keys(this.upgrades));
        
        const user = this.getUser();
        const isFirstBattle = !user.battlesPlayed || user.battlesPlayed === 0;
        
        console.log('Is first battle:', isFirstBattle);
        
        const allCards = Object.keys(this.cards);
        const botDeck = [];
        const usedCards = new Set();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö –Ω–µ –≤–∑—è–ª
        playerDeck.forEach(card => usedCards.add(card.name));
        
        // –í—ã–±–∏—Ä–∞–µ–º 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –±–æ—Ç–∞
        while (botDeck.length < 3 && usedCards.size < allCards.length) {
            const randomCard = allCards[Math.floor(Math.random() * allCards.length)];
            
            if (!usedCards.has(randomCard)) {
                usedCards.add(randomCard);
            const card = this.cards[randomCard];
            
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!card) {
                    console.error('Bot card not found:', randomCard);
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∫–∞—Ä—Ç—É
                }
            
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –±–æ—Ç–∞
                const botCard = {
                name: card.name,
                    damage: card.damage,
                    health: card.health,
                    maxHealth: card.health,
                    defense: card.defense,
                    speed: card.speed,
                image: card.image,
                    rarity: card.rarity,
                    upgrades: [],
                isDead: false
                };
                
                // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –±–æ–π - –¥–µ–ª–∞–µ–º –±–æ—Ç–∞ –æ—á–µ–Ω—å —Å–ª–∞–±—ã–º (100% –ø–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞)
                if (isFirstBattle) {
                    console.log('First battle - making bot weak');
                    botCard.damage = Math.floor(botCard.damage * 0.3);
                    botCard.health = Math.floor(botCard.health * 0.3);
                    botCard.maxHealth = Math.floor(botCard.maxHealth * 0.3);
                    botCard.defense = Math.floor(botCard.defense * 0.5);
                } else {
                    // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—è –±–æ—Ç —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è ~50% —à–∞–Ω—Å–∞ –ø–æ–±–µ–¥—ã
                    console.log('Regular battle - making bot strong');
                    
                    // –°–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∏–ª—ã –æ—Ç 1.5 –¥–æ 2.2 –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                    const strengthMultiplier = 1.5 + Math.random() * 0.7;
                    
                    botCard.damage = Math.floor(botCard.damage * strengthMultiplier);
                    botCard.health = Math.floor(botCard.health * strengthMultiplier);
                    botCard.maxHealth = Math.floor(botCard.maxHealth * strengthMultiplier);
                    botCard.defense = Math.min(80, Math.floor(botCard.defense * (1 + Math.random() * 0.5))); // –¥–æ 80% –∑–∞—â–∏—Ç—ã
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç—É (4-7 —à—Ç—É–∫)
                    const upgradesCount = 4 + Math.floor(Math.random() * 4); // 4, 5, 6 –∏–ª–∏ 7
                    const availableUpgrades = Object.keys(this.upgrades);
                    
                    console.log(`Adding ${upgradesCount} upgrades to bot`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
                    if (availableUpgrades.length === 0) {
                        console.warn('No upgrades available for bot');
                    }
                    
                    for (let i = 0; i < upgradesCount && availableUpgrades.length > 0; i++) {
                        const randomUpgrade = availableUpgrades[Math.floor(Math.random() * availableUpgrades.length)];
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —É–ª—É—á—à–µ–Ω–∏—è
                        const upgrade = this.upgrades[randomUpgrade];
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if (!upgrade || !upgrade.bonus) {
                            console.error('Invalid upgrade:', randomUpgrade);
                            continue;
                        }
                        
                        botCard.upgrades.push(randomUpgrade);
                        
                        if (upgrade.bonus.damage) botCard.damage += upgrade.bonus.damage;
                        if (upgrade.bonus.health) {
                            botCard.health += upgrade.bonus.health;
                            botCard.maxHealth += upgrade.bonus.health;
                        }
                        if (upgrade.bonus.defense) botCard.defense = Math.min(80, botCard.defense + upgrade.bonus.defense);
                        if (upgrade.bonus.speed) botCard.speed += upgrade.bonus.speed;
                    }
                    
                    console.log(`Bot card ${botCard.name}: DMG ${botCard.damage}, HP ${botCard.health}, DEF ${botCard.defense}%, SPD ${botCard.speed}`);
                }
                
                botDeck.push(botCard);
            }
        }
        
        return botDeck;
    }

    startBattle(playerDeck, botDeck) {
        console.log('=== startBattle called ===');
        console.log('Player deck:', playerDeck);
        console.log('Bot deck:', botDeck);
        
        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ—ë–≤
            const user = this.getUser();
            if (!user.battlesPlayed) user.battlesPlayed = 0;
            const newBattlesPlayed = user.battlesPlayed + 1;
            this.saveUserSync({ battlesPlayed: newBattlesPlayed });
            
        document.getElementById('main-menu').classList.remove('active');
        document.getElementById('battle-screen').classList.add('active');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞
        const botName = this.generateBotName();

        this.battleState = {
            playerDeck,
            botDeck,
            turn: 0,
            round: 1,
            isPlayerTurn: true,
            playerName: user.nickname || user.username,
            botName: botName,
            inProgress: true,
            lastPlayerCard: null,  // –ö–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª –∏–≥—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
            lastBotCard: null       // –ö–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª –±–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
        };

            console.log('Battle state set, rendering battle...');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≤—ã–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            this.saveBattleState();

            // –ú—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è

        this.renderBattle();
            console.log('Battle rendered, starting interactive battle...');
        this.startInteractiveBattle();
        } catch (error) {
            console.error('Error in startBattle:', error);
            alert('–û—à–∏–±–∫–∞ –≤ –±–æ—é: ' + error.message);
        }
    }

    saveBattleState() {
        if (this.battleState) {
            localStorage.setItem('currentBattle', JSON.stringify(this.battleState));
        }
    }

    loadBattleState() {
        const saved = localStorage.getItem('currentBattle');
        if (saved) {
            try {
                this.battleState = JSON.parse(saved);
                if (this.battleState && this.battleState.inProgress) {
                    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–π...');
                    document.getElementById('main-menu').classList.remove('active');
                    document.getElementById('battle-screen').classList.add('active');
                    this.renderBattle();
                    this.startInteractiveBattle();
                    return true;
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—è:', e);
                localStorage.removeItem('currentBattle');
            }
        }
        return false;
    }

    clearBattleState() {
        localStorage.removeItem('currentBattle');
        if (this.battleState) {
            this.battleState.inProgress = false;
        }
    }

    updateRoundDisplay() {
        const roundEl = document.querySelector('.battle-info h3');
        if (roundEl && this.battleState) {
            roundEl.textContent = `–†–∞—É–Ω–¥ ${this.battleState.round}`;
        }
    }

    renderBattle() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        this.updateBattleNames();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        this.updateRoundDisplay();
        
        this.renderDeck('player-cards', this.battleState.playerDeck, true);
        this.renderDeck('enemy-cards', this.battleState.botDeck, false);
    }

    updateBattleNames() {
        const playerLabel = document.querySelector('.player-battle-side .side-label');
        const enemyLabel = document.querySelector('.enemy-battle-side .side-label');
        
        if (playerLabel) {
            playerLabel.textContent = this.battleState.playerName;
        }
        
        if (enemyLabel) {
            enemyLabel.textContent = this.battleState.botName;
        }
    }

    renderDeck(containerId, deck, isPlayer) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';

        deck.forEach((card, index) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
            if (!card || !card.name || card.damage === undefined) {
                console.error('Invalid card in deck:', card);
                return;
            }
            
            const cardDiv = document.createElement('div');
            const healthPercentage = Math.max(0, (card.health / card.maxHealth) * 100);
            const isDead = card.isDead || card.health <= 0;
            const upgradeCount = card.upgrades ? card.upgrades.length : 0;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 3)
            const starsHtml = `<div class="battle-card-stars">
                ${Array(3).fill(0).map((_, i) => 
                    `<span class="star ${i < upgradeCount ? 'filled' : 'empty'}">‚òÖ</span>`
                ).join('')}
            </div>`;
            
            cardDiv.className = `battle-card-new rarity-border-${card.rarity} ${isDead ? 'dead' : ''}`;
            cardDiv.dataset.cardName = card.name;
            cardDiv.innerHTML = `
                <div class="battle-card-image" style="background-image: url('${card.image}')"></div>
                <div class="battle-card-info">
                    <div class="battle-card-name">${card.name}</div>
                    ${starsHtml}
                    <div class="battle-card-stats">
                        <div class="stat-mini"><span class="stat-icon">‚öîÔ∏è</span>${card.damage}</div>
                        <div class="stat-mini"><span class="stat-icon">‚ù§Ô∏è</span>${card.maxHealth}</div>
                        <div class="stat-mini"><span class="stat-icon">üõ°Ô∏è</span>${card.defense}%</div>
                        <div class="stat-mini"><span class="stat-icon">‚ö°</span>${card.speed}</div>
                </div>
                    <div class="battle-health-bar">
                        <div class="battle-health-fill" style="width: ${healthPercentage}%"></div>
                        <div class="battle-health-text">${Math.max(0, Math.floor(card.health))}/${card.maxHealth}</div>
                </div>
                </div>
                ${isDead ? '<div class="battle-dead-overlay"><div class="skull">üíÄ</div></div>' : ''}
            `;
            container.appendChild(cardDiv);
        });
    }

    startInteractiveBattle() {
        this.battleTurn = 0;
        this.currentPlayerAttacker = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        this.isPlayerTurn = true;
        this.battleEnded = false;
        this.selectedEnemyCard = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤
        document.getElementById('battle-round-num').textContent = 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—ã
        this.setupBattleCardListeners();
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        this.startPlayerTurn();
    }

    setupBattleCardListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—Ü–µ–ª–µ–π)
        document.querySelectorAll('.enemy-battle-side .battle-card-new').forEach(card => {
            card.addEventListener('click', () => {
                if (!this.isPlayerTurn || this.battleEnded) return;
                
                const cardName = card.getAttribute('data-card-name');
                const cardData = this.battleState.botDeck.find(c => c.name === cardName);
                
                if (cardData && !cardData.isDead && cardData.health > 0) {
                    this.selectTarget(cardData);
                }
            });
        });
    }

    startPlayerTurn() {
        if (this.battleEnded) return;
        
        this.isPlayerTurn = true;
        this.selectedEnemyCard = null;
        
        // –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        const alivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã - —É–±–∏—Ä–∞–µ–º —Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
        const availableCards = alivePlayerCards.filter(card => {
            return !this.battleState.lastPlayerCard || card.name !== this.battleState.lastPlayerCard.name;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç (–≤—Å–µ –æ—Ç–¥—ã—Ö–∞—é—Ç) - —Å–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        const cardsToChoose = availableCards.length > 0 ? availableCards : alivePlayerCards;
        
        if (cardsToChoose.length === 0) {
            // –í—Å–µ –∫–∞—Ä—Ç—ã –º–µ—Ä—Ç–≤—ã - –∫–æ–Ω–µ—Ü –±–æ—è
            this.checkBattleEnd();
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('selected', 'target-available', 'hint-glow', 'used-last-round');
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        if (this.battleState.lastPlayerCard) {
            const usedCardElement = document.querySelector(`.player-battle-side .battle-card-new[data-card-name="${this.battleState.lastPlayerCard.name}"]`);
            if (usedCardElement && availableCards.length > 0) {
                usedCardElement.classList.add('used-last-round');
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É
        this.showCardSelection(cardsToChoose);
    }
    
    showCardSelection(availableCards) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showBattleHint('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏');
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        availableCards.forEach(card => {
            const cardElement = document.querySelector(`.player-battle-side .battle-card-new[data-card-name="${card.name}"]`);
            if (cardElement) {
                cardElement.classList.add('hint-glow');
                cardElement.style.pointerEvents = 'auto';
                cardElement.style.cursor = 'pointer';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
                cardElement.onclick = () => {
                    this.selectPlayerAttacker(card);
                };
            }
        });
    }
    
    selectPlayerAttacker(selectedCard) {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        this.currentAttacker = selectedCard;
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
        document.querySelectorAll('.player-battle-side .battle-card-new').forEach(c => {
            c.classList.remove('hint-glow');
            c.style.pointerEvents = 'none';
            c.onclick = null;
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        const attackerElement = document.querySelector(`.player-battle-side .battle-card-new[data-card-name="${selectedCard.name}"]`);
        if (attackerElement) {
            attackerElement.classList.add('selected');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏
        this.showTargetSelection(selectedCard);
    }
    
    showTargetSelection(attackerCard) {
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏
        const aliveEnemyCards = this.battleState.botDeck.filter(card => !card.isDead && card.health > 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ç–∞–∫
        const attacksCount = Math.max(1, Math.floor(attackerCard.speed / 10));
        const attackText = attacksCount > 1 ? ` (${attacksCount} –∞—Ç–∞–∫–∏)` : '';
        this.showBattleHint(`${attackerCard.name}${attackText} –∞—Ç–∞–∫—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å.`);
        
        aliveEnemyCards.forEach(enemyCard => {
            const enemyElement = document.querySelector(`.enemy-battle-side .battle-card-new[data-card-name="${enemyCard.name}"]`);
            if (enemyElement) {
                enemyElement.classList.add('target-available');
            }
        });
    }

    // –°–¢–ê–†–ê–Ø –§–£–ù–ö–¶–ò–Ø - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —É–¥–∞–ª–∏—Ç—å –º–æ–∂–Ω–æ
    selectNextPlayerCard_OLD() {
        if (this.battleEnded) return;
        
        // –ï—Å–ª–∏ –≤—Å–µ –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ö–æ–¥—É –±–æ—Ç–∞
        if (this.currentPlayerAttacker >= this.playerAttacks.length) {
            this.startBotTurn();
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞—Ç–∞–∫—É—é—â—É—é –∫–∞—Ä—Ç—É
        const currentAttacker = this.playerAttacks[this.currentPlayerAttacker];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –µ—â—ë –∂–∏–≤–∞
        if (currentAttacker.isDead || currentAttacker.health <= 0) {
            this.currentPlayerAttacker++;
            this.selectNextPlayerCard();
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('selected', 'target-available', 'hint-glow');
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞—Ç–∞–∫—É—é—â—É—é –∫–∞—Ä—Ç—É
        const attackerElement = document.querySelector(`.player-battle-side .battle-card-new[data-card-name="${currentAttacker.name}"]`);
        if (attackerElement) {
            attackerElement.classList.add('hint-glow');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showBattleHint(`${currentAttacker.name} –∞—Ç–∞–∫—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å.`);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏
        const aliveEnemyCards = this.battleState.botDeck.filter(card => !card.isDead && card.health > 0);
        aliveEnemyCards.forEach(enemyCard => {
            const enemyElement = document.querySelector(`.enemy-battle-side .battle-card-new[data-card-name="${enemyCard.name}"]`);
            if (enemyElement) {
                enemyElement.classList.add('target-available');
            }
        });
    }

    selectTarget(targetCard) {
        if (!this.currentAttacker) return;
        
        // –ó–≤—É–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        this.soundSystem.playSound('whoosh', 0.5);
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ü–µ–ª–µ–π
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('target-available', 'hint-glow', 'selected');
        });
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.hideBattleHint();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        const attacksCount = Math.max(1, Math.floor(this.currentAttacker.speed / 10));
        
        this.performMultipleAttacks(this.currentAttacker, targetCard, attacksCount);
    }
    
    performMultipleAttacks(attacker, initialTarget, attacksCount) {
        let attackIndex = 0;
        let currentTarget = initialTarget;
        
        const performNextAttack = () => {
            if (attackIndex >= attacksCount) {
                // –í—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏
                this.battleState.lastPlayerCard = { name: attacker.name };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
                this.saveBattleState();
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ö–æ–¥—É –±–æ—Ç–∞
                setTimeout(() => {
                    if (!this.checkBattleEnd()) {
                        this.startBotTurn();
                    }
                }, 1000);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –µ—â–µ –∂–∏–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é
            if (currentTarget.isDead || currentTarget.health <= 0) {
                const aliveEnemies = this.battleState.botDeck.filter(c => !c.isDead && c.health > 0);
                if (aliveEnemies.length === 0) {
                    // –í—Å–µ –≤—Ä–∞–≥–∏ –º–µ—Ä—Ç–≤—ã
                    this.checkBattleEnd();
                    return;
                }
                currentTarget = aliveEnemies[0]; // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
            this.performAttack(attacker, currentTarget, false);
            
            attackIndex++;
            
            // –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                if (!this.checkBattleEnd()) {
                    performNextAttack();
                }
            }, 1000);
        };
        
        performNextAttack();
    }

    startBotTurn() {
        if (this.battleEnded) return;
        
        this.isPlayerTurn = false;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showBattleHint('–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...');
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.battle-card-new').forEach(c => {
            c.classList.remove('selected', 'target-available', 'hint-glow', 'used-last-round');
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
        if (this.battleState.lastBotCard) {
            const usedCardElement = document.querySelector(`.enemy-battle-side .battle-card-new[data-card-name="${this.battleState.lastBotCard.name}"]`);
            if (usedCardElement) {
                usedCardElement.classList.add('used-last-round');
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É –±–æ—Ç–∞
        setTimeout(() => {
            this.performBotAttack();
        }, 500);
    }

    performBotAttack() {
        const alivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
        const aliveBotCards = this.battleState.botDeck.filter(card => !card.isDead && card.health > 0);
        
        if (aliveBotCards.length === 0 || alivePlayerCards.length === 0) {
            this.checkBattleEnd();
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏ (–Ω–µ —Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ)
        let availableBotCards = aliveBotCards.filter(card => {
            return !this.battleState.lastBotCard || card.name !== this.battleState.lastBotCard.name;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç (–≤—Å–µ –æ—Ç–¥—ã—Ö–∞—é—Ç) - —Å–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        if (availableBotCards.length === 0) {
            availableBotCards = aliveBotCards;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        const attackerCard = availableBotCards[Math.floor(Math.random() * availableBotCards.length)];
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
        const targetCard = alivePlayerCards[Math.floor(Math.random() * alivePlayerCards.length)];
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        const attacksCount = Math.max(1, Math.floor(attackerCard.speed / 10));
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        this.performBotMultipleAttacks(attackerCard, targetCard, attacksCount);
    }
    
    performBotMultipleAttacks(attacker, initialTarget, attacksCount) {
        let attackIndex = 0;
        let currentTarget = initialTarget;
        
        const performNextAttack = () => {
            if (this.battleEnded) return;
            
            if (attackIndex >= attacksCount) {
                // –í—Å–µ –∞—Ç–∞–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª–∏
                this.battleState.lastBotCard = { name: attacker.name };
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞
                if (this.battleState) {
                    this.battleState.round++;
                    this.updateRoundDisplay();
                    this.saveBattleState();
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
                setTimeout(() => {
                    if (!this.checkBattleEnd()) {
                        this.startPlayerTurn();
                    }
                }, 500);
                return;
            }
            
            const currentAlivePlayerCards = this.battleState.playerDeck.filter(card => !card.isDead && card.health > 0);
            
            if (currentAlivePlayerCards.length === 0) {
                this.checkBattleEnd();
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –µ—â–µ –∂–∏–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é
            if (currentTarget.isDead || currentTarget.health <= 0) {
                currentTarget = currentAlivePlayerCards[Math.floor(Math.random() * currentAlivePlayerCards.length)];
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
            this.performAttack(attacker, currentTarget, true);
            
            attackIndex++;
            
            // –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ 1.2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (!this.checkBattleEnd()) {
                    performNextAttack();
                }
            }, 1200);
        };
        
        performNextAttack();
    }

    showBattleHint(text) {
        let hintElement = document.querySelector('.battle-hint');
        
        if (!hintElement) {
            hintElement = document.createElement('div');
            hintElement.className = 'battle-hint';
            document.querySelector('.battle-arena').appendChild(hintElement);
        }
        
        hintElement.textContent = text;
        hintElement.classList.add('active');
    }

    hideBattleHint() {
        const hintElement = document.querySelector('.battle-hint');
        if (hintElement) {
            hintElement.classList.remove('active');
        }
    }

    checkBattleEnd() {
        if (this.battleEnded) return true;
        
        const { playerDeck, botDeck } = this.battleState;
        
        const alivePlayerCards = playerDeck.filter(card => !card.isDead && card.health > 0);
        const aliveBotCards = botDeck.filter(card => !card.isDead && card.health > 0);
        
        console.log('Checking battle end:', { alivePlayerCards: alivePlayerCards.length, aliveBotCards: aliveBotCards.length });
        
        if (alivePlayerCards.length === 0) {
            this.battleEnded = true;
            console.log('Player lost - showing defeat screen');
            setTimeout(() => {
            this.endBattle(false);
            }, 1000);
            return true;
        }
        
        if (aliveBotCards.length === 0) {
            this.battleEnded = true;
            console.log('Player won - showing victory screen');
            setTimeout(() => {
            this.endBattle(true);
            }, 1000);
            return true;
        }
        
        return false;
    }

    performAttack(attacker, target, isEnemyAttacking = false) {
        if (attacker.isDead || target.isDead) return;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω
        let damage = attacker.damage;
        let isBlocked = false;
        let isCrit = false;
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (15% —à–∞–Ω—Å)
        if (Math.random() < 0.15) {
            damage = Math.floor(damage * 1.5);
            isCrit = true;
            this.soundSystem.playSound('critAttack');
        } else {
            this.soundSystem.playSound('attack');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É
        if (Math.random() * 100 < target.defense) {
            damage = Math.floor(damage * 0.3); // –ó–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ 70%
            isBlocked = true;
        } else {
            this.soundSystem.playSound('damage');
        }

        const oldHealth = target.health;
        target.health = Math.max(0, target.health - damage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        const justDied = target.health <= 0 && !target.isDead;
        if (justDied) {
            target.isDead = true;
            this.createDeathEffect();
            this.soundSystem.playSound('death');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –±–æ–π
            setTimeout(() => {
                this.checkBattleEnd();
            }, 500);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.addAttackEffect(attacker, target, damage, isBlocked, isCrit, isEnemyAttacking);
    }

    createDeathEffect() {
        // –ö—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
        const flash = document.createElement('div');
        flash.className = 'death-flash';
        document.body.appendChild(flash);
        
        setTimeout(() => flash.classList.add('active'), 10);
        
        setTimeout(() => {
            flash.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(flash)) {
                    document.body.removeChild(flash);
                }
            }, 500);
        }, 300);
    }

    addAttackEffect(attacker, target, damage, isBlocked, isCrit, isEnemyAttacking) {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç –Ω–∞ –ø–æ–ª–µ –±–æ—è
        const attackerElement = document.querySelector(`.battle-card-new[data-card-name="${attacker.name}"]`);
        const targetElement = document.querySelector(`.battle-card-new[data-card-name="${target.name}"]`);
        
        if (!attackerElement || !targetElement) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã
        attackerElement.classList.add('battle-attacking');
        setTimeout(() => attackerElement.classList.remove('battle-attacking'), 600);
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –∞—Ç–∞–∫–∏
        this.createAttackLine(attackerElement, targetElement, isCrit);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        setTimeout(() => {
            targetElement.classList.add('battle-taking-damage');
            setTimeout(() => targetElement.classList.remove('battle-taking-damage'), 500);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∏—Ç–º–∞—Ä–∫–µ—Ä
            this.createHitMarker(targetElement, damage, isBlocked, isCrit);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∑–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ä—Ç—ã –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ—Ö
            this.updateCardHealth(targetElement, target);
        }, 300);
    }

    updateCardHealth(cardElement, cardData) {
        const healthBar = cardElement.querySelector('.battle-health-fill');
        const healthText = cardElement.querySelector('.battle-health-text');
        
        if (healthBar && healthText) {
            const healthPercentage = Math.max(0, (cardData.health / cardData.maxHealth) * 100);
            healthBar.style.width = `${healthPercentage}%`;
            healthText.textContent = `${Math.max(0, Math.floor(cardData.health))}/${cardData.maxHealth}`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        if (cardData.health <= 0 && !cardElement.classList.contains('dead')) {
            cardElement.classList.add('dead');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π —Å–º–µ—Ä—Ç–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!cardElement.querySelector('.battle-dead-overlay')) {
                const deathOverlay = document.createElement('div');
                deathOverlay.className = 'battle-dead-overlay';
                deathOverlay.innerHTML = '<div class="skull">üíÄ</div>';
                cardElement.appendChild(deathOverlay);
            }
        }
    }

    createAttackLine(fromElement, toElement, isCrit) {
        const fromRect = fromElement.getBoundingClientRect();
        const toRect = toElement.getBoundingClientRect();
        
        const fromX = fromRect.left + fromRect.width / 2;
        const fromY = fromRect.top + fromRect.height / 2;
        const toX = toRect.left + toRect.width / 2;
        const toY = toRect.top + toRect.height / 2;
        
        const angle = Math.atan2(toY - fromY, toX - fromX);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è –∏–∑–æ–≥–Ω—É—Ç–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        const midX = (fromX + toX) / 2;
        const midY = (fromY + toY) / 2;
        // –°–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –¥—É–≥–∏
        const arcHeight = -80;
        const controlX = midX;
        const controlY = midY + arcHeight;
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—á
        const sword = document.createElement('div');
        sword.className = `flying-sword ${isCrit ? 'critical' : ''}`;
        sword.innerHTML = '‚öîÔ∏è';
        sword.style.left = fromX + 'px';
        sword.style.top = fromY + 'px';
        sword.style.setProperty('--from-x', fromX + 'px');
        sword.style.setProperty('--from-y', fromY + 'px');
        sword.style.setProperty('--control-x', controlX + 'px');
        sword.style.setProperty('--control-y', controlY + 'px');
        sword.style.setProperty('--to-x', toX + 'px');
        sword.style.setProperty('--to-y', toY + 'px');
        sword.style.transform = `rotate(${angle}rad)`;
        
        document.body.appendChild(sword);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ –º–µ—á–∞ –ø–æ –¥—É–≥–µ
        setTimeout(() => {
            sword.classList.add('flying');
        }, 10);
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        setTimeout(() => {
            if (document.body.contains(sword)) {
                document.body.removeChild(sword);
            }
        }, 600);
    }

    createHitMarker(element, damage, isBlocked, isCrit) {
        const hitMarker = document.createElement('div');
        hitMarker.className = 'hit-marker';
        
        if (isCrit) {
            hitMarker.classList.add('critical');
            hitMarker.innerHTML = `<span class="damage-number">${damage}</span><span class="damage-label">–ö–†–ò–¢!</span>`;
        } else if (isBlocked) {
            hitMarker.classList.add('blocked');
            hitMarker.innerHTML = `<span class="damage-number">${damage}</span><span class="damage-label">–ë–õ–û–ö</span>`;
        } else {
            hitMarker.innerHTML = `<span class="damage-number">-${damage}</span>`;
        }
        
        const rect = element.getBoundingClientRect();
        hitMarker.style.left = rect.left + rect.width / 2 + 'px';
        hitMarker.style.top = rect.top + rect.height / 2 + 'px';
        
        // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
        const randomOffset = (Math.random() - 0.5) * 40;
        hitMarker.style.setProperty('--random-x', randomOffset + 'px');
        
        document.body.appendChild(hitMarker);
        
        setTimeout(() => hitMarker.classList.add('active'), 10);
        
        setTimeout(() => {
            if (document.body.contains(hitMarker)) {
                document.body.removeChild(hitMarker);
            }
        }, 1500);
    }

    async endBattle(playerWon) {
        console.log('=== endBattle called ===', { playerWon });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-–±–æ–π
        if (this.battleState && this.battleState.isOnline && window.onlineBattlesSystem) {
            await window.onlineBattlesSystem.endOnlineBattle(playerWon);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
        this.clearBattleState();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultOverlay = document.createElement('div');
        resultOverlay.className = 'battle-result-overlay';
        resultOverlay.style.display = 'flex'; // –Ø–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        resultOverlay.style.opacity = '0'; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        
        if (playerWon) {
            // –ó–≤—É–∫ –ø–æ–±–µ–¥—ã
            this.soundSystem.playSound('victory');
            
            // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            const user = this.getUser();
            const newGold = user.gold + 25;
            const newGems = user.gems + 1;
            const newExp = user.experience + 10;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            await this.saveUser({
                gold: newGold,
                gems: newGems,
                experience: newExp
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
            user.gold = newGold;
            user.gems = newGems;
            user.experience = newExp;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            await this.checkLevelUp(user);
            
            // –û–ø—ã—Ç –∫–ª–∞–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (window.clansSystem && window.clansSystem.currentClan) {
                await window.clansSystem.addClanExp(10);
            }
            
            resultOverlay.innerHTML = `
                <div class="battle-result victory">
                    <div class="result-icon">üëë</div>
                    <div class="result-title">–ü–û–ë–ï–î–ê!</div>
                    <div class="result-rewards">
                        <div class="reward-item">+25 ü™ô</div>
                        <div class="reward-item">+1 üíé</div>
                        <div class="reward-item">+10 EXP</div>
                    </div>
                    <div class="result-buttons">
                        <button class="btn primary" onclick="gameData.backToMenu()">üìã –í –º–µ–Ω—é</button>
                        <button class="btn secondary" onclick="gameData.playAgain()">üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ</button>
                    </div>
                </div>
            `;
        } else {
            // –ó–≤—É–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            this.soundSystem.playSound('defeat');
            
            resultOverlay.innerHTML = `
                <div class="battle-result defeat">
                    <div class="result-icon">üíÄ</div>
                    <div class="result-title">–ü–û–†–ê–ñ–ï–ù–ò–ï</div>
                    <div class="result-message">–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</div>
                    <div class="result-buttons">
                        <button class="btn primary" onclick="gameData.backToMenu()">üìã –í –º–µ–Ω—é</button>
                        <button class="btn secondary" onclick="gameData.playAgain()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                    </div>
                </div>
            `;
        }
        
        console.log('Adding result overlay to body');
        document.body.appendChild(resultOverlay);
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
            resultOverlay.style.opacity = '1';
            resultOverlay.classList.add('active');
            console.log('Result overlay should be visible now');
        }, 100);
    }

    playAgain() {
        // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const resultOverlay = document.querySelector('.battle-result-overlay');
        if (resultOverlay && document.body.contains(resultOverlay)) {
            document.body.removeChild(resultOverlay);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        this.clearBattleState();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±–æ–π
        this.startBotBattle();
    }

    async checkLevelUp(user) {
        const expNeeded = user.level <= 5 ? 30 : 30 + (Math.floor((user.level - 1) / 5) * 50);
        
        if (user.experience >= expNeeded) {
            const newLevel = user.level + 1;
            const newExp = user.experience - expNeeded;
            const newGold = user.gold + 100;
            const newGems = user.gems + 5;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await this.saveUser({
                level: newLevel,
                experience: newExp,
                gold: newGold,
                gems: newGems
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
            user.level = newLevel;
            user.experience = newExp;
            user.gold = newGold;
            user.gems = newGems;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            this.showLevelUpModal(newLevel);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∫–∞–ª—É –æ–ø—ã—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            setTimeout(() => {
                this.updateExperienceBar(user);
                this.updateUserInfo();
            }, 100);
        }
    }

    showLevelUpModal(newLevel) {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const overlay = document.createElement('div');
        overlay.className = 'level-up-overlay';
        overlay.innerHTML = `
            <div class="level-up-modal">
                <div class="level-up-glow"></div>
                <div class="level-up-sparkles">
                    <div class="sparkle" style="top: 10%; left: 20%; animation-delay: 0s;">‚ú®</div>
                    <div class="sparkle" style="top: 80%; left: 15%; animation-delay: 0.3s;">‚ú®</div>
                    <div class="sparkle" style="top: 15%; left: 80%; animation-delay: 0.6s;">‚ú®</div>
                    <div class="sparkle" style="top: 85%; left: 75%; animation-delay: 0.9s;">‚ú®</div>
                    <div class="sparkle" style="top: 50%; left: 10%; animation-delay: 0.2s;">‚≠ê</div>
                    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 0.5s;">‚≠ê</div>
                </div>
                <div class="level-up-icon">üéâ</div>
                <div class="level-up-title">–ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!</div>
                <div class="level-up-level">–£—Ä–æ–≤–µ–Ω—å ${newLevel}</div>
                <div class="level-up-rewards">
                    <div class="level-up-reward-item">
                        <div class="reward-icon">ü™ô</div>
                        <div class="reward-text">+100 –ó–æ–ª–æ—Ç–∞</div>
                    </div>
                    <div class="level-up-reward-item">
                        <div class="reward-icon">üíé</div>
                        <div class="reward-text">+5 –ì–µ–º–æ–≤</div>
                    </div>
                </div>
                <button class="btn primary close-level-up-btn">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            </div>
        `;
        
        document.body.appendChild(overlay);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã
        this.soundSystem.playSound('victory');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => overlay.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        overlay.querySelector('.close-level-up-btn').addEventListener('click', () => {
            overlay.classList.remove('active');
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            }, 300);
        });
    }

    backToMenu() {
        // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        const resultOverlay = document.querySelector('.battle-result-overlay');
        if (resultOverlay && document.body.contains(resultOverlay)) {
            document.body.removeChild(resultOverlay);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        this.clearBattleState();
        
        document.getElementById('battle-screen').classList.remove('active');
        document.getElementById('main-menu').classList.add('active');
        this.updateUserInfo();
        this.loadProfile();
    }

    showBattleInfo(mode) {
        const modal = document.getElementById('battle-mode-info-modal');
        const content = document.getElementById('battle-mode-info-content');
        const title = document.getElementById('battle-mode-info-title');
        
        let infoHtml = '';
        
        if (mode === 'bot') {
            title.textContent = 'ü§ñ –ë–æ–π —Å –±–æ—Ç–æ–º - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É</h3>
                    <div class="info-divider"></div>
                    <div class="chance-item">
                        <span class="rarity-label">ü™ô –ó–æ–ª–æ—Ç–æ</span>
                        <span class="chance-value">+25</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label">üíé –ì–µ–º—ã</span>
                        <span class="chance-value">+1</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label">‚≠ê –û–ø—ã—Ç</span>
                        <span class="chance-value">+10</span>
                    </div>
                    <div class="info-divider"></div>
                    <h4>‚öîÔ∏è –û–ø—ã—Ç –∫–ª–∞–Ω–∞:</h4>
                    <div class="info-note">
                        ‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –≤ –∫–ª–∞–Ω–µ, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç +10 –æ–ø—ã—Ç–∞<br>
                        üìä –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è: –£—Ä–æ–≤–µ–Ω—å √ó 100 –æ–ø—ã—Ç–∞
                    </div>
                    <div class="info-divider"></div>
                    <h4>üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å:</h4>
                    <div class="info-note">
                        ‚≠ê –ü–µ—Ä–≤—ã–π –±–æ–π: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞!<br>
                        ‚öîÔ∏è –°–ª–µ–¥—É—é—â–∏–µ –±–æ–∏: —à–∞–Ω—Å ~50%
                    </div>
                </div>
            `;
        } else if (mode === 'online') {
            title.textContent = 'üë• –û–Ω–ª–∞–π–Ω –±–æ–π - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h3>
                    <div class="info-divider"></div>
                    <h4>–®–∞–≥–∏ –¥–ª—è –∏–≥—Ä—ã:</h4>
                    <div class="upgrade-list-info">
                        <div>1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É (–∫–æ–¥ 6 —Ü–∏—Ñ—Ä)</div>
                        <div>2Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º</div>
                        <div>3Ô∏è‚É£ –î—Ä—É–≥ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è</div>
                        <div>4Ô∏è‚É£ –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</div>
                    </div>
                    <div class="info-divider"></div>
                    <h4>‚ö†Ô∏è –í–∞–∂–Ω–æ:</h4>
                    <div class="info-note">
                        ‚ùå –ù–∞–≥—Ä–∞–¥—ã –ù–ï –¥–∞—é—Ç—Å—è (–∑–æ–ª–æ—Ç–æ, –≥–µ–º—ã, –æ–ø—ã—Ç)<br>
                        ‚ùå –û–ø—ã—Ç –∫–ª–∞–Ω—É –ù–ï –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è<br>
                        ‚úÖ –ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å –¥—Ä—É–∑—å—è–º–∏
                    </div>
                    <div class="info-divider"></div>
                    <h4>‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h4>
                    <div class="upgrade-list-info">
                        <div>üîÑ Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</div>
                        <div>üåê –ò–≥—Ä–∞ —á–µ—Ä–µ–∑ Firebase</div>
                        <div>üéØ –ë–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</div>
                    </div>
                </div>
            `;
        } else if (mode === 'ranked') {
            title.textContent = 'üèÜ –†–∞–Ω–≥–æ–≤—ã–µ –±–æ–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            infoHtml = `
                <div class="case-info-section">
                    <h3>üìä –°–∏—Å—Ç–µ–º–∞ ELO</h3>
                    <div class="info-divider"></div>
                    <h4>–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:</h4>
                    <div class="chance-item">
                        <span class="rarity-label">üëë –ü–æ–±–µ–¥–∞</span>
                        <span class="chance-value">+10 ELO</span>
                    </div>
                    <div class="chance-item chance-bad">
                        <span class="rarity-label">üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ</span>
                        <span class="chance-value">-5 ELO</span>
                    </div>
                    <div class="chance-item">
                        <span class="rarity-label rarity-legendary">‚≠ê –í—Å–µ –∫–∞—Ä—Ç—ã –≤—ã–∂–∏–ª–∏</span>
                        <span class="chance-value">+5 ELO</span>
                    </div>
                    <div class="info-divider"></div>
                    <h4>üéñÔ∏è –ó–≤–∞–Ω–∏—è:</h4>
                    <div class="upgrade-list-info">
                        <div>ü•â –ù–æ–≤–∏—á–æ–∫ (0-999)</div>
                        <div>ü•â –ë—Ä–æ–Ω–∑–∞ (1000-1499)</div>
                        <div>ü•à –°–µ—Ä–µ–±—Ä–æ (1500-1999)</div>
                        <div>ü•á –ó–æ–ª–æ—Ç–æ (2000-2499)</div>
                        <div>üíé –ü–ª–∞—Ç–∏–Ω–∞ (2500-2999)</div>
                        <div>üí† –ê–ª–º–∞–∑ (3000+)</div>
                    </div>
                    <div class="info-divider"></div>
                    <div class="info-note">
                        üìÖ –†–∞–Ω–≥–æ–≤—ã–µ –±–æ–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!<br>
                        üéØ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                    </div>
                </div>
            `;
        }
        
        content.innerHTML = infoHtml;
        modal.style.display = 'flex';
        setTimeout(() => modal.classList.add('active'), 10);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.getElementById('close-battle-mode-info').onclick = () => {
            modal.style.display = 'none';
            modal.classList.remove('active');
        };
        
        window.onclick = (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
                modal.classList.remove('active');
            }
        };
    }

    // ========== –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø ==========

    startTutorial() {
        this.tutorialStep = 0;
        this.tutorialSteps = [
            {
                text: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –Ω–æ–≤—ã–π –≤–æ–∏–Ω! –Ø ‚Äî Shadow Fiend, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å—Å—è –≤ –º–∏—Ä–µ DOTA CARDS.\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ—Å–Ω–æ–≤!`,
                allowedElements: []
            },
            {
                text: `–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–æ–∫–æ–¥ <strong>FREE50</strong> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:\n\nüí∞ +50 –ó–æ–ª–æ—Ç–∞\nüíé +5 –ì–µ–º–æ–≤\n\n–í–≤–µ–¥–∏ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"!`,
                allowedElements: ['#promo-code', '#use-code-btn'],
                highlightElements: ['.code-input-section']
            },
            {
                text: `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É <strong>"–ö–µ–π—Å—ã"</strong> –∏ –æ—Ç–∫—Ä–æ–π <strong>–û–±—ã—á–Ω—ã–π –∫–µ–π—Å</strong> –∑–∞ 100 –∑–æ–ª–æ—Ç–∞.\n\n–í –∫–µ–π—Å–∞—Ö –≤—ã–ø–∞–¥–∞—é—Ç –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏!`,
                allowedElements: ['[data-tab="cases"]', '.buy-case[data-case="normal"]'],
                highlightElements: ['[data-tab="cases"]']
            },
            {
                text: `–£ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –µ—Å—Ç—å 4 –≤–∞–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n\n‚öîÔ∏è <strong>–£—Ä–æ–Ω</strong> - —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç\n‚ù§Ô∏è <strong>–ó–¥–æ—Ä–æ–≤—å–µ</strong> - —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–Ω–∞ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç\nüõ°Ô∏è <strong>–ó–∞—â–∏—Ç–∞</strong> - —à–∞–Ω—Å –±–ª–æ–∫–∞ —É—Ä–æ–Ω–∞\n‚ö° <strong>–°–∫–æ—Ä–æ—Å—Ç—å</strong> - –∞—Ç–∞–∫ –∑–∞ —Ö–æ–¥\n\n0-19 —Å–∫–æ—Ä–æ—Å—Ç–∏ = 1 –∞—Ç–∞–∫–∞\n20-29 = 2 –∞—Ç–∞–∫–∏, 30+ = 3 –∞—Ç–∞–∫–∏!`,
                allowedElements: ['[data-tab="cards"]'],
                highlightElements: ['[data-tab="cards"]']
            },
            {
                text: `–°–æ–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏–∑ 3 –∫–∞—Ä—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ <strong>"–ö–æ–ª–æ–¥–∞"</strong>, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏ –≤ <strong>"–ë–æ–∏"</strong> –∏ –Ω–∞–∂–º–∏ <strong>"–ù–∞—á–∞—Ç—å –±–æ–π"</strong>!\n\n‚≠ê –ü–µ—Ä–≤—ã–π –±–æ–π - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞!\n\n–£–¥–∞—á–∏, –≤–æ–∏–Ω!`,
                allowedElements: ['[data-tab="deck"]', '[data-tab="battle"]', '#bot-battle-btn'],
                highlightElements: ['[data-tab="deck"]', '[data-tab="battle"]']
            }
        ];
        
        const overlay = document.getElementById('tutorial-overlay');
        overlay.style.display = 'flex';
        setTimeout(() => overlay.classList.add('active'), 10);
        
        this.setupTutorialHandlers();
        this.showTutorialStep(0);
    }

    setupTutorialHandlers() {
        document.getElementById('tutorial-next-btn').onclick = () => this.nextTutorialStep();
        document.getElementById('tutorial-prev-btn').onclick = () => this.prevTutorialStep();
        document.getElementById('skip-tutorial-btn').onclick = () => this.skipTutorial();
    }

    showTutorialStep(step) {
        const stepData = this.tutorialSteps[step];
        const textElement = document.getElementById('tutorial-text');
        const prevBtn = document.getElementById('tutorial-prev-btn');
        const nextBtn = document.getElementById('tutorial-next-btn');
        const counter = document.getElementById('tutorial-step-counter');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞
        textElement.style.opacity = '0';
        setTimeout(() => {
            textElement.innerHTML = stepData.text;
            textElement.style.opacity = '1';
        }, 200);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        counter.textContent = `${step + 1} / ${this.tutorialSteps.length}`;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
        prevBtn.style.display = step > 0 ? 'block' : 'none';
        nextBtn.textContent = step === this.tutorialSteps.length - 1 ? '–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üéÆ' : '–î–∞–ª–µ–µ ‚Üí';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updateTutorialBlocking(stepData);
        
        this.tutorialStep = step;
    }
    
    updateTutorialBlocking(stepData) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏ —Å—Ç—Ä–µ–ª–∫–∏
        document.querySelectorAll('.tutorial-highlight').forEach(el => {
            el.classList.remove('tutorial-highlight');
        });
        
        document.querySelectorAll('.tutorial-arrow').forEach(el => {
            el.remove();
        });
        
        // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.tutorial-blocked').forEach(el => {
            el.classList.remove('tutorial-blocked');
            el.style.pointerEvents = '';
        });
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–∫–ª–∞–¥–∫–∏ –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        const allInteractiveElements = document.querySelectorAll('.nav-btn, .btn, button, input, textarea');
        
        allInteractiveElements.forEach(el => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è
            if (el.id === 'tutorial-next-btn' || el.id === 'tutorial-prev-btn' || el.id === 'skip-tutorial-btn') {
                return;
            }
            
            let isAllowed = false;
            
            if (stepData.allowedElements && stepData.allowedElements.length > 0) {
                stepData.allowedElements.forEach(selector => {
                    try {
                        if (el.matches(selector) || el.closest(selector)) {
                            isAllowed = true;
                        }
                    } catch (e) {}
                });
            }
            
            if (!isAllowed) {
                el.classList.add('tutorial-blocked');
                el.style.pointerEvents = 'none';
            }
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (stepData.highlightElements) {
            stepData.highlightElements.forEach(selector => {
                const element = document.querySelector(selector);
                if (element) {
                    element.classList.add('tutorial-highlight');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É
                    const arrow = document.createElement('div');
                    arrow.className = 'tutorial-arrow';
                    arrow.innerHTML = 'üëá';
                    element.appendChild(arrow);
                }
            });
        }
    }

    nextTutorialStep() {
        if (this.tutorialStep >= this.tutorialSteps.length - 1) {
            this.completeTutorial();
        } else {
            this.showTutorialStep(this.tutorialStep + 1);
        }
    }

    prevTutorialStep() {
        if (this.tutorialStep > 0) {
            this.showTutorialStep(this.tutorialStep - 1);
        }
    }

    async skipTutorial() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?')) {
            await this.completeTutorial();
        }
    }

    async completeTutorial() {
        await this.saveUser({ tutorialCompleted: true });
        
        // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –æ–±—É—á–µ–Ω–∏—è
        const overlay = document.getElementById('tutorial-overlay');
        overlay.classList.remove('active');
        setTimeout(() => {
            overlay.style.display = 'none';
        }, 300);
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.tutorial-blocked').forEach(el => {
            el.classList.remove('tutorial-blocked');
            el.style.pointerEvents = '';
        });
        
        document.querySelectorAll('.tutorial-highlight').forEach(el => {
            el.classList.remove('tutorial-highlight');
        });
        
        this.updateUserInfo();
    }

    // ========== –°–ò–°–¢–ï–ú–ê –î–†–£–ó–ï–ô ==========

    switchFriendsTab(tabName) {
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.friends-nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.friends-content-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelector(`[data-friends-tab="${tabName}"]`).classList.add('active');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
        if (tabName === 'my-friends') {
            this.loadFriendsList();
        } else if (tabName === 'requests') {
            this.loadFriendRequests();
        }
    }

    initializeFriendsData(user) {
        if (!user.friends) user.friends = [];
        if (!user.friendRequests) user.friendRequests = { incoming: [], outgoing: [] };
    }

    async loadFriendsList() {
        const user = this.getUser();
        this.initializeFriendsData(user);
        
        const container = document.getElementById('friends-list');
        const countElement = document.getElementById('friends-count');
        
        const friends = user.friends || [];
        countElement.textContent = friends.length;
        container.innerHTML = '';
        
        if (friends.length === 0) {
            container.innerHTML = '<div class="no-friends">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–∏—Å–∫"!</div>';
            return;
        }
        
        for (const friendUserId of friends) {
            const friend = await this.getUserById(friendUserId);
            if (!friend) continue;
            
            const friendDiv = document.createElement('div');
            friendDiv.className = 'friend-item';
            
            const avatarSrc = friend.avatar || this.avatars[0];
            
            friendDiv.innerHTML = `
                <div class="friend-avatar">
                    <img src="${avatarSrc}" alt="${friend.nickname || friend.username}">
                </div>
                <div class="friend-info">
                    <div class="friend-name">${friend.nickname || friend.username}</div>
                    <div class="friend-id">ID: ${friend.userid || '–ù/–î'}</div>
                    <div class="friend-stats">
                        <span>–£—Ä–æ–≤–µ–Ω—å: ${friend.level || 1}</span>
                        <span>–ö–∞—Ä—Ç: ${Object.keys(friend.cards || {}).length}</span>
                    </div>
                </div>
                <div class="friend-actions">
                    <button class="btn small" onclick="gameData.removeFriend('${friendUserId}')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            
            container.appendChild(friendDiv);
        }
    }

    async searchPlayers() {
        const query = document.getElementById('friend-search-input').value.trim();
        const resultsContainer = document.getElementById('search-results');
        
        if (!query) {
            resultsContainer.innerHTML = '<div class="no-results">–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞</div>';
            return;
        }
        
        const currentUser = this.getUser();
        this.initializeFriendsData(currentUser);
        
        resultsContainer.innerHTML = '';
        
        const allUsers = await this.getAllUsers();
        const queryLower = query.toLowerCase();
        
        const results = Object.entries(allUsers).filter(([userId, user]) => {
            if (userId === this.currentUser) return false;
            
            const username = user.username || '';
            const nickname = user.nickname || '';
            const userid = user.userid || '';
            
            return username.toLowerCase().includes(queryLower) ||
                   nickname.toLowerCase().includes(queryLower) ||
                   userid.toLowerCase().includes(queryLower);
        });
        
        if (results.length === 0) {
            resultsContainer.innerHTML = '<div class="no-results">–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        results.forEach(([userId, user]) => {
            const resultDiv = document.createElement('div');
            resultDiv.className = 'search-result-item';
            
            const avatarSrc = user.avatar || this.avatars[0];
            const isFriend = (currentUser.friends || []).includes(userId);
            const hasSentRequest = (currentUser.friendRequests?.outgoing || []).includes(userId);
            const hasIncomingRequest = (currentUser.friendRequests?.incoming || []).includes(userId);
            
            let buttonHTML;
            if (isFriend) {
                buttonHTML = '<span class="already-friends">‚úì –£–∂–µ –¥—Ä—É–∑—å—è</span>';
            } else if (hasSentRequest) {
                buttonHTML = '<span class="request-sent">–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>';
            } else if (hasIncomingRequest) {
                buttonHTML = `<button class="btn primary small" onclick="gameData.acceptFriendRequest('${userId}')">–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å</button>`;
            } else {
                buttonHTML = `<button class="btn primary small" onclick="gameData.sendFriendRequest('${userId}')">–î–æ–±–∞–≤–∏—Ç—å</button>`;
            }
            
            resultDiv.innerHTML = `
                <div class="search-result-avatar">
                    <img src="${avatarSrc}" alt="${user.nickname || user.username}">
                </div>
                <div class="search-result-info">
                    <div class="search-result-name">${user.nickname || user.username}</div>
                    <div class="search-result-id">ID: ${user.userid || '–ù/–î'}</div>
                    <div class="search-result-stats">
                        –£—Ä–æ–≤–µ–Ω—å: ${user.level || 1} | –ö–∞—Ä—Ç: ${Object.keys(user.cards || {}).length}
                    </div>
                </div>
                <div class="search-result-actions">
                    ${buttonHTML}
                </div>
            `;
            
            resultsContainer.appendChild(resultDiv);
        });
    }

    async sendFriendRequest(targetUserId) {
        const currentUser = this.getUser();
        const targetUser = await this.getUserById(targetUserId);
        
        if (!targetUser) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(targetUser);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (currentUser.friends && currentUser.friends.includes(targetUserId)) {
            alert('–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤–∞—à –¥—Ä—É–≥!');
            return;
        }
        
        if (currentUser.friendRequests && currentUser.friendRequests.outgoing && currentUser.friendRequests.outgoing.includes(targetUserId)) {
            alert('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É!');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const newOutgoing = [...(currentUser.friendRequests?.outgoing || []), targetUserId];
        const newIncoming = [...(targetUser.friendRequests?.incoming || []), this.currentUser];
        
        await this.saveUser({ 'friendRequests/outgoing': newOutgoing });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(targetUserId, { 'friendRequests/incoming': newIncoming });
        } else {
            targetUser.friendRequests.incoming = newIncoming;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        alert(`–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É ${targetUser.nickname || targetUser.username}!`);
        this.searchPlayers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    }

    async acceptFriendRequest(senderUserId) {
        const currentUser = this.getUser();
        const sender = await this.getUserById(senderUserId);
        
        if (!sender) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(sender);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
        const newIncoming = (currentUser.friendRequests?.incoming || []).filter(u => u !== senderUserId);
        const newFriends = [...(currentUser.friends || []), senderUserId];
        
        const senderOutgoing = (sender.friendRequests?.outgoing || []).filter(u => u !== this.currentUser);
        const senderFriends = [...(sender.friends || []), this.currentUser];
        
        await this.saveUser({
            'friendRequests/incoming': newIncoming,
            'friends': newFriends
        });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(senderUserId, {
                'friendRequests/outgoing': senderOutgoing,
                'friends': senderFriends
            });
        } else {
            sender.friendRequests.outgoing = senderOutgoing;
            sender.friends = senderFriends;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('upgrade');
        alert(`–¢–µ–ø–µ—Ä—å –≤—ã –¥—Ä—É–∑—å—è —Å ${sender.nickname || sender.username}!`);
        this.loadFriendRequests();
    }

    async rejectFriendRequest(senderUserId) {
        const currentUser = this.getUser();
        const sender = await this.getUserById(senderUserId);
        
        if (!sender) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(sender);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        const newIncoming = (currentUser.friendRequests?.incoming || []).filter(u => u !== senderUserId);
        const senderOutgoing = (sender.friendRequests?.outgoing || []).filter(u => u !== this.currentUser);
        
        await this.saveUser({ 'friendRequests/incoming': newIncoming });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(senderUserId, { 'friendRequests/outgoing': senderOutgoing });
        } else {
            sender.friendRequests.outgoing = senderOutgoing;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        this.loadFriendRequests();
    }

    async cancelFriendRequest(targetUserId) {
        const currentUser = this.getUser();
        const target = await this.getUserById(targetUserId);
        
        if (!target) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(target);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        const newOutgoing = (currentUser.friendRequests?.outgoing || []).filter(u => u !== targetUserId);
        const targetIncoming = (target.friendRequests?.incoming || []).filter(u => u !== this.currentUser);
        
        await this.saveUser({ 'friendRequests/outgoing': newOutgoing });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(targetUserId, { 'friendRequests/incoming': targetIncoming });
        } else {
            target.friendRequests.incoming = targetIncoming;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        this.loadFriendRequests();
    }

    async removeFriend(friendUserId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞?')) return;
        
        const currentUser = this.getUser();
        const friend = await this.getUserById(friendUserId);
        
        if (!friend) return;
        
        this.initializeFriendsData(currentUser);
        this.initializeFriendsData(friend);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–∑–µ–π
        const newFriends = (currentUser.friends || []).filter(u => u !== friendUserId);
        const friendNewFriends = (friend.friends || []).filter(u => u !== this.currentUser);
        
        await this.saveUser({ friends: newFriends });
        
        if (this.useFirebase) {
            await firebaseAdapter.updateUserData(friendUserId, { friends: friendNewFriends });
        } else {
            friend.friends = friendNewFriends;
            localStorage.setItem('dotaCardsUsers', JSON.stringify(this.users));
        }
        
        this.soundSystem.playSound('whoosh');
        this.loadFriendsList();
    }

    async loadFriendRequests() {
        const user = this.getUser();
        this.initializeFriendsData(user);
        
        const incomingContainer = document.getElementById('incoming-requests');
        const outgoingContainer = document.getElementById('outgoing-requests');
        const incomingCount = document.getElementById('incoming-count');
        const outgoingCount = document.getElementById('outgoing-count');
        
        const incoming = user.friendRequests?.incoming || [];
        const outgoing = user.friendRequests?.outgoing || [];
        
        incomingCount.textContent = incoming.length;
        outgoingCount.textContent = outgoing.length;
        
        // –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        incomingContainer.innerHTML = '';
        if (incoming.length === 0) {
            incomingContainer.innerHTML = '<div class="no-requests">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>';
        } else {
            for (const senderUserId of incoming) {
                const sender = await this.getUserById(senderUserId);
                if (!sender) continue;
                
                const requestDiv = document.createElement('div');
                requestDiv.className = 'request-item';
                
                const avatarSrc = sender.avatar || this.avatars[0];
                
                requestDiv.innerHTML = `
                    <div class="request-avatar">
                        <img src="${avatarSrc}" alt="${sender.nickname || sender.username}">
                    </div>
                    <div class="request-info">
                        <div class="request-name">${sender.nickname || sender.username}</div>
                        <div class="request-id">ID: ${sender.userid || '–ù/–î'}</div>
                    </div>
                    <div class="request-actions">
                        <button class="btn primary small" onclick="gameData.acceptFriendRequest('${senderUserId}')">–ü—Ä–∏–Ω—è—Ç—å</button>
                        <button class="btn secondary small" onclick="gameData.rejectFriendRequest('${senderUserId}')">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                    </div>
                `;
                
                incomingContainer.appendChild(requestDiv);
            }
        }
        
        // –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        outgoingContainer.innerHTML = '';
        if (outgoing.length === 0) {
            outgoingContainer.innerHTML = '<div class="no-requests">–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>';
        } else {
            for (const targetUserId of outgoing) {
                const target = await this.getUserById(targetUserId);
                if (!target) continue;
                
                const requestDiv = document.createElement('div');
                requestDiv.className = 'request-item';
                
                const avatarSrc = target.avatar || this.avatars[0];
                
                requestDiv.innerHTML = `
                    <div class="request-avatar">
                        <img src="${avatarSrc}" alt="${target.nickname || target.username}">
                    </div>
                    <div class="request-info">
                        <div class="request-name">${target.nickname || target.username}</div>
                        <div class="request-id">ID: ${target.userid || '–ù/–î'}</div>
                    </div>
                    <div class="request-actions">
                        <button class="btn secondary small" onclick="gameData.cancelFriendRequest('${targetUserId}')">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                    </div>
                `;
                
                outgoingContainer.appendChild(requestDiv);
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ localStorage –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase
if (typeof firebaseAdapter !== 'undefined') {
    const originalSetItem = localStorage.setItem.bind(localStorage);
    
    localStorage.setItem = function(key, value) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ –æ–±—ã—á–Ω–æ
        originalSetItem(key, value);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if (key === 'dotaCardsUsers' && gameData && gameData.currentUser && gameData.useFirebase) {
            const users = JSON.parse(value);
            const currentUserData = users[gameData.currentUser];
            
            if (currentUserData) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Firebase
                firebaseAdapter.updateUserData(gameData.currentUser, currentUserData)
                    .catch(err => console.error('Auto-sync error:', err));
            }
        }
    };
    
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è localStorage ‚Üí Firebase –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
let gameData;

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
        gameData = new GameData();
        window.gameData = gameData; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è Firebase
    });
} else {
    console.log('üìÑ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
    gameData = new GameData();
    window.gameData = gameData; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è Firebase
}

