/**
 * üë• –°–ò–°–¢–ï–ú–ê –û–ù–õ–ê–ô–ù-–ë–û–Å–í
 * –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤ –ø–æ –∫–æ–¥—É –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Firebase
 */

class OnlineBattlesSystem {
    constructor(gameData) {
        this.gameData = gameData;
        this.currentRoom = null;
        this.isHost = false;
        this.roomListener = null;
    }

    async init() {
        console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤...');
        try {
            this.setupEventListeners();
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤:', error);
        }
    }

    setupEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤...');
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const onlineBtn = document.getElementById('online-battle-btn');
        if (onlineBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è –Ω–∞–π–¥–µ–Ω–∞ –≤ online-battles.js');
            onlineBtn.addEventListener('click', () => {
                console.log('üîµ –ö–ª–∏–∫ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–±–æ–π (–∏–∑ online-battles.js)');
                this.openOnlineBattleModal();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ online-battle-btn –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ online-battles.js!');
        }
        
        document.getElementById('close-online-battle')?.addEventListener('click', () => this.closeOnlineBattleModal());
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
        document.querySelectorAll('#online-battle-modal .tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ/–≤—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É
        document.getElementById('create-room-btn')?.addEventListener('click', () => this.createRoom());
        document.getElementById('join-room-btn')?.addEventListener('click', () => this.joinRoom());
        document.getElementById('cancel-room-btn')?.addEventListener('click', () => this.cancelRoom());
        document.getElementById('copy-room-code-btn')?.addEventListener('click', () => this.copyRoomCode());
    }

    openOnlineBattleModal() {
        console.log('üéÆ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–¥–∞
        const user = this.gameData.getUser();
        console.log('–ö–æ–ª–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.deck);
        
        if (!user.deck || user.deck.length !== 3) {
            alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∏–∑ 3 –∫–∞—Ä—Ç!');
            return;
        }
        
        const modal = document.getElementById('online-battle-modal');
        if (modal) {
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º');
            modal.style.display = 'flex';
            setTimeout(() => modal.classList.add('active'), 10);
        } else {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ online-battle-modal –ù–ï –Ω–∞–π–¥–µ–Ω–æ!');
        }
    }

    closeOnlineBattleModal() {
        document.getElementById('online-battle-modal').style.display = 'none';
        if (this.roomListener) {
            this.roomListener.off();
            this.roomListener = null;
        }
    }

    switchTab(tabName) {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–∑–¥–∞—Ç—å/–≤–æ–π—Ç–∏
        document.querySelectorAll('#online-battle-modal .tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });
        
        document.querySelectorAll('#online-battle-modal .online-tab').forEach(tab => {
            tab.classList.toggle('active', tab.id === `${tabName}-tab`);
        });
    }

    generateRoomCode() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        return Math.floor(100000 + Math.random() * 900000).toString();
    }

    async createRoom() {
        const user = this.gameData.getUser();
        console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Ö–æ—Å—Ç–æ–º:', user.nickname || user.username);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–¥—É
        if (!user.deck || user.deck.length !== 3) {
            alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∏–∑ 3 –∫–∞—Ä—Ç!');
            return;
        }
        
        console.log('üÉè –ö–æ–ª–æ–¥–∞ —Ö–æ—Å—Ç–∞:', user.deck);
        
        const roomCode = this.generateRoomCode();
        console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
        
        const currentUserId = this.gameData.useFirebase ? 
            (firebase.auth().currentUser?.uid || this.gameData.currentUser) :
            this.gameData.currentUser;
        
        console.log('üë§ ID —Ö–æ—Å—Ç–∞:', currentUserId);
        
        const roomData = {
            code: roomCode,
            host: currentUserId,
            hostNick: user.nickname || user.username,
            guest: null,
            guestNick: null,
            status: 'waiting',
            hostDeck: user.deck,
            guestDeck: null,
            turn: 0,
            round: 1,
            isHostTurn: true,
            createdAt: Date.now()
        };
        
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData);
        
        try {
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`rooms/${roomCode}`).set(roomData);
                console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Firebase');
            } else {
                // localStorage –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
                rooms[roomCode] = roomData;
                localStorage.setItem('onlineRooms', JSON.stringify(rooms));
                console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ localStorage');
            }
            
            this.currentRoom = roomData;
            this.isHost = true;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
            document.getElementById('create-room-btn').style.display = 'none';
            document.getElementById('room-created').style.display = 'block';
            document.getElementById('room-code-display').textContent = roomCode;
            
            console.log('üéâ –ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥:', roomCode);
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Å—Ç—è...');
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.listenToRoom(roomCode);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + error.message);
        }
    }

    async joinRoom() {
        const roomCode = document.getElementById('room-code-input').value.trim();
        
        if (!roomCode) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã!');
            return;
        }
        
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É:', roomCode);
        
        try {
            let roomData;
            
            if (this.gameData.useFirebase) {
                const snapshot = await firebase.database().ref(`rooms/${roomCode}`).once('value');
                roomData = snapshot.val();
                console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ Firebase:', roomData);
            } else {
                const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
                roomData = rooms[roomCode];
                console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ localStorage:', roomData);
            }
            
            if (!roomData) {
                alert('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥.');
                console.error('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            if (roomData.guest) {
                alert('–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!');
                console.error('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞');
                return;
            }
            
            const user = this.gameData.getUser();
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç:', user.nickname || user.username);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–¥—É
            if (!user.deck || user.deck.length !== 3) {
                alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –∏–∑ 3 –∫–∞—Ä—Ç!');
                return;
            }
            
            console.log('üÉè –ö–æ–ª–æ–¥–∞ –≥–æ—Å—Ç—è:', user.deck);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≥–æ—Å—Ç—è
            const currentUserId = this.gameData.useFirebase ? 
                (firebase.auth().currentUser?.uid || this.gameData.currentUser) :
                this.gameData.currentUser;
            
            console.log('üë§ ID –≥–æ—Å—Ç—è:', currentUserId);
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫–∞–∫ guest
            const updates = {
                guest: currentUserId,
                guestNick: user.nickname || user.username,
                guestDeck: user.deck,
                status: 'ready'
            };
            
            console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–∞–Ω–Ω—ã–º–∏ –≥–æ—Å—Ç—è:', updates);
            
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`rooms/${roomCode}`).update(updates);
                console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase');
            } else {
                const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
                Object.assign(rooms[roomCode], updates);
                localStorage.setItem('onlineRooms', JSON.stringify(rooms));
                console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ localStorage');
            }
            
            this.currentRoom = { ...roomData, ...updates };
            this.isHost = false;
            
            console.log('üéÆ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π');
            
            this.closeOnlineBattleModal();
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            setTimeout(() => {
                this.startOnlineBattle(roomCode);
            }, 300);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É:', error);
            alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
        }
    }

    listenToRoom(roomCode) {
        console.log('üëÇ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É:', roomCode);
        
        if (!this.gameData.useFirebase) {
            // –î–ª—è localStorage –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            const interval = setInterval(async () => {
                const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
                const room = rooms[roomCode];
                
                if (!room) {
                    console.log('‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
                    clearInterval(interval);
                    return;
                }
                
                console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç—ã (localStorage):', room.status);
                
                if (room.status === 'ready' && this.isHost) {
                    console.log('‚úÖ –ì–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–π...');
                    clearInterval(interval);
                    this.closeOnlineBattleModal();
                    this.startOnlineBattle(roomCode);
                }
            }, 1000);
            return;
        }
        
        // Firebase real-time listener
        console.log('üî• –°–æ–∑–¥–∞–µ–º Firebase listener –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã');
        this.roomListener = firebase.database().ref(`rooms/${roomCode}`);
        this.roomListener.on('value', (snapshot) => {
            const room = snapshot.val();
            
            if (!room) {
                console.log('‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                this.closeOnlineBattleModal();
                if (this.roomListener) {
                    this.roomListener.off();
                    this.roomListener = null;
                }
                return;
            }
            
            console.log('üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', {
                status: room.status,
                isHost: this.isHost,
                hasGuest: !!room.guest,
                hasBattleState: !!this.gameData.battleState
            });
            
            if (room.status === 'ready' && this.isHost && !this.gameData.battleState) {
                console.log('üéâ –ì–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π...');
                this.closeOnlineBattleModal();
                
                // –û—Ç–∫–ª—é—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                if (this.roomListener) {
                    this.roomListener.off();
                    this.roomListener = null;
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
                setTimeout(() => {
                    this.startOnlineBattle(roomCode);
                }, 300);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
            this.currentRoom = room;
            
            // –ï—Å–ª–∏ –±–æ–π –∏–¥—ë—Ç, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (room.status === 'playing' && this.gameData.battleState) {
                this.syncBattleState(room);
            }
        });
    }

    async startOnlineBattle(roomCode) {
        console.log('=== üéÆ –ù–∞—á–∞–ª–æ –æ–Ω–ª–∞–π–Ω-–±–æ—è ===');
        console.log('–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
        console.log('–†–æ–ª—å –∏–≥—Ä–æ–∫–∞:', this.isHost ? '–•–û–°–¢' : '–ì–û–°–¢–¨');
        
        try {
            const roomData = await this.getRoomData(roomCode);
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData);
            
            if (!roomData) {
                alert('–û—à–∏–±–∫–∞: –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                console.error('‚ùå roomData is null');
                return;
            }
            
            if (!roomData.hostDeck || !roomData.guestDeck) {
                alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –∫–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–¥—ã:', {
                    hostDeck: roomData.hostDeck,
                    guestDeck: roomData.guestDeck
                });
                return;
            }
            
            console.log('üÉè –ö–æ–ª–æ–¥–∞ —Ö–æ—Å—Ç–∞:', roomData.hostDeck);
            console.log('üÉè –ö–æ–ª–æ–¥–∞ –≥–æ—Å—Ç—è:', roomData.guestDeck);
            
            // –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–µ –∫–æ–ª–æ–¥—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç
            const playerDeck = this.isHost ? 
                await this.createBattleDeck(roomData.hostDeck, roomData.host) :
                await this.createBattleDeck(roomData.guestDeck, roomData.guest);
                
            const opponentDeck = this.isHost ?
                await this.createBattleDeck(roomData.guestDeck, roomData.guest) :
                await this.createBattleDeck(roomData.hostDeck, roomData.host);
            
            console.log('‚úÖ –ö–æ–ª–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', playerDeck.length, '–∫–∞—Ä—Ç');
            console.log('‚úÖ –ö–æ–ª–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', opponentDeck.length, '–∫–∞—Ä—Ç');
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –±–æ—è
            document.getElementById('main-menu').classList.remove('active');
            document.getElementById('battle-screen').classList.add('active');
            
            // –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
            this.gameData.battleState = {
                playerDeck,
                botDeck: opponentDeck, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                turn: 0,
                round: 1,
                isPlayerTurn: this.isHost, // —Ö–æ—Å—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
                playerName: this.isHost ? roomData.hostNick : roomData.guestNick,
                botName: this.isHost ? roomData.guestNick : roomData.hostNick,
                inProgress: true,
                isOnline: true,
                roomCode: roomCode,
                lastPlayerCard: null,  // –ö–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª –∏–≥—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
                lastBotCard: null       // –ö–∞—Ä—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ–¥–∏–ª –±–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ
            };
            
            console.log('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è —Å–æ–∑–¥–∞–Ω–æ:', this.gameData.battleState);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
            await this.updateRoomStatus(roomCode, 'playing');
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "playing"');
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –±–æ–π
            this.gameData.renderBattle();
            console.log('‚úÖ –ë–æ–π –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–ª–∞–π–Ω-–ª–æ–≥–∏–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π
            this.startOnlineBattleLogic(roomCode);
            console.log('‚úÖ –û–Ω–ª–∞–π–Ω-–ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–Ω–ª–∞–π–Ω-–±–æ—è:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—è: ' + error.message);
        }
    }

    async createBattleDeck(deckCardNames, userId = null) {
        console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–µ–≤–æ–π –∫–æ–ª–æ–¥—ã –∏–∑:', deckCardNames);
        console.log('üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId || '—Ç–µ–∫—É—â–∏–π');
        
        if (!deckCardNames || !Array.isArray(deckCardNames)) {
            console.error('‚ùå deckCardNames –Ω–µ –º–∞—Å—Å–∏–≤:', deckCardNames);
            return [];
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userData;
        if (userId && this.gameData.useFirebase) {
            // –î–ª—è Firebase –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase:', userId);
            userData = await this.gameData.getUserById(userId);
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userData ? 'OK' : 'NULL');
        } else if (userId) {
            // localStorage - –ø–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userId);
            const allUsers = JSON.parse(localStorage.getItem('dotaCardsUsers') || '{}');
            userData = allUsers[userId];
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userData ? 'OK' : 'NULL');
        } else {
            // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            userData = this.gameData.getUser();
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData ? 'OK' : 'NULL');
        }
        
        if (!userData) {
            console.error('‚ùå userData is null! userId:', userId);
            return [];
        }
        
        const userCards = userData.cards || {};
        console.log('üì¶ –ö–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', Object.keys(userCards).length);
        console.log('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç:', Object.keys(userCards));
        
        const battleDeck = deckCardNames.map(cardName => {
            const cardData = this.gameData.cards[cardName];
            if (!cardData) {
                console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ:', cardName);
                return null;
            }
            
            console.log('üìã –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:', cardName, {
                name: cardData.name,
                damage: cardData.damage,
                health: cardData.health,
                defense: cardData.defense,
                speed: cardData.speed
            });
            
            if (!cardData.health || !cardData.damage) {
                console.error('‚ùå –£ –∫–∞—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã!', cardName, cardData);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userCard = userCards[cardName] || { upgrades: [] };
            const upgrades = userCard.upgrades || [];
            
            console.log('üéØ –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', upgrades);
            
            const damageBonus = this.gameData.getUpgradeBonus(upgrades, 'damage');
            const healthBonus = this.gameData.getUpgradeBonus(upgrades, 'health');
            const defenseBonus = this.gameData.getUpgradeBonus(upgrades, 'defense');
            const speedBonus = this.gameData.getUpgradeBonus(upgrades, 'speed');
            
            console.log('üí™ –ë–æ–Ω—É—Å—ã –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π:', { damageBonus, healthBonus, defenseBonus, speedBonus });
            
            const finalDamage = (cardData.damage || 50) + damageBonus;
            const finalHealth = (cardData.health || 100) + healthBonus;
            const finalDefense = (cardData.defense || 10) + defenseBonus;
            const finalSpeed = (cardData.speed || 10) + speedBonus;
            
            console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã:', {
                damage: finalDamage,
                health: finalHealth,
                defense: finalDefense,
                speed: finalSpeed
            });
            
            const card = {
                name: cardData.name,
                damage: finalDamage,
                health: finalHealth,
                maxHealth: finalHealth,
                defense: finalDefense,
                speed: finalSpeed,
                image: cardData.image,
                rarity: cardData.rarity,
                upgrades: upgrades,
                isDead: false
            };
            
            console.log(`‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${card.name} (DMG ${card.damage}, HP ${card.health}/${card.maxHealth}, DEF ${card.defense}%, SPD ${card.speed})`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            if (!card.health || !card.maxHealth) {
                console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ HP —É –∫–∞—Ä—Ç—ã:', card);
            }
            
            return card;
        }).filter(card => card !== null);
        
        console.log('‚úÖ –ë–æ–µ–≤–∞—è –∫–æ–ª–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞:', battleDeck.length, '–∫–∞—Ä—Ç');
        
        return battleDeck;
    }

    startOnlineBattleLogic(roomCode) {
        console.log('üéØ –ó–∞–ø—É—Å–∫ –æ–Ω–ª–∞–π–Ω-–ª–æ–≥–∏–∫–∏, isPlayerTurn:', this.gameData.battleState.isPlayerTurn);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–±–æ—è
        if (!this.gameData.battleState.lastPlayerCard) {
            this.gameData.battleState.lastPlayerCard = null;
        }
        if (!this.gameData.battleState.lastBotCard) {
            this.gameData.battleState.lastBotCard = null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–π —Ö–æ–¥
        if (this.gameData.battleState.isPlayerTurn) {
            // –ù–∞—à —Ö–æ–¥
            console.log('‚úÖ –ù–∞—à —Ö–æ–¥ - –∑–∞–ø—É—Å–∫–∞–µ–º startPlayerTurn');
            this.gameData.startPlayerTurn();
        } else {
            // –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ - –∂–¥—ë–º
            console.log('‚è≥ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ - –æ–∂–∏–¥–∞–µ–º');
            this.gameData.showBattleHint('–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞... –û–∂–∏–¥–∞–π—Ç–µ');
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ
            this.listenToRoomUpdates(roomCode);
        }
    }

    listenToRoomUpdates(roomCode) {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ–¥–∞
        if (this.gameData.useFirebase) {
            const roomRef = firebase.database().ref(`rooms/${roomCode}`);
            roomRef.on('value', (snapshot) => {
                const room = snapshot.val();
                if (!room) return;
                
                // –ï—Å–ª–∏ —Ö–æ–¥ —Å–º–µ–Ω–∏–ª—Å—è –Ω–∞ –Ω–∞—à
                const isOurTurn = this.isHost ? room.isHostTurn : !room.isHostTurn;
                
                if (isOurTurn && !this.gameData.battleState.isPlayerTurn) {
                    // –¢–µ–ø–µ—Ä—å –Ω–∞—à —Ö–æ–¥
                    this.gameData.battleState.isPlayerTurn = true;
                    this.gameData.hideBattleHint();
                    this.gameData.startPlayerTurn();
                }
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–æ–¥
                if (room.hostDeck && room.guestDeck) {
                    this.syncDecksFromRoom(room);
                }
            });
        }
    }

    syncDecksFromRoom(room) {
        // –û–±–Ω–æ–≤–ª—è–µ–º HP –∫–∞—Ä—Ç –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        if (this.isHost) {
            this.updateDeckHP(this.gameData.battleState.playerDeck, room.hostDeck);
            this.updateDeckHP(this.gameData.battleState.botDeck, room.guestDeck);
        } else {
            this.updateDeckHP(this.gameData.battleState.playerDeck, room.guestDeck);
            this.updateDeckHP(this.gameData.battleState.botDeck, room.hostDeck);
        }
        
        this.gameData.renderBattle();
    }

    updateDeckHP(deck, deckData) {
        deck.forEach((card, index) => {
            if (deckData[index]) {
                card.currentHealth = deckData[index].currentHealth || deckData[index].health;
                card.isDead = deckData[index].isDead || false;
            }
        });
    }

    async updateRoomStatus(roomCode, status) {
        if (this.gameData.useFirebase) {
            await firebase.database().ref(`rooms/${roomCode}/status`).set(status);
        } else {
            const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
            if (rooms[roomCode]) {
                rooms[roomCode].status = status;
                localStorage.setItem('onlineRooms', JSON.stringify(rooms));
            }
        }
    }

    async getRoomData(roomCode) {
        if (this.gameData.useFirebase) {
            const snapshot = await firebase.database().ref(`rooms/${roomCode}`).once('value');
            return snapshot.val();
        } else {
            const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
            return rooms[roomCode];
        }
    }

    async cancelRoom() {
        if (!this.currentRoom) return;
        
        try {
            const roomCode = this.currentRoom.code;
            
            if (this.gameData.useFirebase) {
                await firebase.database().ref(`rooms/${roomCode}`).remove();
            } else {
                const rooms = JSON.parse(localStorage.getItem('onlineRooms') || '{}');
                delete rooms[roomCode];
                localStorage.setItem('onlineRooms', JSON.stringify(rooms));
            }
            
            if (this.roomListener) {
                this.roomListener.off();
                this.roomListener = null;
            }
            
            this.currentRoom = null;
            this.closeOnlineBattleModal();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–º–Ω–∞—Ç—ã:', error);
        }
    }

    copyRoomCode() {
        const code = document.getElementById('room-code-display').textContent;
        
        if (navigator.clipboard) {
            navigator.clipboard.writeText(code).then(() => {
                alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + code);
            });
        } else {
            // Fallback
            const input = document.createElement('input');
            input.value = code;
            document.body.appendChild(input);
            input.select();
            document.execCommand('copy');
            document.body.removeChild(input);
            alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + code);
        }
    }

    syncBattleState(roomData) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è –∏–∑ Firebase
        if (!this.gameData.battleState) return;
        
        this.gameData.battleState.turn = roomData.turn || 0;
        this.gameData.battleState.round = roomData.round || 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
        this.gameData.updateRoundDisplay();
    }

    async endOnlineBattle(playerWon) {
        console.log('=== –ö–æ–Ω–µ—Ü –æ–Ω–ª–∞–π–Ω-–±–æ—è ===', playerWon);
        
        // –ù–ï –¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—ã –≤ –æ–Ω–ª–∞–π–Ω-–±–æ—è—Ö
        const resultOverlay = document.createElement('div');
        resultOverlay.className = 'battle-result-overlay';
        resultOverlay.style.display = 'flex';
        resultOverlay.style.opacity = '0';
        
        if (playerWon) {
            resultOverlay.innerHTML = `
                <div class="battle-result victory">
                    <div class="result-icon">üëë</div>
                    <div class="result-title">–ü–û–ë–ï–î–ê!</div>
                    <div class="result-message">–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –æ–Ω–ª–∞–π–Ω-–±–æ—é!</div>
                    <div class="online-note">‚ö†Ô∏è –í –æ–Ω–ª–∞–π–Ω-–±–æ—è—Ö –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥</div>
                    <div class="result-buttons">
                        <button class="btn primary" onclick="onlineBattlesSystem.backToMenuOnline()">üìã –í –º–µ–Ω—é</button>
                    </div>
                </div>
            `;
        } else {
            resultOverlay.innerHTML = `
                <div class="battle-result defeat">
                    <div class="result-icon">üíÄ</div>
                    <div class="result-title">–ü–û–†–ê–ñ–ï–ù–ò–ï</div>
                    <div class="result-message">–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –æ–Ω–ª–∞–π–Ω-–±–æ–π!</div>
                    <div class="online-note">‚ö†Ô∏è –í –æ–Ω–ª–∞–π–Ω-–±–æ—è—Ö –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥</div>
                    <div class="result-buttons">
                        <button class="btn primary" onclick="onlineBattlesSystem.backToMenuOnline()">üìã –í –º–µ–Ω—é</button>
                    </div>
                </div>
            `;
        }
        
        document.body.appendChild(resultOverlay);
        
        setTimeout(() => {
            resultOverlay.style.opacity = '1';
            resultOverlay.classList.add('active');
        }, 100);
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        if (this.currentRoom) {
            await this.cancelRoom();
        }
    }

    backToMenuOnline() {
        const resultOverlay = document.querySelector('.battle-result-overlay');
        if (resultOverlay && document.body.contains(resultOverlay)) {
            document.body.removeChild(resultOverlay);
        }
        
        document.getElementById('battle-screen').classList.remove('active');
        document.getElementById('main-menu').classList.add('active');
        
        this.gameData.battleState = null;
        this.gameData.clearBattleState();
        this.gameData.updateUserInfo();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
window.onlineBattlesSystem = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initOnlineBattlesSystem);
} else {
    initOnlineBattlesSystem();
}

function initOnlineBattlesSystem() {
    console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–Ω–ª–∞–π–Ω-–±–æ—ë–≤...');
    const interval = setInterval(() => {
        if (window.gameData) {
            console.log('‚úÖ gameData –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º OnlineBattlesSystem');
            window.onlineBattlesSystem = new OnlineBattlesSystem(window.gameData);
            window.onlineBattlesSystem.init();
            clearInterval(interval);
        }
    }, 100);
}

