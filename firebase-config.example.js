// ========================================
// FIREBASE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –ü–†–ò–ú–ï–†
// ========================================
// 
// ‚ö†Ô∏è –≠–¢–û –ü–†–ò–ú–ï–†! –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø!
// 
// –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
// 1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ firebase-config.js
// 2. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ –∏–∑ Firebase Console
// 3. –ù–ï –∫–æ–º–º–∏—Ç—å—Ç–µ firebase-config.js –≤ Git!
//
// ========================================

const firebaseConfig = {
    // üîë –ü–æ–ª—É—á–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Firebase Console:
    // Project Settings ‚Üí General ‚Üí Your apps ‚Üí Web app
    
    apiKey: "–í–ê–®_API_KEY_–ó–î–ï–°–¨",
    authDomain: "–í–ê–®_PROJECT_ID.firebaseapp.com",
    databaseURL: "https://–í–ê–®_PROJECT_ID-default-rtdb.firebaseio.com",
    projectId: "–í–ê–®_PROJECT_ID",
    storageBucket: "–í–ê–®_PROJECT_ID.appspot.com",
    messagingSenderId: "–í–ê–®_MESSAGING_SENDER_ID",
    appId: "–í–ê–®_APP_ID"
};

// ========================================
// –ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ:
// ========================================
//
// 1. –û—Ç–∫—Ä–æ–π—Ç–µ https://console.firebase.google.com/
// 2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
// 3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏ ‚öôÔ∏è
// 4. "Project settings"
// 5. –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–æ "Your apps"
// 6. –ï—Å–ª–∏ –Ω–µ—Ç Web app - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Web (</>)
// 7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ firebaseConfig
// 8. –í—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –≤—ã—à–µ
// ========================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let app;
let auth;
let database;

try {
    app = firebase.initializeApp(firebaseConfig);
    auth = firebase.auth();
    database = firebase.database();
    console.log('‚úÖ Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
    console.error('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã—à–µ');
}

// FirebaseAdapter - –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class FirebaseAdapter {
    constructor() {
        this.auth = auth;
        this.database = database;
        this.currentUser = null;
        this.listeners = {};
    }

    async register(username, password) {
        try {
            const email = `${username}@dotacards.local`;
            const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);
            const userId = userCredential.user.uid;

            const userData = {
                username: username,
                nickname: username,
                userid: this.generateUserId(),
                level: 1,
                experience: 0,
                gold: 0,
                gems: 0,
                cards: {},
                deck: [],
                upgrades: {},
                avatar: null,
                friends: [],
                friendRequests: { incoming: [], outgoing: [] },
                battlesPlayed: 0,
                casesOpened: 0,
                createdAt: Date.now()
            };

            await this.database.ref(`users/${userId}`).set(userData);
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', username);
            return { success: true, userId, userData };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            if (error.code === 'auth/email-already-in-use') {
                return { success: false, error: '–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!' };
            }
            return { success: false, error: error.message };
        }
    }

    async login(username, password) {
        try {
            const email = `${username}@dotacards.local`;
            const userCredential = await this.auth.signInWithEmailAndPassword(email, password);
            const userId = userCredential.user.uid;

            const snapshot = await this.database.ref(`users/${userId}`).once('value');
            const userData = snapshot.val();

            if (!userData) throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');

            this.currentUser = userId;
            console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', username);
            return { success: true, userId, userData };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
                return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!' };
            }
            return { success: false, error: error.message };
        }
    }

    async logout() {
        try {
            await this.auth.signOut();
            this.currentUser = null;
            console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            return { success: true };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            return { success: false, error: error.message };
        }
    }

    async getUserData(userId = null) {
        try {
            const uid = userId || this.currentUser;
            if (!uid) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            const snapshot = await this.database.ref(`users/${uid}`).once('value');
            return snapshot.val();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    async updateUserData(userId, data) {
        try {
            const uid = userId || this.currentUser;
            if (!uid) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            await this.database.ref(`users/${uid}`).update(data);
            return { success: true };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return { success: false, error: error.message };
        }
    }

    async getAllUsers() {
        try {
            const snapshot = await this.database.ref('users').once('value');
            const users = {};
            snapshot.forEach((childSnapshot) => {
                users[childSnapshot.key] = childSnapshot.val();
            });
            return users;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return {};
        }
    }

    async searchUsers(query) {
        try {
            const allUsers = await this.getAllUsers();
            const queryLower = query.toLowerCase();
            
            const results = Object.entries(allUsers)
                .filter(([userId, userData]) => {
                    if (userId === this.currentUser) return false;
                    const username = (userData.username || '').toLowerCase();
                    const nickname = (userData.nickname || '').toLowerCase();
                    const userid = (userData.userid || '').toLowerCase();
                    return username.includes(queryLower) ||
                           nickname.includes(queryLower) ||
                           userid.includes(queryLower);
                })
                .map(([userId, userData]) => ({ userId, ...userData }));
            
            return results;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            return [];
        }
    }

    listenToUserData(userId, callback) {
        const uid = userId || this.currentUser;
        if (!uid) return;
        const ref = this.database.ref(`users/${uid}`);
        const listener = ref.on('value', (snapshot) => callback(snapshot.val()));
        this.listeners[uid] = { ref, listener };
    }

    unlistenToUserData(userId) {
        const uid = userId || this.currentUser;
        if (this.listeners[uid]) {
            this.listeners[uid].ref.off('value', this.listeners[uid].listener);
            delete this.listeners[uid];
        }
    }

    generateUserId() {
        return 'ID' + Math.random().toString(36).substr(2, 9).toUpperCase();
    }

    getCurrentUserId() {
        return this.currentUser;
    }

    isAuthenticated() {
        return this.auth.currentUser !== null;
    }
}

const firebaseAdapter = new FirebaseAdapter();

auth.onAuthStateChanged((user) => {
    if (user) {
        firebaseAdapter.currentUser = user.uid;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.uid);
    } else {
        firebaseAdapter.currentUser = null;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
});

